# Workflow: stile del codice {#sec-workflow-style}

```{r}
#| echo: false
source("_common.R")
```

Un buono stile di codice è come la punteggiatura corretta: puoi cavartela senza, maproriosicuramenterndeelecosepiùfacilidalegger.
Anche se sei un programmatore molto nuovo, è una buona idea lavorare sul tuo stile di codice.
Usare uno stile consistente rende più facile per altri (incluso il tuo futuro io!) leggere il tuo lavoro ed è particolarmente importante se hai bisogno di ottenere aiuto da qualcun altro.
Questo capitolo introdurrà i punti più importanti della [guida di stile tidyverse](https://style.tidyverse.org), che è usata in tutto questo libro.

Dare stile al tuo codice sembrerà un po' tedioso all'inizio, ma se lo pratichi, presto diventerà una seconda natura.
Inoltre, ci sono alcuni strumenti fantastici per ristilizzare rapidamente il codice esistente, come il pacchetto [**styler**](https://styler.r-lib.org) di Lorenz Walthert.
Una volta installato con `install.packages("styler")`, un modo facile per usarlo è tramite la **command palette** di RStudio.
La command palette ti permette di usare qualsiasi comando integrato di RStudio e molti addin forniti dai pacchetti.
Apri la palette premendo Cmd/Ctrl + Shift + P, poi digita "styler" per vedere tutte le scorciatoie offerte da styler.
@fig-styler mostra i risultati.

```{r}
#| label: fig-styler
#| echo: false
#| out-width: null
#| fig-cap: | 
#|   La command palette di RStudio rende facile accedere a ogni comando di RStudio
#|   usando solo la tastiera.
#| fig-alt: |
#|   Una schermata che mostra la command palette dopo aver digitato "styler", mostrando
#|   i quattro strumenti di styling forniti dal pacchetto.
knitr::include_graphics("screenshots/rstudio-palette.png")
```

Useremo i pacchetti tidyverse e nycflights13 per gli esempi di codice in questo capitolo.

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(nycflights13)
```

## Nomi

Abbiamo parlato brevemente dei nomi in @sec-whats-in-a-name.
Ricorda che i nomi delle variabili (quelli creati da `<-` e quelli creati da `mutate()`) dovrebbero usare solo lettere minuscole, numeri e `_`.
Usa `_` per separare le parole all'interno di un nome.

```{r}
#| eval: false
# Cerca di fare:
short_flights <- flights |> filter(air_time < 60)

# Evita:
SHORTFLIGHTS <- flights |> filter(air_time < 60)
```

Come regola generale, è meglio preferire nomi lunghi e descrittivi che sono facili da capire piuttosto che nomi concisi che sono veloci da digitare.
I nomi brevi fanno risparmiare relativamente poco tempo quando scrivi codice (specialmente perché l'autocompletamento ti aiuterà a finire di digitarli), ma può essere dispendioso quando torni su vecchio codice e sei costretto a decifrare un'abbreviazione criptica.

Se hai un gruppo di nomi per cose correlate, fai del tuo meglio per essere consistente.
È facile che emergano inconsistenze quando dimentichi una convenzione precedente, quindi non sentirti male se devi tornare indietro e rinominare le cose.
In generale, se hai un gruppo di variabili che sono una variazione su un tema, è meglio dare loro un prefisso comune piuttosto che un suffisso comune perché l'autocompletamento funziona meglio sull'inizio di una variabile.

## Spazi

Metti spazi su entrambi i lati degli operatori matematici tranne `^` (cioè `+`, `-`, `==`, `<`, ...), e intorno all'operatore di assegnazione (`<-`).

```{r}
#| eval: false
# Cerca di fare
z <- (a + b)^2 / d

# Evita
z<-( a + b ) ^ 2/d
```

Non mettere spazi dentro o fuori le parentesi per le chiamate di funzione normali.
Metti sempre uno spazio dopo una virgola, proprio come nell'inglese standard.

```{r}
#| eval: false
# Cerca di fare
mean(x, na.rm = TRUE)

# Evita
mean (x ,na.rm=TRUE)
```

Va bene aggiungere spazi extra se migliora l'allineamento.
Per esempio, se stai creando variabili multiple in `mutate()`, potresti voler aggiungere spazi così che tutti i `=` si allineino.[^workflow-style-1]
Questo rende più facile scorrere il codice.

[^workflow-style-1]: Siccome `dep_time` è nel formato `HMM` o `HHMM`, usiamo la divisione intera (`%/%`) per ottenere l'ora e il resto (noto anche come modulo, `%%`) per ottenere il minuto.

```{r}
#| eval: false
flights |> 
  mutate(
    speed      = distance / air_time,
    dep_hour   = dep_time %/% 100,
    dep_minute = dep_time %%  100
  )
```

## Pipe {#sec-pipes}

`|>` dovrebbe sempre avere uno spazio prima e dovrebbe tipicamente essere l'ultima cosa su una riga.
Questo rende più facile aggiungere nuovi passi, riorganizzare passi esistenti, modificare elementi all'interno di un passo, e ottenere una vista a volo d'uccello scorrendo i verbi sul lato sinistro.

```{r}
#| eval: false
# Cerca di fare 
flights |>  
  filter(!is.na(arr_delay), !is.na(tailnum)) |> 
  count(dest)

# Evita
flights|>filter(!is.na(arr_delay), !is.na(tailnum))|>count(dest)
```

Se la funzione in cui stai usando la pipe ha argomenti nominati (come `mutate()` o `summarize()`), metti ogni argomento su una nuova riga.
Se la funzione non ha argomenti nominati (come `select()` o `filter()`), mantieni tutto su una riga a meno che non ci stia, nel qual caso dovresti mettere ogni argomento sulla sua riga.

```{r}
#| eval: false
# Cerca di fare
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# Evita
flights |>
  group_by(
    tailnum
  ) |> 
  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())
```

Dopo il primo passo della pipeline, indenta ogni riga di due spazi.
RStudio metterà automaticamente gli spazi per te dopo un'interruzione di riga seguita da `|>`.
Se stai mettendo ogni argomento sulla sua riga, indenta di due spazi extra.
Assicurati che `)` sia sulla sua riga, e non indentata per corrispondere alla posizione orizzontale del nome della funzione.

```{r}
#| eval: false
# Cerca di fare 
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# Evita
flights|>
  group_by(tailnum) |> 
  summarize(
             delay = mean(arr_delay, na.rm = TRUE), 
             n = n()
           )

# Evita
flights|>
  group_by(tailnum) |> 
  summarize(
  delay = mean(arr_delay, na.rm = TRUE), 
  n = n()
  )
```

Va bene evitare alcune di queste regole se la tua pipeline sta facilmente su una riga.
Ma nella nostra esperienza collettiva, è comune che frammenti brevi crescano, quindi di solito risparmierai tempo a lungo termine iniziando con tutto lo spazio verticale di cui hai bisogno.

```{r}
#| eval: false
# Questo sta compattamente su una riga
df |> mutate(y = x + 1)

# Mentre questo occupa 4 volte più righe, si estende facilmente a 
# più variabili e più passi in futuro
df |> 
  mutate(
    y = x + 1
  )
```

Infine, stai attento a scrivere pipe molto lunghe, diciamo più di 10-15 righe.
Prova a spezzarle in sotto-compiti più piccoli, dando a ogni compito un nome informativo.
I nomi aiuteranno a suggerire al lettore cosa sta succedendo e rendono più facile controllare che i risultati intermedi siano come aspettati.
Ogni volta che puoi dare a qualcosa un nome informativo, dovresti dargli un nome informativo, per esempio quando cambi fondamentalmente la struttura dei dati, es. dopo pivoting o summarizing.
Non aspettarti di farlo bene al primo tentativo!
Questo significa spezzare pipeline lunghe se ci sono stati intermedi che possono ottenere buoni nomi.

## ggplot2

Le stesse regole di base che si applicano alla pipe si applicano anche a ggplot2; tratta semplicemente `+` allo stesso modo di `|>`.

```{r}
#| eval: false
flights |> 
  group_by(month) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE)
  ) |> 
  ggplot(aes(x = month, y = delay)) +
  geom_point() + 
  geom_line()
```

Di nuovo, se non puoi far stare tutti gli argomenti di una funzione su una singola riga, metti ogni argomento sulla sua riga:

```{r}
#| eval: false
flights |> 
  group_by(dest) |> 
  summarize(
    distance = mean(distance),
    speed = mean(distance / air_time, na.rm = TRUE)
  ) |> 
  ggplot(aes(x = distance, y = speed)) +
  geom_smooth(
    method = "loess",
    span = 0.5,
    se = FALSE, 
    color = "white", 
    linewidth = 4
  ) +
  geom_point()
```

Fai attenzione alla transizione da `|>` a `+`.
Vorremmo che questa transizione non fosse necessaria, ma sfortunatamente, ggplot2 è stato scritto prima che la pipe fosse scoperta.

## Commenti di sezione

Man mano che i tuoi script diventano più lunghi, puoi usare commenti di **sezione** per spezzare il tuo file in pezzi gestibili:

```{r}
#| eval: false
# Carica dati --------------------------------------

# Visualizza dati --------------------------------------
```

RStudio fornisce una scorciatoia da tastiera per creare queste intestazioni (Cmd/Ctrl + Shift + R), e le mostrerà nel menu a discesa di navigazione del codice in basso a sinistra dell'editor, come mostrato in @fig-rstudio-sections.

```{r}
#| label: fig-rstudio-sections
#| echo: false
#| out-width: null
#| fig-cap: | 
#|   Dopo aver aggiunto commenti di sezione al tuo script, puoi
#|   navigare facilmente verso di essi usando lo strumento di navigazione del codice
#|   in basso a sinistra dell'editor di script.
knitr::include_graphics("screenshots/rstudio-nav.png")
```

## Esercizi

1.  Ristilizza le seguenti pipeline seguendo le linee guida sopra.

    ```{r}
    #| eval: false
    flights|>filter(dest=="IAH")|>group_by(year,month,day)|>summarize(n=n(),
    delay=mean(arr_delay,na.rm=TRUE))|>filter(n>10)

    flights|>filter(carrier=="UA",dest%in%c("IAH","HOU"),sched_dep_time>
    0900,sched_arr_time<2000)|>group_by(flight)|>summarize(delay=mean(
    arr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|>filter(n>10)
    ```

## Riassunto

In questo capitolo, hai imparato i principi più importanti dello stile del codice.
Questi potrebbero sembrare un insieme di regole arbitrarie all'inizio (perché lo sono!) ma nel tempo, man mano che scrivi più codice e condividi codice con più persone, vedrai quanto importante sia uno stile consistente.
E non dimenticare il pacchetto styler: è un ottimo modo per migliorare rapidamente la qualità del codice mal stilizzato.

Nel prossimo capitolo, torniamo agli strumenti di data science, imparando sui dati ordinati.
I dati ordinati sono un modo consistente di organizzare i tuoi data frame che è usato in tutto il tidyverse.
Questa consistenza rende la tua vita più facile perché una volta che hai dati ordinati, funziona semplicemente con la grande maggioranza delle funzioni tidyverse.
Ovviamente, la vita non è mai facile, e la maggior parte dei dataset che incontri in natura non saranno già ordinati.
Quindi ti insegneremo anche come usare il pacchetto tidyr per ordinare i tuoi dati disordinati.