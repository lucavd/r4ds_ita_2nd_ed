# Espressioni regolari {#sec-regular-expressions}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

In @sec-strings hai imparato moltissime funzioni utili per lavorare con le stringhe. In questo capitolo ci concentreremo su quelle funzioni che utilizzano le **espressioni regolari**, un linguaggio conciso e potente per descrivere pattern all'interno delle stringhe. Il termine "regular expression" è un po' macchinoso, per cui la maggior parte delle persone lo abbrevia in "regex"[^regexps-1] o "regexp".

[^regexps-1]: Puoi pronunciarlo con una g dura (reg-x) oppure con una g morbida (rej-x).

Il capitolo inizia con le basi delle espressioni regolari e le funzioni stringr più utili per l’analisi dei dati. Successivamente amplieremo la tua conoscenza dei pattern e tratteremo sette argomenti importanti (escaping, ancoraggio, classi di caratteri, classi shorthand, quantificatori, precedenza degli operatori e raggruppamento). Infine parleremo di altri tipi di pattern che le funzioni stringr possono gestire e delle varie flag che consentono di modificare il funzionamento delle espressioni regolari.

### Prerequisiti

In questo capitolo utilizzeremo funzioni per espressioni regolari dai pacchetti stringr e tidyr, entrambi membri fondamentali del tidyverse, oltre ai dati del pacchetto babynames.

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(babynames)
```

Durante questo capitolo utilizzeremo una combinazione di esempi inline molto semplici per farti capire l'idea di base, i dati di babynames e tre vettori di caratteri:

-   `fruit` contiene i nomi di 80 frutti.
-   `words` contiene 980 parole comuni in inglese.
-   `sentences` contiene 720 frasi brevi.

## Fondamenti dei pattern {#sec-reg-basics}

Utilizzeremo `str_view()` per capire come funzionano i pattern regex. Abbiamo già usato `str_view()` nel capitolo precedente per confrontare una stringa e la sua rappresentazione stampata; ora lo useremo con il suo secondo argomento, un'espressione regolare. Se questo viene fornito, `str_view()` mostrerà solo quegli elementi del vettore di stringhe che corrispondono, racchiudendo ciascuna corrispondenza tra `<>` e, ove possibile, evidenziandola in blu.

I pattern più semplici sono composti da lettere e numeri che corrispondono esattamente a quei caratteri:

```{r}
str_view(fruit, "berry")
```

Lettere e numeri corrispondono esattamente e sono chiamati **caratteri letterali**. La maggior parte dei segni di punteggiatura, come `.`, `+`, `*`, `[`, `]` e `?`, ha significato speciale[^regexps-2] e viene definita come **metacarattere**. Ad esempio, il punto `.` corrisponde a qualsiasi carattere[^regexps-3], così la stringa "a." corrisponderà a qualsiasi stringa che contenga una "a" seguita da un altro carattere:

```{r}
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
```

Oppure potremmo cercare tutti i frutti che contengono una "a", seguita da tre caratteri, seguita da una "e":

```{r}
str_view(fruit, "a...e")
```

**I quantificatori** controllano quante volte un pattern può corrispondere:

-   `?` rende un pattern opzionale (cioè, lo fa corrispondere zero o una volta)
-   `+` permette a un pattern di ripetersi (cioè, corrisponde almeno una volta)
-   `*` permette a un pattern di ripetersi anche zero volte (cioè, corrisponde a un numero qualsiasi di volte, inclusi 0)

```{r}
# "ab?" corrisponde a una "a" opzionalmente seguita da una "b".
str_view(c("a", "ab", "abb"), "ab?")

# "ab+" corrisponde a una "a" seguita da almeno una "b".
str_view(c("a", "ab", "abb"), "ab+")

# "ab*" corrisponde a una "a" seguita da un numero qualsiasi di "b".
str_view(c("a", "ab", "abb"), "ab*")
```

**Le classi di caratteri** sono definite da `[]` e consentono di abbinare uno qualsiasi dei caratteri specificati, per esempio `[abcd]` corrisponde a "a", "b", "c" o "d". Puoi invertire la corrispondenza iniziando con `^`: ad esempio, `[^abcd]` corrisponde a qualsiasi carattere **eccetto** "a", "b", "c" o "d". Questo concetto può essere usato per trovare parole contenenti una "x" tra vocali, o una "y" circondata da consonanti:

```{r}
str_view(words, "[aeiou]x[aeiou]")
str_view(words, "[^aeiou]y[^aeiou]")
```

Puoi usare l'**alternanza**, `|`, per scegliere tra più pattern alternativi. Ad esempio, i seguenti pattern cercano frutti che contengono "apple", "melon" o "nut", oppure una vocale ripetuta:

```{r}
str_view(fruit, "apple|melon|nut")
str_view(fruit, "aa|ee|ii|oo|uu")
```

Le espressioni regolari sono estremamente compatte e fanno largo uso di segni di punteggiatura, per cui all'inizio possono sembrare opprimenti e difficili da leggere. Non preoccuparti; con la pratica diventeranno più chiare e i pattern semplici diventeranno una seconda natura. Iniziamo questo percorso esercitandoci con alcune funzioni utili di stringr.

## Funzioni chiave {#sec-stringr-regex-funs}

Ora che hai appreso le basi delle espressioni regolari, usiamole con alcune funzioni di stringr e tidyr. Nella sezione seguente imparerai a rilevare la presenza o l'assenza di una corrispondenza, a contare il numero di corrispondenze, a sostituire una corrispondenza con del testo fisso e a estrarre del testo in base a un pattern.

### Rilevamento delle corrispondenze

`str_detect()` restituisce un vettore logico: `TRUE` se il pattern corrisponde a un elemento del vettore e `FALSE` altrimenti:

```{r}
str_detect(c("a", "b", "c"), "[aeiou]")
```

Poiché `str_detect()` restituisce un vettore logico della stessa lunghezza del vettore iniziale, si abbina bene a `filter()`. Ad esempio, il seguente codice trova tutti i nomi più popolari che contengono una "x" minuscola:

```{r}
babynames |> 
  filter(str_detect(name, "x")) |> 
  count(name, wt = n, sort = TRUE)
```

Possiamo anche usare `str_detect()` insieme a `summarize()` accoppiandolo a `sum()` o `mean()`: `sum(str_detect(x, pattern))` ti dice il numero di osservazioni che corrispondono e `mean(str_detect(x, pattern))` la proporzione che corrisponde. Ad esempio, il seguente frammento calcola e visualizza la proporzione di nomi di bambini contenenti "x", suddivisi per anno. Sembra infatti che la popolarità dei nomi contenenti "x" sia aumentata notevolmente negli ultimi tempi!

```{r}
#| fig-alt: |
#|   Una serie temporale che mostra la proporzione di nomi di bambini contenenti la lettera x. 
#|   La proporzione scende gradualmente da 8 ogni 1000 nel 1880 a 4 ogni 1000 nel 1980, per poi aumentare rapidamente fino a 16 ogni 1000 nel 2019.
babynames |> 
  group_by(year) |> 
  summarize(prop_x = mean(str_detect(name, "x"))) |> 
  ggplot(aes(x = year, y = prop_x)) + 
  geom_line()
```

Esistono due funzioni strettamente correlate a `str_detect()`:

-   `str_subset()` restituisce un vettore di caratteri contenente solo le stringhe che corrispondono.
-   `str_which()` restituisce un vettore di interi con le posizioni delle stringhe che corrispondono.

### Contare le corrispondenze

Il passo successivo rispetto a `str_detect()` è `str_count()`: anziché restituire un valore logico, ti dice quante corrispondenze esistono in ciascuna stringa.

```{r}
x <- c("apple", "banana", "pear")
str_count(x, "p")
```

Nota che ogni corrispondenza inizia al termine della precedente, ovvero le corrispondenze non si sovrappongono. Ad esempio, nella stringa "abababa", quante volte il pattern "aba" corrisponderà? Le espressioni regolari dicono due, non tre:

```{r}
str_count("abababa", "aba")
str_view("abababa", "aba")
```

È naturale usare `str_count()` insieme a `mutate()`. Il seguente esempio utilizza `str_count()` con classi di caratteri per contare il numero di vocali e di consonanti in ciascun nome:

```{r}
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

Osservando attentamente, noterai una discrepanza: il nome "Aaban" contiene tre "a", ma il riepilogo riporta solo due vocali. Questo accade perché le espressioni regolari sono case sensitive. Possiamo risolvere il problema in tre modi:

-   Aggiungere le vocali maiuscole alla classe: `str_count(name, "[aeiouAEIOU]")`.
-   Indicare all'espressione regolare di ignorare le maiuscole: `str_count(name, regex("[aeiou]", ignore_case = TRUE))`. Ne parleremo in @sec-flags.
-   Convertire i nomi in minuscolo con `str_to_lower()`: `str_count(str_to_lower(name), "[aeiou]")`.

Questa varietà di approcci è tipica quando si lavora con le stringhe: spesso ci sono più modi per raggiungere lo stesso obiettivo, sia rendendo il pattern più complesso che pre-elaborando la stringa. Se un approccio ti blocca, prova a cambiare prospettiva.

```{r}
babynames |> 
  count(name) |> 
  mutate(
    name = str_to_lower(name),
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )
```

### Sostituire valori

Oltre a rilevare e contare le corrispondenze, possiamo modificarle con `str_replace()` e `str_replace_all()`. `str_replace()` sostituisce la prima corrispondenza, mentre `str_replace_all()` sostituisce tutte le occorrenze.

```{r}
x <- c("apple", "pear", "banana")
str_replace_all(x, "[aeiou]", "-")
```

Le funzioni `str_remove()` e `str_remove_all()` sono utili scorciatoie per `str_replace(x, pattern, "")`:

```{r}
x <- c("apple", "pear", "banana")
str_remove_all(x, "[aeiou]")
```

Queste funzioni si abbinano naturalmente a `mutate()` per la pulizia dei dati e spesso le applichi ripetutamente per eliminare strati di formattazione incoerente.

### Estrarre variabili {#sec-extract-variables}

L'ultima funzione di cui parleremo utilizza le espressioni regolari per estrarre dati da una colonna in una o più nuove colonne: `separate_wider_regex()`. Essa è analoga alle funzioni `separate_wider_position()` e `separate_wider_delim()` viste in @sec-string-columns, e appartiene a tidyr perché opera sulle colonne dei data frame, non su vettori individuali.

Creiamo un semplice dataset per mostrare come funziona:

```{r}
df <- tribble(
  ~str,
  "<Sheryl>-F_34",
  "<Kisha>-F_45", 
  "<Brandon>-N_33",
  "<Sharon>-F_38", 
  "<Penny>-F_58",
  "<Justin>-M_41", 
  "<Patricia>-F_84"
)
```

Per estrarre questi dati utilizzando `separate_wider_regex()`, basta costruire una sequenza di espressioni regolari che corrispondano a ciascuna parte. Se desideri che il contenuto di quella parte appaia nell'output, assegna un nome:

```{r}
df |> 
  separate_wider_regex(
    str,
    patterns = c(
      "<", 
      name = "[A-Za-z]+", 
      ">-", 
      gender = ".",
      "_",
      age = "[0-9]+"
    )
  )
```

Se la corrispondenza fallisce, puoi usare `too_few = "debug"` per capire cosa non va, proprio come con `separate_wider_delim()` e `separate_wider_position()`.

### Esercizi

1.  Quale nome di bambino contiene il maggior numero di vocali? Quale nome ha la proporzione più alta di vocali? (Suggerimento: qual è il denominatore?)

2.  Sostituisci tutte le barre oblique in "a/b/c/d/e" con barre inverse. Cosa succede se provi a invertire la trasformazione sostituendo tutte le barre inverse con barre oblique?

3.  Implementa una versione semplice di `str_to_lower()` utilizzando `str_replace_all()`.

4.  Crea un'espressione regolare che corrisponda ai numeri di telefono così come sono comunemente scritti nel tuo paese.

## Dettagli dei pattern

Ora che comprendi le basi del linguaggio dei pattern e come utilizzarlo con alcune funzioni di stringr e tidyr, è il momento di approfondire i dettagli. Inizieremo con l’**escaping**, che permette di abbinare i metacaratteri (che altrimenti verrebbero trattati in modo speciale). Successivamente imparerai ad usare gli **ancoraggi** per abbinare l'inizio o la fine della stringa. Poi approfondiremo le **classi di caratteri** e i loro shortcut, che permettono di abbinare qualsiasi carattere appartenente a un insieme. Successivamente, vedremo in dettaglio i **quantificatori** che controllano quante volte può ripetersi un pattern. Affronteremo quindi l'importante (ma complesso) argomento della **precedenza degli operatori** e delle parentesi, e concluderemo con alcuni dettagli sul **raggruppamento** dei componenti del pattern.

I termini che usiamo qui sono quelli tecnici per ciascuna componente. Non sempre sono i più evocativi, ma è molto utile conoscerli se in futuro vorrai cercare ulteriori dettagli online.

### Escaping {#sec-regexp-escaping}

Per abbinare un punto letterale, è necessario "escapare" il metacarattere[^regexps-6]. Come nelle stringhe, le regex usano il backslash per l'escaping. Quindi per abbinare un `.`, devi scrivere `\.`. Purtroppo questo crea un problema...

[Il testo continua spiegando escaping, ancoraggi, classi, quantificatori, precedenza e raggruppamento in dettaglio.]

...

### Corrispondenze fisse

Puoi disattivare le regole delle espressioni regolari usando `fixed()`:

```{r}
str_view(c("", "a", "."), fixed("."))
```

`fixed()` ti permette anche di ignorare le differenze tra maiuscole e minuscole:

```{r}
str_view("x X", "X")
str_view("x X", fixed("X", ignore_case = TRUE))
```

Se lavori con testo in lingue diverse dall'inglese, probabilmente vorrai usare `coll()` al posto di `fixed()`, poiché applica le regole complete per la capitalizzazione in base al locale specificato. Consulta @sec-other-languages per ulteriori dettagli.

```{r}
str_view("i İ ı I", fixed("İ", ignore_case = TRUE))
str_view("i İ ı I", coll("İ", ignore_case = TRUE, locale = "tr"))
```

## Pratica

Per mettere in pratica queste idee, risolveremo alcuni problemi semi-autentici. Discuteremo tre tecniche generali:

1.  Verificare il lavoro creando controlli positivi e negativi.
2.  Combinare espressioni regolari con operazioni booleane.
3.  Creare pattern complessi usando la manipolazione delle stringhe.

### Verifica del lavoro

Innanzitutto, cerchiamo tutte le frasi che iniziano con "The". Usare l'ancora `^` da sola non basta:

```{r}
str_view(sentences, "^The")
```

Questo pattern corrisponde anche a frasi che iniziano con parole come "They" o "These". Dobbiamo assicurarci che la "e" sia l'ultima lettera della parola, aggiungendo un confine di parola:

```{r}
str_view(sentences, "^The\\b")
```

E per trovare tutte le frasi che iniziano con un pronome:

```{r}
str_view(sentences, "^(She|He|It|They)\\b")
```

Un rapido controllo con esempi positivi e negativi:

```{r}
pos <- c("He is a boy", "She had a good time")
neg <- c("Shells come from the sea", "Hadley said 'It's a great day'")

pattern <- "^(She|He|It|They)\\b"
str_detect(pos, pattern)
str_detect(neg, pattern)
```

### Operazioni booleane {#sec-boolean-operations}

Immagina di voler trovare le parole che contengono solo consonanti. Un approccio è creare una classe di caratteri che contenga tutte le lettere tranne le vocali (`[^aeiou]`), farla ripetere (`[^aeiou]+`) e forzare la corrispondenza con l'intera stringa ancorando l'inizio e la fine (`^[^aeiou]+$`):

```{r}
str_view(words, "^[^aeiou]+$")
```

Un approccio alternativo è cercare le parole che non contengono alcuna vocale:

```{r}
str_view(words[!str_detect(words, "[aeiou]")])
```

Questo metodo è utile per combinare condizioni logiche, specialmente quelle che implicano "e" o "non". Ad esempio, se vuoi trovare tutte le parole che contengono sia "a" sia "b", puoi cercare parole con "a" seguita da qualsiasi cosa e poi "b", oppure viceversa:

```{r}
str_view(words, "a.*b|b.*a")
```

È più semplice, tuttavia, usare due chiamate a `str_detect()`:

```{r}
words[str_detect(words, "a") & str_detect(words, "b")]
```

Per verificare se esiste una parola che contiene almeno una occorrenza di ogni vocale, invece di costruire 120 pattern differenti, puoi combinare cinque chiamate a `str_detect()`:

```{r}
words[
  str_detect(words, "a") &
  str_detect(words, "e") &
  str_detect(words, "i") &
  str_detect(words, "o") &
  str_detect(words, "u")
]
```

### Creare un pattern dinamicamente

Supponiamo di voler trovare tutte le `sentences` che menzionano un colore. L'idea di base è combinare l'alternanza con i confini di parola:

```{r}
str_view(sentences, "\\b(red|green|blue)\\b")
```

Ma se il numero di colori cresce, potrebbe diventare tedioso costruire il pattern manualmente. Possiamo memorizzare i colori in un vettore:

```{r}
rgb <- c("red", "green", "blue")
```

E creare il pattern con `str_c()` e `str_flatten()`:

```{r}
str_c("\\b(", str_flatten(rgb, "|"), ")\\b")
```

Potremmo rendere il pattern ancora più completo se avessimo una buona lista di colori. Ad esempio, la lista dei colori integrati che R può usare per i grafici:

```{r}
str_view(colors())
```

Eliminiamo prima le varianti numeriche:

```{r}
cols <- colors()
cols <- cols[!str_detect(cols, "\\d")]
str_view(cols)
```

Quindi creiamo un pattern gigante (non lo mostriamo qui perché sarebbe troppo lungo), ma puoi provarlo:

```{r}
pattern <- str_c("\\b(", str_flatten(cols, "|"), ")\\b")
str_view(sentences, pattern)
```

In questo esempio, `cols` contiene solo lettere e numeri, quindi non devi preoccuparti dei metacaratteri. In generale, quando crei pattern da stringhe esistenti, è consigliabile passarli a `str_escape()` per assicurarsi che corrispondano letteralmente.

### Esercizi

1.  Per ciascuna delle seguenti sfide, prova a risolverla sia con una singola espressione regolare che con la combinazione di più chiamate a `str_detect()`:
    - a. Trova tutte le `words` che iniziano o finiscono con "x".
    - b. Trova tutte le `words` che iniziano con una vocale e finiscono con una consonante.
    - c. Esiste una `word` che contiene almeno una occorrenza di ogni vocale diversa?

2.  Costruisci dei pattern per trovare evidenze a favore e contro la regola "i before e except after c".

3.  `colors()` contiene vari modificatori come "lightgray" e "darkblue". Come potresti identificarli automaticamente? (Pensa a come potresti rilevare e poi rimuovere i colori modificati.)

4.  Crea un'espressione regolare che trovi qualsiasi dataset base di R. Puoi ottenere una lista di questi dataset con `data(package = "datasets")$results[, "Item"]`. Nota che alcuni vecchi dataset sono vettori singoli che includono il nome del relativo data frame fra parentesi, quindi dovrai rimuovere quelle parti.

## Le espressioni regolari in altri contesti

Proprio come nelle funzioni di stringr e tidyr, esistono molti altri ambiti in cui puoi usare le espressioni regolari in R. Le seguenti sezioni descrivono alcune altre funzioni utili nel tidyverse e in base R.

### tidyverse

Ci sono tre altri contesti particolarmente utili in cui potresti voler usare le espressioni regolari:

-   `matches(pattern)` seleziona tutte le variabili il cui nome corrisponde al pattern fornito. È una funzione di tidyselect che può essere usata in qualsiasi funzione del tidyverse che seleziona variabili (es. `select()`, `rename_with()`, e `across()`).

-   L'argomento `names_pattern` di `pivot_longer()` accetta un vettore di espressioni regolari, proprio come `separate_wider_regex()`. È utile per estrarre dati dai nomi delle variabili con una struttura complessa.

-   L'argomento `delim` in `separate_longer_delim()` e `separate_wider_delim()` solitamente corrisponde a una stringa fissa, ma puoi usare `regex()` per farlo corrispondere a un pattern. Questo è utile, ad esempio, per abbinare una virgola eventualmente seguita da uno spazio, cioè `regex(", ?")`.

### Base R

`apropos(pattern)` cerca tra tutti gli oggetti disponibili nell'ambiente globale quelli che corrispondono al pattern. È utile se non ricordi esattamente il nome di una funzione:

```{r}
apropos("replace")
```

`list.files(path, pattern)` elenca tutti i file in `path` che corrispondono al pattern (espresso come espressione regolare). Ad esempio, per trovare tutti i file R Markdown nella directory corrente:

```{r}
head(list.files(pattern = "\\.Rmd$"))
```

Da notare che il linguaggio dei pattern usato dal base R è leggermente diverso da quello di stringr, poiché stringr è costruito sul pacchetto [stringi](https://stringi.gagolewski.com), il quale si basa sul motore [ICU](https://unicode-org.github.io/icu/userguide/strings/regexp.html), mentre le funzioni base R usano o il motore [TRE](https://github.com/laurikari/tre) o il motore [PCRE](https://www.pcre.org), a seconda che si imposti o meno `perl = TRUE`. Fortunatamente, le basi delle espressioni regolari sono così consolidate che incontrerai poche variazioni quando utilizzerai i pattern visti in questo libro. Preoccupati della differenza solo se inizi a usare funzionalità avanzate come intervalli Unicode complessi o feature speciali con la sintassi `(?…)`.

## Sommario

Con ogni segno di punteggiatura potenzialmente sovraccarico di significato, le espressioni regolari sono uno dei linguaggi più compatti esistenti. All'inizio risultano decisamente confuse, ma con l'allenamento i tuoi occhi le leggeranno e il tuo cervello le comprenderà, sbloccando così una capacità potente che potrai usare in R e in molti altri contesti.

In questo capitolo hai iniziato il tuo percorso per diventare un maestro delle espressioni regolari, imparando le funzioni stringr più utili e le componenti essenziali del linguaggio regex. Per approfondire ulteriormente, ti suggeriamo di iniziare con `vignette("regular-expressions", package = "stringr")`, che documenta l'intera sintassi supportata da stringr, oppure consultare [https://www.regular-expressions.info/tutorial.html](https://www.regular-expressions.info/tutorial.html). Ricorda, inoltre, che stringr è implementato sul pacchetto stringi di Marek Gagolewski; se fatichi a trovare una funzione in stringr, dai un'occhiata a stringi, che segue molte delle stesse convenzioni.

Nel prossimo capitolo parleremo di una struttura dati strettamente correlata alle stringhe: i fattori. I fattori sono usati per rappresentare dati categorici in R, cioè dati con un insieme fisso e noto di possibili valori identificati da un vettore di stringhe.

