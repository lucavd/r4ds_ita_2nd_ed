# Formati Quarto {#sec-quarto-formats}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

Finora, avete visto Quarto usato per produrre documenti HTML.
Questo capitolo dà una breve panoramica di alcuni dei molti altri tipi di output che potete produrre con Quarto.

Ci sono due modi per impostare l'output di un documento:

1.  Permanentemente, modificando l'header YAML:

    ``` yaml
    title: "Diamond sizes"
    format: html
    ```

2.  Temporaneamente, chiamando `quarto::quarto_render()` manualmente:

    ```{r}
    #| eval: false
    quarto::quarto_render("diamond-sizes.qmd", output_format = "docx")
    ```

    Questo è utile se volete produrre programmaticamente tipi multipli di output poiché l'argomento `output_format` può anche prendere una lista di valori.

    ```{r}
    #| eval: false
    quarto::quarto_render("diamond-sizes.qmd", output_format = c("docx", "pdf"))
    ```

## Opzioni di output

Quarto offre una vasta gamma di formati di output.
Potete trovare la lista completa su <https://quarto.org/docs/output-formats/all-formats.html>.
Molti formati condividono alcune opzioni di output (ad es., `toc: true` per includere un indice), ma altri hanno opzioni che sono specifiche del formato (ad es., `code-fold: true` collassa i chunk di codice in un tag `<details>` per l'output HTML così l'utente può visualizzarlo su richiesta, non è applicabile in un documento PDF o Word).

Per sovrascrivere le opzioni predefinite, dovete usare un campo `format` espanso.
Per esempio, se voleste renderizzare un `html` con un indice flottante, usereste:

``` yaml
format:
  html:
    toc: true
    toc_float: true
```

Potete anche renderizzare a output multipli fornendo una lista di formati:

``` yaml
format:
  html:
    toc: true
    toc_float: true
  pdf: default
  docx: default
```

Notate la sintassi speciale (`pdf: default`) se non volete sovrascrivere alcuna opzione predefinita.

Per renderizzare a tutti i formati specificati nello YAML di un documento, potete usare `output_format = "all"`.

```{r}
#| eval: false
quarto::quarto_render("diamond-sizes.qmd", output_format = "all")
```

## Documenti

Il capitolo precedente si è concentrato sull'output `html` predefinito.
Ci sono diverse variazioni di base su quel tema, generando diversi tipi di documenti.
Per esempio:

-   `pdf` crea un PDF con LaTeX (un sistema di layout di documenti open-source), che dovrete installare.
    RStudio vi avviserà se non lo avete già.

-   `docx` per documenti Microsoft Word (`.docx`).

-   `odt` per documenti OpenDocument Text (`.odt`).

-   `rtf` per documenti Rich Text Format (`.rtf`).

-   `gfm` per un documento GitHub Flavored Markdown (`.md`).

-   `ipynb` per Jupyter Notebook (`.ipynb`).

Ricordate, quando generate un documento da condividere con i decisori, potete disattivare la visualizzazione predefinita del codice impostando opzioni globali nello YAML del documento:

``` yaml
execute:
  echo: false
```

Per i documenti `html` un'altra opzione è rendere i chunk di codice nascosti per default, ma visibili con un click:

``` yaml
format:
  html:
    code: true
```

## Presentations

Potete anche usare Quarto per produrre presentazioni.
Avete meno controllo visuale rispetto a uno strumento come Keynote o PowerPoint, ma inserire automaticamente i risultati del vostro codice R in una presentazione può far risparmiare un'enorme quantità di tempo.
Le presentazioni funzionano dividendo il vostro contenuto in slide, con una nuova slide che inizia a ogni header di secondo (`##`) livello.
Inoltre, gli header di primo (`#`) livello indicano l'inizio di una nuova sezione con una slide di titolo della sezione che è, per default, centrata nel mezzo.

Quarto supporta una varietà di formati di presentazione, inclusi:

1.  `revealjs` - presentazione HTML con revealjs

2.  `pptx` - presentazione PowerPoint

3.  `beamer` - presentazione PDF con LaTeX Beamer.

Potete leggere di più sulla creazione di presentazioni con Quarto su [https://quarto.org/docs/presentations](https://quarto.org/docs/presentations/).

## Interattività

Proprio come qualsiasi documento HTML, i documenti HTML creati con Quarto possono contenere anche componenti interattivi.
Qui introduciamo due opzioni per includere interattività nei vostri documenti Quarto: htmlwidgets e Shiny.

### htmlwidgets

HTML è un formato interattivo, e potete sfruttare quell'interattività con **htmlwidgets**, funzioni R che producono visualizzazioni HTML interattive.
Per esempio, prendete la mappa **leaflet** qui sotto.
Se state visualizzando questa pagina sul web, potete trascinare la mappa in giro, zoomare in avanti e indietro, ecc.
Obviamente non potete farlo in un libro, quindi Quarto inserisce automaticamente uno screenshot statico per voi.

```{r}
#| fig-alt: Mappa Leaflet di Maungawhau / Mount Eden.
library(leaflet)
leaflet() |>
  setView(174.764, -36.877, zoom = 16) |> 
  addTiles() |>
  addMarkers(174.764, -36.877, popup = "Maungawhau") 
```

La cosa fantastica degli htmlwidgets è che non dovete sapere nulla di HTML o JavaScript per usarli.
Tutti i dettagli sono racchiusi dentro il pacchetto, quindi non dovete preoccuparvene.

Ci sono molti pacchetti che forniscono htmlwidgets, inclusi:

-   [**dygraphs**](https://rstudio.github.io/dygraphs) per visualizzazioni interattive di serie temporali.

-   [**DT**](https://rstudio.github.io/DT/) per tabelle interattive.

-   [**threejs**](https://bwlewis.github.io/rthreejs) per grafici 3d interattivi.

-   [**DiagrammeR**](https://rich-iannone.github.io/DiagrammeR) per diagrammi (come diagrammi di flusso e semplici diagrammi nodo-collegamento).

Per imparare di più sugli htmlwidgets e vedere una lista completa di pacchetti che li forniscono visitate <https://www.htmlwidgets.org>.

### Shiny

Gli htmlwidgets forniscono interattività **client-side** --- tutta l'interattività avviene nel browser, indipendentemente da R.
Da un lato, questo è fantastico perché potete distribuire il file HTML senza alcuna connessione a R.
Tuttavia, questo limita fondamentalmente quello che potete fare a cose che sono state implementate in HTML e JavaScript.
Un approccio alternativo è usare **shiny**, un pacchetto che vi permette di creare interattività usando codice R, non JavaScript.

Per chiamare codice Shiny da un documento Quarto, aggiungete `server: shiny` all'header YAML:

``` yaml
title: "Shiny Web App"
format: html
server: shiny
```

Poi potete usare le funzioni "input" per aggiungere componenti interattivi al documento:

```{r}
#| eval: false
library(shiny)

textInput("name", "What is your name?")
numericInput("age", "How old are you?", NA, min = 0, max = 150)
```

```{r}
#| echo: false
#| out-width: null
#| fig-alt: |
#|   Due caselle di input una sopra l'altra. Quella in alto dice, "What is your 
#|   name?", quella in basso, "How old are you?".
knitr::include_graphics("quarto/quarto-shiny.png")
```

E avete anche bisogno di un chunk di codice con l'opzione chunk `context: server` che contiene il codice che deve essere eseguito in un server Shiny.

Potete poi riferirvi ai valori con `input$name` e `input$age`, e il codice che li usa sarà automaticamente ri-eseguito ogni volta che cambiano.

Non possiamo mostrarvi un'app shiny dal vivo qui perché le interazioni shiny avvengono sul **server-side**.
Questo significa che potete scrivere app interattive senza conoscere JavaScript, ma avete bisogno di un server su cui eseguirle.
Questo introduce un problema logistico: le app Shiny hanno bisogno di un server Shiny per essere eseguite online.
Quando eseguite app Shiny sul vostro computer, Shiny imposta automaticamente un server Shiny per voi, ma avete bisogno di un server Shiny pubblico se volete pubblicare questo tipo di interattività online.
Questo è il compromesso fondamentale di shiny: potete fare qualsiasi cosa in un documento shiny che potete fare in R, ma richiede che qualcuno stia eseguendo R.

Per imparare di più su Shiny, raccomandiamo di leggere Mastering Shiny di Hadley Wickham, [https://mastering-shiny.org](https://mastering-shiny.org/).

## Siti web e libri

Con un po' di infrastruttura aggiuntiva, potete usare Quarto per generare un sito web completo o un libro:

-   Mettete i vostri file `.qmd` in una singola directory.
    `index.qmd` diventerà la home page.

-   Aggiungete un file YAML chiamato `_quarto.yml` che fornisce la navigazione per il sito.
    In questo file, impostate il tipo `project` a `book` o `website`, ad es.:

    ``` yaml
    project:
      type: book
    ```

Per esempio, il seguente file `_quarto.yml` crea un sito web da tre file sorgente: `index.qmd` (la home page), `viridis-colors.qmd`, e `terrain-colors.qmd`.

```{r}
#| echo: false
#| comment: ""
cat(readr::read_file("quarto/example-site.yml"))
```

Il file `_quarto.yml` di cui avete bisogno per un libro è strutturato in modo molto simile.
L'esempio seguente mostra come potete creare un libro con quattro capitoli che renderizza a tre output diversi (`html`, `pdf`, e `epub`).
Ancora una volta, i file sorgente sono file `.qmd`.

```{r}
#| echo: false
#| comment: ""
cat(readr::read_file("quarto/example-book.yml"))
```

Raccomandiamo che usiate un progetto RStudio per i vostri siti web e libri.
Basato sul file `_quarto.yml`, RStudio riconoscerà il tipo di progetto su cui state lavorando, e aggiungerà una scheda Build all'IDE che potete usare per renderizzare e visualizzare in anteprima i vostri siti web e libri.
Sia i siti web che i libri possono anche essere renderizzati usando `quarto::quarto_render()`.

Leggete di più su <https://quarto.org/docs/websites> sui siti web Quarto e <https://quarto.org/docs/books> sui libri.

## Altri formati

Quarto offre ancora più formati di output:

-   Potete scrivere articoli di giornale usando i Template di Giornale Quarto: <https://quarto.org/docs/journals/templates.html>.

-   Potete dare in output documenti Quarto a Jupyter Notebook con `format: ipynb`: <https://quarto.org/docs/reference/formats/ipynb.html>.

Vedete <https://quarto.org/docs/output-formats/all-formats.html> per una lista di ancora più formati.

## Riassunto

In questo capitolo vi abbiamo presentato una varietà di opzioni per comunicare i vostri risultati con Quarto, da documenti statici e interattivi a presentazioni a siti web e libri.

Per imparare di più sulla comunicazione efficace in questi diversi formati, raccomandiamo le seguenti risorse:

-   Per migliorare le vostre abilità di presentazione, provate [*Presentation Patterns*](https://presentationpatterns.com/) di Neal Ford, Matthew McCollough, e Nathaniel Schutta.
    Fornisce un set di pattern efficaci (sia di basso che di alto livello) che potete applicare per migliorare le vostre presentazioni.

-   Se fate presentazioni accademiche, potreste apprezzare la [*Leek group guide to giving talks*](https://github.com/jtleek/talkguide).

-   Non l'abbiamo seguito noi stessi, ma abbiamo sentito cose buone del corso online di Matt McGarrity sul parlare in pubblico: <https://www.coursera.org/learn/public-speaking>.

-   Se state creando molte dashboard, assicuratevi di leggere [*Information Dashboard Design: The Effective Visual Communication of Data*](https://www.amazon.com/Information-Dashboard-Design-Effective-Communication/dp/0596100167) di Stephen Few.
    Vi aiuterà a creare dashboard che sono veramente utili, non solo belle da guardare.

-   Comunicare efficacemente le vostre idee spesso beneficia di qualche conoscenza di design grafico.
    [*The Non-Designer's Design Book*](https://www.amazon.com/Non-Designers-Design-Book-4th/dp/0133966151) di Robin Williams è un ottimo posto per iniziare.