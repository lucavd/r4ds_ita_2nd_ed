# Analisi esplorativa dei dati {#sec-exploratory-data-analysis}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

Questo capitolo ti mostrerà come usare visualizzazione e trasformazione per esplorare i tuoi dati in modo sistematico, un compito che gli statistici chiamano analisi esplorativa dei dati, o EDA in breve.
EDA è un ciclo iterativo.
Tu:

1.  Generi domande sui tuoi dati.

2.  Cerchi risposte visualizzando, trasformando e modellando i tuoi dati.

3.  Usi quello che impari per raffinare le tue domande e/o generare nuove domande.

EDA non è un processo formale con un insieme rigoroso di regole.
Più di ogni altra cosa, EDA è uno stato mentale.
Durante le fasi iniziali di EDA dovresti sentirti libero di investigare ogni idea che ti viene in mente.
Alcune di queste idee si riveleranno utili, e alcune saranno vicoli ciechi.
Mentre la tua esplorazione continua, ti concentrerai su alcuni insight particolarmente produttivi che alla fine scriverai e comunicherai ad altri.

EDA è una parte importante di qualsiasi analisi dei dati, anche se le domande di ricerca primarie ti vengono consegnate su un piatto d'argento, perché devi sempre investigare la qualità dei tuoi dati.
La pulizia dei dati è solo un'applicazione di EDA: fai domande su se i tuoi dati soddisfano le tue aspettative o no.
Per fare pulizia dei dati, dovrai utilizzare tutti gli strumenti di EDA: visualizzazione, trasformazione e modellazione.

### Prerequisiti

In questo capitolo combineremo quello che hai imparato su dplyr e ggplot2 per fare domande interattivamente, rispondere con i dati, e poi fare nuove domande.

```{r}
#| label: setup
#| message: false
library(tidyverse)
```

## Domande

> "Non ci sono domande statistiche di routine, solo routine statistiche discutibili." --- Sir David Cox

> "Molto meglio una risposta approssimativa alla domanda giusta, che è spesso vaga, che una risposta esatta alla domanda sbagliata, che può sempre essere resa precisa." --- John Tukey

Il tuo obiettivo durante EDA è sviluppare una comprensione dei tuoi dati.
Il modo più semplice per farlo è usare le domande come strumenti per guidare la tua investigazione.
Quando fai una domanda, la domanda focalizza la tua attenzione su una parte specifica del tuo dataset e ti aiuta a decidere quali grafici, modelli, o trasformazioni fare.

EDA è fondamentalmente un processo creativo.
E come la maggior parte dei processi creativi, la chiave per fare domande di *qualità* è generare una grande *quantità* di domande.
È difficile fare domande rivelatrici all'inizio della tua analisi perché non sai quali insight possono essere ricavati dal tuo dataset.
D'altra parte, ogni nuova domanda che fai ti esporrà a un nuovo aspetto dei tuoi dati e aumenterà le tue possibilità di fare una scoperta.
Puoi rapidamente concentrarti sulle parti più interessanti dei tuoi dati---e sviluppare un insieme di domande stimolanti---se segui ogni domanda con una nuova domanda basata su quello che trovi.

Non c'è una regola su quali domande dovresti fare per guidare la tua ricerca.
Tuttavia, due tipi di domande saranno sempre utili per fare scoperte nei tuoi dati.
Puoi formulare vagamente queste domande come:

1.  Che tipo di variazione si verifica all'interno delle mie variabili?

2.  Che tipo di covariazione si verifica tra le mie variabili?

Il resto di questo capitolo esaminerà queste due domande.
Spiegheremo cosa sono variazione e covariazione, e ti mostreremo diversi modi per rispondere a ogni domanda.

## Variazione

**Variazione** è la tendenza dei valori di una variabile a cambiare da misurazione a misurazione.
Puoi vedere facilmente la variazione nella vita reale; se misuri qualsiasi variabile continua due volte, otterrai due risultati diversi.
Questo è vero anche se misuri quantità che sono costanti, come la velocità della luce.
Ognuna delle tue misurazioni includerà una piccola quantità di errore che varia da misurazione a misurazione.
Le variabili possono anche variare se misuri attraverso soggetti diversi (es., i colori degli occhi di persone diverse) o in tempi diversi (es., i livelli di energia di un elettrone in momenti diversi).
Ogni variabile ha il suo modello di variazione, che può rivelare informazioni interessanti su come varia tra misurazioni sulla stessa osservazione così come tra osservazioni.
Il modo migliore per capire quel modello è visualizzare la distribuzione dei valori della variabile, di cui hai imparato in @sec-data-visualization.

Inizieremo la nostra esplorazione visualizzando la distribuzione dei pesi (`carat`) di \~54.000 diamanti dal dataset `diamonds`.
Poiché `carat` è una variabile numerica, possiamo usare un istogramma:

```{r}
#| fig-alt: |
#|   Un istogramma dei carati dei diamanti, con l'asse x che varia da 0 a 4.5 
#|   e l'asse y che varia da 0 a 30000. La distribuzione è asimmetrica a destra 
#|   con pochissimi diamanti nel bin centrato a 0, quasi 30000 diamanti nel 
#|   bin centrato a 0.5, circa 15000 diamanti nel bin centrato 
#|   a 1, e molti meno, circa 5000 diamanti nel bin centrato a 
#|   1.5. Oltre a questo, c'è una coda finale.
ggplot(diamonds, aes(x = carat)) +
  geom_histogram(binwidth = 0.5)
```

Ora che puoi visualizzare la variazione, cosa dovresti cercare nei tuoi grafici?
E che tipo di domande di follow-up dovresti fare?
Abbiamo messo insieme una lista qui sotto dei tipi più utili di informazioni che troverai nei tuoi grafici, insieme ad alcune domande di follow-up per ogni tipo di informazione.
La chiave per fare buone domande di follow-up sarà fare affidamento sulla tua curiosità (Cosa vuoi imparare di più?) così come sul tuo scetticismo (Come potrebbe questo essere fuorviante?).

### Valori tipici

Sia nei grafici a barre che negli istogrammi, le barre alte mostrano i valori comuni di una variabile, e le barre più corte mostrano valori meno comuni.
I posti che non hanno barre rivelano valori che non sono stati osservati nei tuoi dati.
Per trasformare questa informazione in domande utili, cerca qualsiasi cosa di inaspettato:

-   Quali valori sono i più comuni?
    Perché?

-   Quali valori sono rari?
    Perché?
    Questo corrisponde alle tue aspettative?

-   Puoi vedere pattern insoliti?
    Cosa potrebbe spiegarli?

Diamo un'occhiata alla distribuzione di `carat` per diamanti più piccoli.

```{r}
#| fig-alt: |
#|   Un istogramma dei carati dei diamanti, con l'asse x che varia da 0 a 3 e 
#|   l'asse y che varia da 0 a circa 2500. La larghezza del bin è piuttosto stretta 
#|   (0.01), risultando in un numero molto grande di barre sottili. La distribuzione 
#|   è asimmetrica a destra, con molti picchi seguiti da barre di altezze decrescenti, 
#|   fino a un forte aumento al picco successivo.
smaller <- diamonds |> 
  filter(carat < 3)

ggplot(smaller, aes(x = carat)) +
  geom_histogram(binwidth = 0.01)
```

Questo istogramma suggerisce diverse domande interessanti:

-   Perché ci sono più diamanti a carati interi e frazioni comuni di carati?

-   Perché ci sono più diamanti leggermente a destra di ogni picco che leggermente a sinistra di ogni picco?

Le visualizzazioni possono anche rivelare cluster, che suggeriscono che esistono sottogruppi nei tuoi dati.
Per capire i sottogruppi, chiediti:

-   Come sono simili tra loro le osservazioni all'interno di ogni sottogruppo?

-   Come sono diverse tra loro le osservazioni in cluster separati?

-   Come puoi spiegare o descrivere i cluster?

-   Perché l'apparenza dei cluster potrebbe essere fuorviante?

Alcune di queste domande possono essere risposte con i dati mentre alcune richiederanno competenze specifiche del dominio sui dati.
Molte di esse ti spingeranno a esplorare una relazione *tra* variabili, per esempio, per vedere se i valori di una variabile possono spiegare il comportamento di un'altra variabile.
Arriveremo a questo a breve.

### Valori insoliti

Gli outlier sono osservazioni che sono insolite; punti dati che non sembrano adattarsi al pattern.
A volte gli outlier sono errori di inserimento dati, a volte sono semplicemente valori agli estremi che sono capitati di essere osservati in questa raccolta dati, e altre volte suggeriscono importanti nuove scoperte.
Quando hai molti dati, gli outlier sono a volte difficili da vedere in un istogramma.
Per esempio, prendi la distribuzione della variabile `y` dal dataset diamonds.
L'unica evidenza di outlier sono i limiti insolitamente ampi sull'asse x.

```{r}
#| fig-alt: |
#|   Un istogramma delle lunghezze dei diamanti. L'asse x varia da 0 a 60 e 
#|   l'asse y varia da 0 a 12000. C'è un picco intorno a 5, e i 
#|   dati sembrano essere completamente raggruppati intorno al picco.
ggplot(diamonds, aes(x = y)) + 
  geom_histogram(binwidth = 0.5)
```

Ci sono così tante osservazioni nei bin comuni che i bin rari sono molto corti, rendendo molto difficile vederli (anche se forse se guardi intensamente lo 0 noterai qualcosa).
Per rendere facile vedere i valori insoliti, dobbiamo fare zoom sui valori piccoli dell'asse y con `coord_cartesian()`:

```{r}
#| fig-alt: |
#|   Un istogramma delle lunghezze dei diamanti. L'asse x varia da 0 a 60 e l'
#|   asse y varia da 0 a 50. C'è un picco intorno a 5, e i dati 
#|   sembrano essere completamente raggruppati intorno al picco. A parte quei dati, 
#|   c'è un bin a 0 con un'altezza di circa 8, uno poco sopra 30 con 
#|   un'altezza di 1 e un altro poco sotto 60 con un'altezza di 1.
ggplot(diamonds, aes(x = y)) + 
  geom_histogram(binwidth = 0.5) +
  coord_cartesian(ylim = c(0, 50))
```

`coord_cartesian()` ha anche un argomento `xlim()` per quando hai bisogno di fare zoom sull'asse x.
ggplot2 ha anche le funzioni `xlim()` e `ylim()` che funzionano leggermente diversamente: scartano i dati al di fuori dei limiti.

Questo ci permette di vedere che ci sono tre valori insoliti: 0, \~30, e \~60.
Li estraiamo con dplyr:

```{r}
#| include: false
old <- options(tibble.print_max = 10, tibble.print_min = 10)
```

```{r}
unusual <- diamonds |> 
  filter(y < 3 | y > 20) |> 
  select(price, x, y, z) |>
  arrange(y)
unusual
```

```{r}
#| include: false
options(old)
```

La variabile `y` misura una delle tre dimensioni di questi diamanti, in mm.
Sappiamo che i diamanti non possono avere una larghezza di 0mm, quindi questi valori devono essere incorretti.
Facendo EDA, abbiamo scoperto dati mancanti che erano codificati come 0, che non avremmo mai trovato semplicemente cercando `NA`.
Andando avanti potremmo scegliere di ricodificare questi valori come `NA` per prevenire calcoli fuorvianti.
Potremmo anche sospettare che misurazioni di 32mm e 59mm siano implausibili: quei diamanti sono lunghi più di un pollice, ma non costano centinaia di migliaia di dollari!

È una buona pratica ripetere la tua analisi con e senza gli outlier.
Se hanno un effetto minimo sui risultati, e non riesci a capire perché sono lì, è ragionevole ometterli e andare avanti.
Tuttavia, se hanno un effetto sostanziale sui tuoi risultati, non dovresti eliminarli senza giustificazione.
Dovrai capire cosa li ha causati (es., un errore di inserimento dati) e rivelare che li hai rimossi nel tuo scritto.

### Esercizi

1.  Esplora la distribuzione di ognuna delle variabili `x`, `y`, e `z` in `diamonds`.
    Cosa impari?
    Pensa a un diamante e a come potresti decidere quale dimensione è la lunghezza, larghezza e profondità.

2.  Esplora la distribuzione di `price`.
    Scopri qualcosa di insolito o sorprendente?
    (Suggerimento: Pensa attentamente al `binwidth` e assicurati di provare un'ampia gamma di valori.)

3.  Quanti diamanti sono 0.99 carati?
    Quanti sono 1 carato?
    Cosa pensi sia la causa della differenza?

4.  Confronta `coord_cartesian()` vs. `xlim()` o `ylim()` quando fai zoom su un istogramma.
    Cosa succede se lasci `binwidth` non impostato?
    Cosa succede se provi a fare zoom così che si veda solo metà di una barra?

## Valori insoliti {#sec-unusual-values-eda}

Se hai incontrato valori insoliti nel tuo dataset, e vuoi semplicemente andare avanti con il resto della tua analisi, hai due opzioni.

1.  Elimina l'intera riga con i valori strani:

    ```{r}
    #| eval: false
    diamonds2 <- diamonds |> 
      filter(between(y, 3, 20))
    ```

    Non raccomandiamo questa opzione perché un valore non valido non implica che tutti gli altri valori per quell'osservazione siano anche non validi.
    Inoltre, se hai dati di bassa qualità, quando avrai applicato questo approccio a ogni variabile potresti scoprire di non avere più dati!

2.  Invece, raccomandiamo di sostituire i valori insoliti con valori mancanti.
    Il modo più semplice per farlo è usare `mutate()` per sostituire la variabile con una copia modificata.
    Puoi usare la funzione `if_else()` per sostituire valori insoliti con `NA`:

    ```{r}
    diamonds2 <- diamonds |> 
      mutate(y = if_else(y < 3 | y > 20, NA, y))
    ```

Non è ovvio dove dovresti tracciare i valori mancanti, quindi ggplot2 non li include nel grafico, ma avverte che sono stati rimossi:

```{r}
#| dev: "png"
#| fig-alt: |
#|   Un grafico a dispersione delle larghezze vs. lunghezze dei diamanti. C'è una forte 
#|   associazione lineare tra le due variabili. Tutti tranne uno dei diamanti 
#|   hanno lunghezza maggiore di 3. L'outlier ha una lunghezza di 0 e una larghezza 
#|   di circa 6.5. 
ggplot(diamonds2, aes(x = x, y = y)) + 
  geom_point()
```

Per sopprimere quell'avviso, imposta `na.rm = TRUE`:

```{r}
#| eval: false
ggplot(diamonds2, aes(x = x, y = y)) + 
  geom_point(na.rm = TRUE)
```

Altre volte vuoi capire cosa rende le osservazioni con valori mancanti diverse dalle osservazioni con valori registrati.
Per esempio, in `nycflights13::flights`[^eda-1], i valori mancanti nella variabile `dep_time` indicano che il volo è stato cancellato.
Così potresti voler confrontare gli orari di partenza programmati per i voli cancellati e non cancellati.
Puoi farlo creando una nuova variabile, usando `is.na()` per controllare se `dep_time` è mancante.

[^eda-1]: Ricorda che quando dobbiamo essere espliciti su da dove viene una funzione (o dataset), useremo la forma speciale `package::function()` o `package::dataset`.

```{r}
#| fig-alt: |
#|   Un poligono di frequenza degli orari di partenza programmati dei voli. Due linee 
#|   rappresentano voli che sono cancellati e non cancellati. L'asse x varia 
#|   da 0 a 25 minuti e l'asse y varia da 0 a 10000. Il numero di 
#|   voli non cancellati è molto più alto di quelli cancellati.
nycflights13::flights |> 
  mutate(
    cancelled = is.na(dep_time),
    sched_hour = sched_dep_time %/% 100,
    sched_min = sched_dep_time %% 100,
    sched_dep_time = sched_hour + (sched_min / 60)
  ) |> 
  ggplot(aes(x = sched_dep_time)) + 
  geom_freqpoly(aes(color = cancelled), binwidth = 1/4)
```

Tuttavia questo grafico non è eccellente perché ci sono molti più voli non cancellati che voli cancellati.
Nella prossima sezione esploreremo alcune tecniche per migliorare questo confronto.

### Esercizi

1.  Cosa succede ai valori mancanti in un istogramma?
    Cosa succede ai valori mancanti in un grafico a barre?
    Perché c'è una differenza nel modo in cui i valori mancanti sono gestiti negli istogrammi e nei grafici a barre?

2.  Cosa fa `na.rm = TRUE` in `mean()` e `sum()`?

3.  Ricrea il grafico di frequenza di `scheduled_dep_time` colorato per indicare se il volo è stato cancellato o no.
    Crea anche facet per la variabile `cancelled`.
    Sperimenta con diversi valori della variabile `scales` nella funzione di faceting per mitigare l'effetto di avere più voli non cancellati che voli cancellati.

## Covariazione

Se la variazione descrive il comportamento *all'interno* di una variabile, la covariazione descrive il comportamento *tra* variabili.
**Covariazione** è la tendenza dei valori di due o più variabili a variare insieme in modo correlato.
Il modo migliore per individuare la covariazione è visualizzare la relazione tra due o più variabili.

### Una variabile categorica e una numerica {#sec-cat-num}

Per esempio, esploriamo come il prezzo di un diamante varia con la sua qualità (misurata da `cut`) usando `geom_freqpoly()`:

```{r}
#| fig-alt: |
#|   Un poligono di frequenza dei prezzi dei diamanti dove ogni taglio di carato (Fair, 
#|   Good, Very Good, Premium, e Ideal) è rappresentato con una linea di colore diverso. 
#|   L'asse x varia da 0 a 30000 e l'asse y varia da 0 a 
#|   5000. Le linee si sovrappongono molto, suggerendo distribuzioni di frequenza 
#|   simili dei prezzi dei diamanti. Una caratteristica notevole è che 
#|   i diamanti Ideal hanno il picco più alto intorno a 1500.
ggplot(diamonds, aes(x = price)) + 
  geom_freqpoly(aes(color = cut), binwidth = 500, linewidth = 0.75)
```

Nota che ggplot2 usa una scala di colori ordinata per `cut` perché è definita come una variabile fattore ordinata nei dati.
Imparerai di più su questi in @sec-ordered-factors.

L'aspetto predefinito di `geom_freqpoly()` non è molto utile qui perché l'altezza, determinata dal conteggio complessivo, differisce così tanto tra i `cut`, rendendo difficile vedere le differenze nelle forme delle loro distribuzioni.

Per rendere il confronto più facile dobbiamo cambiare cosa viene mostrato sull'asse y.
Invece di mostrare il conteggio, mostreremo la **densità**, che è il conteggio standardizzato così che l'area sotto ogni poligono di frequenza sia uno.

```{r}
#| fig-alt: |
#|   Un poligono di frequenza delle densità dei prezzi dei diamanti dove ogni taglio di 
#|   carato (Fair, Good, Very Good, Premium, e Ideal) è rappresentato con una 
#|   linea di colore diverso. L'asse x varia da 0 a 20000. Le linee si sovrappongono 
#|   molto, suggerendo distribuzioni di densità simili dei prezzi dei 
#|   diamanti. Una caratteristica notevole è che tutti tranne i diamanti Fair hanno picchi alti 
#|   intorno a un prezzo di 1500 e i diamanti Fair hanno una media più alta degli altri.
ggplot(diamonds, aes(x = price, y = after_stat(density))) + 
  geom_freqpoly(aes(color = cut), binwidth = 500, linewidth = 0.75)
```

Nota che stiamo mappando la densità a `y`, ma siccome `density` non è una variabile nel dataset `diamonds`, dobbiamo prima calcolarla.
Usiamo la funzione `after_stat()` per farlo.

C'è qualcosa di piuttosto sorprendente in questo grafico - sembra che i diamanti fair (la qualità più bassa) abbiano il prezzo medio più alto!
Ma forse è perché i poligoni di frequenza sono un po' difficili da interpretare - c'è molto in corso in questo grafico.

Un grafico visivamente più semplice per esplorare questa relazione è usare boxplot fianco a fianco.

```{r}
#| fig-alt: |
#|   Boxplot fianco a fianco dei prezzi dei diamanti per taglio. La distribuzione dei 
#|   prezzi è asimmetrica a destra per ogni taglio (Fair, Good, Very Good, Premium, e 
#|   Ideal). Le mediane sono vicine tra loro, con la mediana per i diamanti Ideal 
#|   più bassa e quella per Fair più alta.
ggplot(diamonds, aes(x = cut, y = price)) +
  geom_boxplot()
```

Vediamo molte meno informazioni sulla distribuzione, ma i boxplot sono molto più compatti così possiamo confrontarli più facilmente (e farne stare di più su un grafico).
Supporta la scoperta controintuitiva che i diamanti di qualità migliore sono tipicamente più economici!
Negli esercizi, sarai sfidato a capire perché.

`cut` è un fattore ordinato: fair è peggiore di good, che è peggiore di very good e così via.
Molte variabili categoriche non hanno un tale ordine intrinseco, quindi potresti voler riordinarle per creare una visualizzazione più informativa.
Un modo per farlo è con `fct_reorder()`.
Imparerai di più su quella funzione in @sec-modifying-factor-order, ma vogliamo darti una rapida anteprima qui perché è così utile.
Per esempio, prendi la variabile `class` nel dataset `mpg`.
Potresti essere interessato a sapere come il chilometraggio autostradale varia tra le classi:

```{r}
#| fig-alt: |
#|   Boxplot fianco a fianco dei chilometraggi autostradali delle auto per classe. Le classi sono 
#|   sull'asse x (2seaters, compact, midsize, minivan, pickup, subcompact, 
#|   e suv).
ggplot(mpg, aes(x = class, y = hwy)) +
  geom_boxplot()
```

Per rendere il trend più facile da vedere, possiamo riordinare `class` basandoci sul valore mediano di `hwy`:

```{r}
#| fig-alt: |
#|   Boxplot fianco a fianco dei chilometraggi autostradali delle auto per classe. Le classi sono 
#|   sull'asse x e ordinate per chilometraggio autostradale mediano crescente (pickup, 
#|   suv, minivan, 2seater, subcompact, compact, e midsize).
ggplot(mpg, aes(x = fct_reorder(class, hwy, median), y = hwy)) +
  geom_boxplot()
```

Se hai nomi di variabili lunghi, `geom_boxplot()` funzionerà meglio se lo giri di 90°.
Puoi farlo scambiando le mappature estetiche x e y.

```{r}
#| fig-alt: |
#|   Boxplot fianco a fianco dei chilometraggi autostradali delle auto per classe. Le classi sono 
#|   sull'asse y e ordinate per chilometraggio autostradale mediano crescente.
ggplot(mpg, aes(x = hwy, y = fct_reorder(class, hwy, median))) +
  geom_boxplot()
```

#### Esercizi

1.  Usa quello che hai imparato per migliorare la visualizzazione degli orari di partenza dei voli cancellati vs. non cancellati.

2.  Basandoti su EDA, quale variabile nel dataset diamonds sembra essere più importante per predire il prezzo di un diamante?
    Come è correlata quella variabile con cut?
    Perché la combinazione di quelle due relazioni porta i diamanti di qualità inferiore a essere più costosi?

3.  Invece di scambiare le variabili x e y, aggiungi `coord_flip()` come nuovo strato al boxplot verticale per crearne uno orizzontale.
    Come si confronta questo con lo scambiare le variabili?

4.  Un problema con i boxplot è che sono stati sviluppati in un'era di dataset molto più piccoli e tendono a mostrare un numero proibitivamente grande di "valori outlier".
    Un approccio per rimediare a questo problema è il letter value plot.
    Installa il pacchetto lvplot, e prova a usare `geom_lv()` per mostrare la distribuzione di price vs. cut.
    Cosa impari?
    Come interpreti i grafici?

5.  Crea una visualizzazione dei prezzi dei diamanti vs. una variabile categorica dal dataset `diamonds` usando `geom_violin()`, poi un `geom_histogram()` con facet, poi un `geom_freqpoly()` colorato, e poi un `geom_density()` colorato.
    Confronta i quattro grafici.
    Quali sono i pro e i contro di ogni metodo per visualizzare la distribuzione di una variabile numerica basata sui livelli di una variabile categorica?

6.  Se hai un dataset piccolo, è a volte utile usare `geom_jitter()` per evitare l'overplotting e vedere più facilmente la relazione tra una variabile continua e categorica.
    Il pacchetto ggbeeswarm fornisce diversi metodi simili a `geom_jitter()`.
    Elencali e descrivi brevemente cosa fa ognuno.

### Due variabili categoriche

Per visualizzare la covariazione tra variabili categoriche, dovrai contare il numero di osservazioni per ogni combinazione di livelli di queste variabili categoriche.
Un modo per farlo è affidarsi al `geom_count()` integrato:

```{r}
#| fig-alt: |
#|   Un grafico a dispersione di color vs. cut dei diamanti. C'è un punto per ogni
#|   combinazione di livelli di cut (Fair, Good, Very Good, Premium, e Ideal) 
#|   e color (D, E, F, G, G, I, e J). Le dimensioni dei punti rappresentano 
#|   il numero di osservazioni per quella combinazione. La legenda indica 
#|   che queste dimensioni variano tra 1000 e 4000.
ggplot(diamonds, aes(x = cut, y = color)) +
  geom_count()
```

La dimensione di ogni cerchio nel grafico mostra quante osservazioni sono avvenute a ogni combinazione di valori.
La covariazione apparirà come una forte correlazione tra specifici valori x e specifici valori y.

Un altro approccio per esplorare la relazione tra queste variabili è calcolare i conteggi con dplyr:

```{r}
diamonds |> 
  count(color, cut)
```

Poi visualizza con `geom_tile()` e l'estetica fill:

```{r}
#| fig-alt: |
#|   Un grafico a piastrelle di cut vs. color dei diamanti. Ogni piastrella rappresenta una 
#|   combinazione cut/color e le piastrelle sono colorate secondo il numero di 
#|   osservazioni in ogni piastrella. Ci sono più diamanti Ideal che altri tagli, 
#|   con il numero più alto che sono diamanti Ideal con color G. I diamanti Fair 
#|   e i diamanti con color I sono i più bassi in frequenza.
diamonds |> 
  count(color, cut) |>  
  ggplot(aes(x = color, y = cut)) +
  geom_tile(aes(fill = n))
```

Se le variabili categoriche non sono ordinate, potresti voler usare il pacchetto seriation per riordinare simultaneamente le righe e le colonne per rivelare più chiaramente pattern interessanti.
Per grafici più grandi, potresti voler provare il pacchetto heatmaply, che crea grafici interattivi.

#### Esercizi

1.  Come potresti riscalare il dataset dei conteggi sopra per mostrare più chiaramente la distribuzione di cut all'interno di color, o color all'interno di cut?

2.  Quali diversi insight sui dati ottieni con un grafico a barre segmentato se color è mappato all'estetica `x` e `cut` è mappato all'estetica `fill`?
    Calcola i conteggi che cadono in ognuno dei segmenti.

3.  Usa `geom_tile()` insieme a dplyr per esplorare come i ritardi medi di partenza dei voli variano per destinazione e mese dell'anno.
    Cosa rende il grafico difficile da leggere?
    Come potresti migliorarlo?

### Due variabili numeriche

Hai già visto un ottimo modo per visualizzare la covariazione tra due variabili numeriche: disegnare un grafico a dispersione con `geom_point()`.
Puoi vedere la covariazione come un pattern nei punti.
Per esempio, puoi vedere una relazione positiva tra la dimensione in carati e il prezzo di un diamante: i diamanti con più carati hanno un prezzo più alto.
La relazione è esponenziale.

```{r}
#| dev: "png"
#| fig-alt: |
#|   Un grafico a dispersione di price vs. carat. La relazione è positiva, piuttosto 
#|   forte, ed esponenziale.
ggplot(smaller, aes(x = carat, y = price)) +
  geom_point()
```

(In questa sezione useremo il dataset `smaller` per rimanere concentrati sulla maggior parte dei diamanti che sono più piccoli di 3 carati)

I grafici a dispersione diventano meno utili man mano che la dimensione del tuo dataset cresce, perché i punti iniziano a sovrapporsi, e si accumulano in aree di nero uniforme, rendendo difficile giudicare le differenze nella densità dei dati attraverso lo spazio bidimensionale così come rendendo difficile individuare il trend.
Hai già visto un modo per risolvere il problema: usare l'estetica `alpha` per aggiungere trasparenza.

```{r}
#| dev: "png"
#| fig-alt: |
#|   Un grafico a dispersione di price vs. carat. La relazione è positiva, piuttosto 
#|   forte, ed esponenziale. I punti sono trasparenti, mostrando cluster dove 
#|   il numero di punti è più alto che in altre aree. I cluster più ovvi 
#|   sono per diamanti con 1, 1.5, e 2 carati.
ggplot(smaller, aes(x = carat, y = price)) + 
  geom_point(alpha = 1 / 100)
```

Ma usare la trasparenza può essere impegnativo per dataset molto grandi.
Un'altra soluzione è usare i bin.
Precedentemente hai usato `geom_histogram()` e `geom_freqpoly()` per fare binning in una dimensione.
Ora imparerai come usare `geom_bin2d()` e `geom_hex()` per fare binning in due dimensioni.

`geom_bin2d()` e `geom_hex()` dividono il piano delle coordinate in bin 2d e poi usano un colore di riempimento per mostrare quanti punti cadono in ogni bin.
`geom_bin2d()` crea bin rettangolari.
`geom_hex()` crea bin esagonali.
Dovrai installare il pacchetto hexbin per usare `geom_hex()`.

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   Grafico 1: Un grafico di densità binned di price vs. carat. Grafico 2: Un grafico a bin esagonali 
#|   di price vs. carat. Entrambi i grafici mostrano che la densità più alta di 
#|   diamanti hanno carati bassi e prezzi bassi.
ggplot(smaller, aes(x = carat, y = price)) +
  geom_bin2d()

# installa.packages("hexbin")
ggplot(smaller, aes(x = carat, y = price)) +
  geom_hex()
```

Un'altra opzione è fare binning di una variabile continua così che si comporti come una variabile categorica.
Poi puoi usare una delle tecniche per visualizzare la combinazione di una variabile categorica e una continua che hai imparato.
Per esempio, potresti fare binning di `carat` e poi per ogni gruppo, mostrare un boxplot:

```{r}
#| fig-alt: |
#|   Box plot fianco a fianco dei prezzi per carato. Ogni box plot rappresenta diamanti 
#|   che sono distanti 0.1 carati in peso. I box plot mostrano che man mano che il carato 
#|   aumenta anche il prezzo mediano aumenta. Inoltre, i diamanti con 
#|   1.5 carati o meno hanno distribuzioni dei prezzi asimmetriche a destra, da 1.5 a 2 hanno 
#|   distribuzioni dei prezzi grosso modo simmetriche, e i diamanti che pesano di più hanno 
#|   distribuzioni asimmetriche a sinistra. I diamanti più economici e piccoli hanno outlier verso l'
#|   alto, i diamanti più costosi e grandi hanno outlier verso il basso.
ggplot(smaller, aes(x = carat, y = price)) + 
  geom_boxplot(aes(group = cut_width(carat, 0.1)))
```

`cut_width(x, width)`, come usato sopra, divide `x` in bin di larghezza `width`.
Di default, i boxplot sembrano grosso modo uguali (a parte il numero di outlier) indipendentemente da quante osservazioni ci sono, quindi è difficile dire che ogni boxplot riassume un numero diverso di punti.
Un modo per mostrarlo è rendere la larghezza del boxplot proporzionale al numero di punti con `varwidth = TRUE`.

#### Esercizi

1.  Invece di riassumere la distribuzione condizionale con un boxplot, potresti usare un poligono di frequenza.
    Cosa devi considerare quando usi `cut_width()` vs. `cut_number()`?
    Come impatta questo una visualizzazione della distribuzione 2d di `carat` e `price`?

2.  Visualizza la distribuzione di `carat`, partizionata per `price`.

3.  Come si confronta la distribuzione dei prezzi di diamanti molto grandi con quelli piccoli?
    È come ti aspetti, o ti sorprende?

4.  Combina due delle tecniche che hai imparato per visualizzare la distribuzione combinata di cut, carat, e price.

5.  I grafici bidimensionali rivelano outlier che non sono visibili nei grafici unidimensionali.
    Per esempio, alcuni punti nel grafico seguente hanno una combinazione insolita di valori `x` e `y`, che rende i punti outlier anche se i loro valori `x` e `y` appaiono normali quando esaminati separatamente.
    Perché un grafico a dispersione è una visualizzazione migliore di un grafico binned per questo caso?

    ```{r}
    #| eval: false
    diamonds |> 
      filter(x >= 4) |> 
      ggplot(aes(x = x, y = y)) +
      geom_point() +
      coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
    ```

6.  Invece di creare box di larghezza uguale con `cut_width()`, potremmo creare box che contengono grosso modo un numero uguale di punti con `cut_number()`.
    Quali sono i vantaggi e gli svantaggi di questo approccio?

    ```{r}
    #| eval: false
    ggplot(smaller, aes(x = carat, y = price)) + 
      geom_boxplot(aes(group = cut_number(carat, 20)))
    ```

## Pattern e modelli

Se esiste una relazione sistematica tra due variabili apparirà come un pattern nei dati.
Se noti un pattern, chiediti:

-   Questo pattern potrebbe essere dovuto a coincidenza (cioè caso)?

-   Come puoi descrivere la relazione implicata dal pattern?

-   Quanto è forte la relazione implicata dal pattern?

-   Quali altre variabili potrebbero influenzare la relazione?

-   La relazione cambia se guardi singoli sottogruppi dei dati?

I pattern nei tuoi dati forniscono indizi sulle relazioni, cioè, rivelano covariazione.
Se pensi alla variazione come un fenomeno che crea incertezza, la covariazione è un fenomeno che la riduce.
Se due variabili covariano, puoi usare i valori di una variabile per fare previsioni migliori sui valori della seconda.
Se la covariazione è dovuta a una relazione causale (un caso speciale), allora puoi usare il valore di una variabile per controllare il valore della seconda.

I modelli sono uno strumento per estrarre pattern dai dati.
Per esempio, considera i dati diamonds.
È difficile capire la relazione tra cut e price, perché cut e carat, e carat e price sono strettamente correlati.
È possibile usare un modello per rimuovere la relazione molto forte tra price e carat così possiamo esplorare le sottigliezze che rimangono.
Il codice seguente adatta un modello che predice `price` da `carat` e poi calcola i residui (la differenza tra il valore predetto e il valore reale).
I residui ci danno una vista del prezzo del diamante, una volta che l'effetto di carat è stato rimosso.
Nota che invece di usare i valori grezzi di `price` e `carat`, li trasformiamo prima logaritmicamente, e adattiamo un modello ai valori trasformati logaritmicamente.
Poi, esponenziamo i residui per rimetterli nella scala dei prezzi grezzi.

```{r}
#| message: false
#| dev: "png"
#| fig-alt: |
#|   Un grafico a dispersione dei residui vs. carat dei diamanti. L'asse x varia da 0 
#|   a 5, l'asse y varia da 0 a quasi 4. Molti dei dati sono raggruppati 
#|   intorno a valori bassi di carat e residui. C'è un pattern chiaro e curvo 
#|   che mostra una diminuzione nei residui man mano che il carat aumenta.
library(tidymodels)

diamonds <- diamonds |>
  mutate(
    log_price = log(price),
    log_carat = log(carat)
  )

diamonds_fit <- linear_reg() |>
  fit(log_price ~ log_carat, data = diamonds)

diamonds_aug <- augment(diamonds_fit, new_data = diamonds) |>
  mutate(.resid = exp(.resid))

ggplot(diamonds_aug, aes(x = carat, y = .resid)) + 
  geom_point()
```

Una volta che hai rimosso la relazione forte tra carat e price, puoi vedere quello che ti aspetti nella relazione tra cut e price: relativamente alla loro dimensione, i diamanti di qualità migliore sono più costosi.

```{r}
#| fig-alt: |
#|   Box plot fianco a fianco dei residui per taglio. L'asse x mostra i vari 
#|   tagli (da Fair a Ideal), l'asse y varia da 0 a quasi 5. Le mediane sono 
#|   abbastanza simili, tra circa 0.75 e 1.25. Ognuna delle distribuzioni dei 
#|   residui è asimmetrica a destra, con molti outlier verso l'alto.
ggplot(diamonds_aug, aes(x = cut, y = .resid)) + 
  geom_boxplot()
```

Non stiamo discutendo di modellazione in questo libro perché capire cosa sono i modelli e come funzionano è più facile una volta che hai gli strumenti di manipolazione dati e programmazione in mano.

## Riassunto

In questo capitolo hai imparato una varietà di strumenti per aiutarti a capire la variazione nei tuoi dati.
Hai visto tecniche che funzionano con una singola variabile alla volta e con una coppia di variabili.
Questo potrebbe sembrare dolorosamente restrittivo se hai decine o centinaia di variabili nei tuoi dati, ma sono le fondamenta su cui tutte le altre tecniche sono costruite.

Nel prossimo capitolo, ci concentreremo sugli strumenti che possiamo usare per comunicare i nostri risultati.