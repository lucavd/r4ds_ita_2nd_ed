# Introduzione {#sec-intro .unnumbered}

```{r}
#| echo: false
source("_common.R")
```

La scienza dei dati √® una disciplina entusiasmante che ti permette di trasformare dati grezzi in comprensione, intuizione e conoscenza.
L'obiettivo di "R for Data Science" √® aiutarti a imparare gli strumenti pi√π importanti di R che ti permetteranno di fare data science in modo efficiente e riproducibile, divertendoti lungo il percorso üòÉ.
Dopo aver letto questo libro, avrai gli strumenti per affrontare un'ampia variet√† di sfide di data science usando le parti migliori di R.

## Cosa imparerai

La scienza dei dati √® un campo vasto e non c'√® modo di padroneggiarlo completamente leggendo un solo libro.
Questo libro vuole darti una solida base nei principali strumenti e conoscenze sufficienti a trovare le risorse per imparare di pi√π quando necessario.
Il nostro modello delle fasi di un tipico progetto di data science √® illustrato in @fig-ds-diagram.

```{r}
#| label: fig-ds-diagram
#| echo: false
#| fig-cap: |
#|   Nel nostro modello del processo di data science, si inizia con l'importazione
#|   e il riordino dei dati. Poi si comprende i dati con un ciclo iterativo di
#|   trasformazione, visualizzazione e modellazione. Si conclude il processo
#|   comunicando i risultati ad altri.
#| fig-alt: |
#|   Un diagramma che mostra il ciclo della data science: Import -> Tidy -> Understand
#|   (che ha le fasi Transform -> Visualize -> Model in un ciclo) ->
#|   Communicate. Intorno a tutto questo c'√® Program.
#| out.width: NULL
knitr::include_graphics("diagrams/data-science/base.png", dpi = 270)
```

Per prima cosa devi **importare** i tuoi dati in R.
Questo in genere significa prendere dati memorizzati in un file, in un database o in un'interfaccia di programmazione web (API) e caricarli in un data frame in R.
Se non riesci a portare i dati in R, non potrai farci data science!

Una volta importati i dati, √® buona norma **riordinarli**.
Riordinare i dati significa conservarli in una forma coerente che faccia combaciare la semantica del dataset con il modo in cui √® archiviato.
In breve, quando i dati sono ordinati, ogni colonna rappresenta una variabile e ogni riga un'osservazione.
I dati ordinati sono importanti perch√© una struttura coerente ti permette di concentrarti sulle domande da porre ai dati, invece di lottare per metterli nella forma giusta per le diverse funzioni.

Dopo aver ordinato i dati, un passo successivo comune √® **trasformarli**.
La trasformazione include la selezione di osservazioni di interesse (ad esempio tutte le persone di una citt√† o tutti i dati dell'ultimo anno), la creazione di nuove variabili come funzioni di quelle esistenti (ad esempio calcolare la velocit√† a partire da distanza e tempo) e il calcolo di statistiche riassuntive (come conteggi o medie).
Riordinare e trasformare insieme costituiscono la cosiddetta **wrangling**, perch√© mettere i dati in una forma naturale con cui lavorare spesso sembra una lotta!

Una volta che hai dati ordinati con le variabili di cui hai bisogno, esistono due principali motori di generazione della conoscenza: la visualizzazione e la modellazione.
Ciascuno ha punti di forza e debolezza complementari, perci√≤ ogni analisi reale passer√† molte volte dall'uno all'altro.

**La visualizzazione** √® un'attivit√† fondamentalmente umana.
Una buona visualizzazione ti mostrer√† cose inaspettate o ti sollever√† nuove domande sui dati.
Una buona visualizzazione potrebbe anche suggerirti che stai ponendo la domanda sbagliata o che devi raccogliere dati differenti.
Le visualizzazioni possono stupirti, ma non scalano molto bene perch√© richiedono l'interpretazione umana.

I **modelli** sono strumenti complementari alla visualizzazione.
Una volta formulate in modo sufficientemente preciso le domande, puoi usare un modello per rispondervi.
I modelli sono strumenti fondamentalmente matematici o computazionali, per cui generalmente scalano bene.
Anche quando non lo fanno, di solito √® pi√π economico comprare altri computer che altre menti!
Ma ogni modello fa delle assunzioni e, per sua natura, non pu√≤ metterle in discussione.
Ci√≤ significa che un modello non pu√≤ sorprenderti in modo fondamentale.

L'ultimo passo della scienza dei dati √® la **comunicazione**, una parte assolutamente cruciale di ogni progetto di analisi.
Non importa quanto bene modelli e visualizzazioni ti abbiano fatto comprendere i dati, se non riesci anche a comunicare i risultati agli altri.

A circondare tutti questi strumenti c'√® la **programmazione**.
La programmazione √® uno strumento trasversale che utilizzi in quasi ogni parte di un progetto di data science.
Non serve essere programmatori esperti per essere bravi data scientist, ma approfondire la programmazione ripaga perch√© diventare programmatori migliori permette di automatizzare attivit√† frequenti e risolvere nuovi problemi con maggior facilit√†.

Userai questi strumenti in ogni progetto di data science, ma non sono sufficienti per la maggior parte dei progetti.
Vale una sorta di regola dell'80/20: puoi affrontare circa l'80% di ogni progetto con gli strumenti che imparerai in questo libro, ma ti serviranno altri strumenti per affrontare il restante 20%.
Nel corso del libro ti indicheremo risorse dove potrai approfondire.

## Come √® organizzato questo libro

La precedente descrizione degli strumenti della scienza dei dati √® organizzata approssimativamente secondo l'ordine in cui li utilizzeresti in un'analisi (anche se, ovviamente, ci tornerai sopra pi√π volte).
Dalla nostra esperienza, per√≤, iniziare imparando a importare e riordinare i dati √® poco ideale: per l'80% del tempo √® routine noiosa, per il restante 20% √® strano e frustrante.
Non √® un buon modo per iniziare a imparare qualcosa di nuovo!
Invece cominceremo dalla visualizzazione e trasformazione di dati che sono gi√† stati importati e riordinati.
In questo modo, quando dovrai importare e riordinare i tuoi dati, la motivazione rester√† alta perch√© saprai che la fatica vale lo sforzo.

All'interno di ciascun capitolo cerchiamo di seguire uno schema coerente: iniziamo con alcuni esempi motivanti che ti permettono di cogliere il quadro generale, per poi addentrarci nei dettagli.
Ogni sezione del libro √® accompagnata da esercizi che ti aiutano a mettere in pratica ci√≤ che hai imparato.
Per quanto possa essere allettante saltarli, non c'√® modo migliore di imparare che esercitarsi su problemi reali.

## Cosa non imparerai

Ci sono diversi argomenti importanti che questo libro non tratta.
Riteniamo fondamentale rimanere ferocemente concentrati sugli aspetti essenziali per poter partire il pi√π rapidamente possibile.
Questo significa che il libro non pu√≤ approfondire ogni tema rilevante.
### Modellazione

La modellazione √® un aspetto fondamentale della scienza dei dati, ma √® un argomento vasto e, purtroppo, non abbiamo lo spazio necessario per trattarlo come meriterebbe.
Per saperne di pi√π ti consigliamo caldamente [Tidy Modeling with R](https://www.tmwr.org) dei nostri colleghi Max Kuhn e Julia Silge.
Questo libro ti insegner√† la famiglia di pacchetti **tidymodels** che, come suggerisce il nome, condividono molte convenzioni con i pacchetti del tidyverse utilizzati in questo volume.

### Big data

Questo libro si concentra con orgoglio soprattutto su dataset di piccole dimensioni caricati in memoria.
√à il punto di partenza ideale, perch√© non si pu√≤ affrontare il big data senza esperienza con i dati di piccole dimensioni.
Gli strumenti che imparerai nella maggior parte del libro gestiranno senza problemi centinaia di megabyte di dati e, con un po' di cura, potrai usarli anche con qualche gigabyte.
Ti mostreremo inoltre come leggere dati da database e file parquet, entrambi spesso utilizzati per archiviare grandi moli di dati.
Non sempre avrai bisogno di lavorare con l'intero dataset: per rispondere alla tua domanda basta spesso un sottoinsieme o un campione dei dati.
Se ti capita spesso di lavorare con dataset ancora pi√π grandi (10--100 GB, ad esempio), ti consigliamo di approfondire [data.table](https://github.com/Rdatatable/data.table).
Non lo insegniamo qui perch√© utilizza un'interfaccia diversa dal tidyverse e richiede di imparare convenzioni differenti.
Tuttavia √® incredibilmente pi√π veloce e, se lavori con dati molto grandi, dedicare un po' di tempo a impararlo ripaga in termini di prestazioni.
### Python, Julia e altri linguaggi

In questo libro non imparerai nulla su Python, Julia o altri linguaggi di programmazione utili per la data science.
Non perch√© li riteniamo strumenti scadenti -- tutt'altro!
Nella pratica, molti team di data science usano un mix di linguaggi, spesso almeno R e Python.
Siamo per√≤ convinti che sia meglio padroneggiare un solo strumento alla volta, e R √® un ottimo punto di partenza.

## Prerequisiti

Abbiamo fatto alcune ipotesi su ci√≤ che sai gi√† per trarre il massimo da questo libro.
Dovresti avere una buona familiarit√† con i numeri e pu√≤ essere utile possedere qualche esperienza di programmazione.
Se non hai mai programmato, potresti trovare utile affiancare a questo testo [Hands on Programming with R](https://rstudio-education.github.io/hopr/) di Garrett.
Per eseguire il codice di questo libro ti servono quattro cose: R, RStudio, un insieme di pacchetti chiamato **tidyverse** e qualche altro pacchetto.
I pacchetti sono le unit√† fondamentali di codice R riproducibile.
Contengono funzioni riutilizzabili, documentazione che spiega come usarle e dati di esempio.
### R

Per scaricare R visita CRAN, il **c**omprehensive **R** **a**rchive **n**etwork, all'indirizzo <https://cloud.r-project.org>.
Ogni anno esce una nuova versione principale di R e durante l'anno 2-3 versioni minori.
√à consigliabile aggiornare con regolarit√†.
L'aggiornamento pu√≤ essere un po' fastidioso, soprattutto per le versioni principali che richiedono di reinstallare tutti i pacchetti, ma rimandare non fa che peggiorare le cose.
Per questo libro consigliamo R 4.2.0 o successivi.
### RStudio

RStudio √® un ambiente di sviluppo integrato, o IDE, per programmare in R, che puoi scaricare da <https://posit.co/download/rstudio-desktop/>.
RStudio viene aggiornato un paio di volte all'anno e ti avviser√† automaticamente quando esce una nuova versione, quindi non serve controllare periodicamente.
√à consigliabile aggiornare con regolarit√† per sfruttare le funzionalit√† pi√π recenti.
Per seguire questo libro assicurati di avere almeno RStudio 2022.02.0.
Avviando RStudio, come mostrato in @fig-rstudio-console, vedrai due aree principali dell'interfaccia: il pannello della console e quello dei risultati.
Per il momento tutto ci√≤ che devi sapere √® che il codice R si digita nella console e si esegue premendo invio.
Imparerai il resto strada facendo\![
\^intro-1\] \[\^intro-1\]: Se vuoi una panoramica completa di tutte le funzionalit√† di RStudio, consulta la guida utente all'indirizzo <https://docs.posit.co/ide/user>.

```{r}
#| label: fig-rstudio-console
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   L'IDE di RStudio ha due aree principali: si digita il codice R nel pannello
#|   della console a sinistra e si visualizzano i grafici nel pannello dei risultati a destra.
#| fig-alt: |
#|   L'IDE di RStudio con i pannelli Console e Output evidenziati.
knitr::include_graphics("diagrams/rstudio/console.png", dpi = 270)
```

### Il tidyverse

Avrai anche bisogno di installare alcuni pacchetti R.
Un **pacchetto** R √® un insieme di funzioni, dati e documentazione che estende le capacit√† di R base.
L'uso dei pacchetti √® fondamentale per sfruttare al meglio R.
La maggior parte dei pacchetti che imparerai in questo libro fa parte del cosiddetto tidyverse.
Tutti i pacchetti del tidyverse condividono una filosofia comune di gestione dei dati e di programmazione in R e sono progettati per funzionare insieme.

Puoi installare l'intero tidyverse con una sola riga di codice:

```{r}
#| eval: false
install.packages("tidyverse")
```

Sul tuo computer digita quella riga di codice nella console e premi invio per eseguirla.
R scaricher√† i pacchetti da CRAN e li installer√† sul tuo computer.
R scaricher√† i pacchetti da CRAN e li installer√† sul tuo computer.
Una volta installato un pacchetto, puoi caricarlo con la funzione `library()`:

```{r}
library(tidyverse)
```

Vedrai che tidyverse carica nove pacchetti: dplyr, forcats, ggplot2, lubridate, purrr, readr, stringr, tibble e tidyr.
Sono considerati il **core** del tidyverse perch√© li userai in quasi tutte le analisi.

I pacchetti del tidyverse si aggiornano piuttosto di frequente.
Puoi verificare se ci sono nuove versioni eseguendo `tidyverse_update()`.

### Altri pacchetti

Esistono molti altri pacchetti eccellenti che non fanno parte del tidyverse perch√© risolvono problemi in domini differenti o sono progettati con principi diversi.
Questo non li rende migliori o peggiori: semplicemente, sono diversi.
In altre parole, il complemento del tidyverse non √® il "messyverse" ma molti altri universi di pacchetti interconnessi.
Man mano che affronterai nuovi progetti di data science con R imparerai nuovi pacchetti e nuovi modi di pensare ai dati.

In questo libro useremo molti pacchetti esterni al tidyverse.
Per esempio, adotteremo i seguenti pacchetti perch√© ci offrono dataset interessanti con cui esercitarci nell'apprendimento di R:

```{r}
#| eval: false
install.packages(
  c("arrow", "babynames", "curl", "duckdb", "gapminder", 
    "ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman", 
    "leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins", 
    "repurrrsive", "tidymodels", "writexl")
)
```

Useremo inoltre alcuni altri pacchetti per singoli esempi.
Non √® necessario installarli subito: ricorda solo che quando ti appare un errore del tipo:

```{r}
#| eval: false
library(ggrepel)
#> Error in library(ggrepel) : there is no package called 'ggrepel'
```

devi eseguire `install.packages("ggrepel")` per installare il pacchetto.

## Eseguire codice R

La sezione precedente ti ha mostrato diversi esempi di esecuzione di codice R.
Il codice nel libro appare cos√¨:

```{r}
#| eval: true
1 + 2
```

Se esegui lo stesso codice nella tua console otterrai qualcosa del genere:

```         
> 1 + 2
[1] 3
```

Ci sono due differenze principali.
Nella console digiti dopo il `>`, detto **prompt**; nel libro non mostriamo il prompt.
Nel testo l'output √® preceduto da `#>`; nella console appare subito dopo il codice.
Queste differenze ti permettono, se stai leggendo una versione elettronica del libro, di copiare facilmente il codice e incollarlo nella console.

In tutto il libro usiamo un insieme coerente di convenzioni per riferirci al codice:

- Le funzioni sono mostrate con il font del codice e seguite dalle parentesi, come `sum()` o `mean()`.
- Gli altri oggetti R (come dati o argomenti di funzione) sono in font codice senza parentesi, ad esempio `flights` o `x`.
- A volte, per chiarire da quale pacchetto provenga un oggetto, usiamo il nome del pacchetto seguito da due punti, come `dplyr::mutate()` o `nycflights13::flights`.

Anche questo √® codice R valido.

## Ringraziamenti

Questo libro non √® solo opera di Hadley, Mine e Garrett, ma il frutto di molte conversazioni (dal vivo e online) con numerose persone della comunit√† R.

```{r}
#| eval: false
#| echo: false
library(tidyverse)
contribs_all_json <- gh::gh("/repos/:owner/:repo/contributors",
  owner = "hadley",
  repo = "r4ds",
  .limit = Inf
)
contribs_all <- tibble(
  login = contribs_all_json |> map_chr("login"),
  n = contribs_all_json |> map_int("contributions")
)

contribs_old <- read_csv("contributors.csv", col_types = list())
contribs_new <- contribs_all |> anti_join(contribs_old, by = "login")

# Get info for new contributors
needed_json <- map(
  contribs_new$login, 
  ~ gh::gh("/users/:username", username = .x),
  .progress = TRUE
)
info_new <- tibble(
  login = contribs_new$login,
  name = map_chr(needed_json, "name", .default = NA),
  blog = map_chr(needed_json, "blog", .default = NA)
)
info_old <- contribs_old |> select(login, name, blog)
info_all <- bind_rows(info_old, info_new)

contribs_all <- contribs_all |> 
  left_join(info_all, by = "login") |> 
  mutate(login_lowercase = str_to_lower(login)) |>
  arrange(login_lowercase) |>
  select(-login_lowercase)
write_csv(contribs_all, "contributors.csv")
```

```{r}
#| results: asis
#| echo: false
#| message: false
library(dplyr)
contributors <- readr::read_csv("contributors.csv")
contributors <- contributors |> 
  filter(!login %in% c("hadley", "garrettgman", "mine-cetinkaya-rundel")) |> 
  mutate(
    login = paste0("\\@", login),
    desc = ifelse(is.na(name), login, paste0(name, " (", login, ")"))
  )

cat("Questo libro √® stato scritto apertamente, e molte persone hanno contribuito tramite pull request. Un ringraziamento speciale a tutte le ",nrow(contributors), " persone che hanno contribuito con miglioramenti tramite pull request di GitHub (in ordine alfabetico per nome utente): ", sep = "")
cat(paste0(contributors$desc, collapse = ", "))
cat(".\n")
```

## Colophon

Una versione online di questo libro √® disponibile su <https://r4ds.hadley.nz>.
Continuer√† a evolversi tra una ristampa e l'altra del volume cartaceo.
Il codice sorgente del libro √® disponibile su <https://github.com/hadley/r4ds>.
Il libro √® realizzato con [Quarto](https://quarto.org), che facilita la stesura di testi integrando codice eseguibile.

```{r}
#| eval: false
#| echo: false
#| results: asis
pkgs <- sessioninfo::package_info(
  tidyverse:::tidyverse_packages(),
  dependencies = FALSE
)
df <- tibble(
  package = pkgs$package,
  version = pkgs$ondiskversion,
  source = gsub("@", "\\\\@", pkgs$source)
)
knitr::kable(df, format = "markdown")
```

```{r}
#| include: false
cli:::ruler()
```
