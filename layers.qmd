# Strati {#sec-layers}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

In @sec-data-visualization hai imparato molto più che semplicemente creare scatterplot, grafici a barre e boxplot. 
Hai appreso le basi che ti permetteranno di realizzare *qualsiasi* tipo di grafico con ggplot2.

In questo capitolo, amplierai quelle basi imparando la grammatica a strati dei grafici. 
Inizieremo con un approfondimento sulle mappature estetiche, sugli oggetti geometrici e sui facet. 
Successivamente imparerai le trasformazioni statistiche che ggplot2 esegue internamente durante la creazione di un grafico, 
utilizzate per calcolare nuovi valori da plottare, come le altezze delle barre in un grafico a barre o le mediane in un boxplot. 
Apprenderai anche gli aggiustamenti di posizione, che modificano il modo in cui i geoms vengono disposti nei tuoi grafici. 
Infine, introdurremo brevemente i sistemi di coordinate.

Non copriremo ogni singola funzione e opzione per ciascuno di questi strati, ma ti guideremo attraverso le funzionalità più importanti e comunemente usate fornite da ggplot2, oltre ad introdurti a pacchetti che lo estendono.

### Prerequisiti

Questo capitolo si concentra su ggplot2. 
Per accedere ai dataset, alle pagine di aiuto e alle funzioni utilizzate in questo capitolo, carica il tidyverse eseguendo questo codice:

```{r}
#| label: setup
#| message: false
library(tidyverse)
```

## Mappature estetiche

> "Il più grande valore di un'immagine sta nel costringerci a notare ciò che non ci aspettavamo di vedere." --- John Tukey

Ricorda che il data frame `mpg`, fornito con il pacchetto ggplot2, contiene numerose osservazioni su diversi modelli di auto.

```{r}
mpg
```

Tra le variabili di `mpg` troviamo:

1.  `displ`: La cilindrata del motore, espressa in litri. 
    (Variabile numerica.)

2.  `hwy`: L'efficienza in autostrada, in miglia per gallone (mpg). 
    (Un'auto con bassa efficienza consuma più carburante di una con alta efficienza per la stessa distanza.)

3.  `class`: Il tipo di auto. 
    (Variabile categorica.)

Cominciamo visualizzando la relazione tra `displ` e `hwy` per le diverse classi di auto. 
Possiamo creare uno scatterplot in cui le variabili numeriche sono mappate sugli assi `x` e `y`, e la variabile categorica viene mappata a un'estetica come `color` o `shape`.

```{r}
# Sinistra: mappatura di 'class' a color
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point()

# Destra: mappatura di 'class' a shape
ggplot(mpg, aes(x = displ, y = hwy, shape = class)) +
  geom_point()
```

Quando mappi `class` a `shape`, potrebbero comparire due avvertimenti:

1. La palette delle forme può gestire al massimo 6 valori discreti, mentre ce ne sono 7. 
   (Considera di specificare manualmente le forme se necessario.)

2. Sono state rimosse 62 righe contenenti valori mancanti (`geom_point()`).

Allo stesso modo, puoi mappare `class` alle estetiche `size` o `alpha`, che controllano rispettivamente la dimensione e la trasparenza dei punti.

```{r}
# Sinistra: mappatura di 'class' a size
ggplot(mpg, aes(x = displ, y = hwy, size = class)) +
  geom_point()

# Destra: mappatura di 'class' a alpha
ggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +
  geom_point()
```

Entrambi questi approcci generano degli avvertimenti: 
> L'uso di 'alpha' per una variabile discreta non è consigliato.

Mappare una variabile discreta non ordinata (come `class`) su un'estetica ordinata (come `size` o `alpha`) non è ideale, poiché implica una graduatoria che in realtà non esiste.

Una volta mappata un'estetica, ggplot2 si occupa del resto: seleziona una scala ragionevole e costruisce una legenda che spiega la corrispondenza tra i livelli e i valori. 
Per le estetiche `x` e `y`, ggplot2 non crea una legenda, ma genera un asse con tacche e un'etichetta che fornisce le medesime informazioni.

Puoi anche impostare manualmente le proprietà visive del geom come argomento della funzione geom (fuori da `aes()`) invece di affidarti a una mappatura variabile. 
Ad esempio, per rendere tutti i punti blu:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(color = "blue")
```

Qui, il colore non trasmette informazioni su una variabile, ma modifica semplicemente l'aspetto del grafico. 
Dovrai scegliere un valore adeguato per quell'estetica:

- Il nome di un colore come stringa, es. `color = "blue"`
- La dimensione di un punto in mm, es. `size = 1`
- La forma di un punto come numero, es. `shape = 1` (vedi @fig-shapes).

```{r}
#| label: fig-shapes
#| echo: false
#| warning: false
#| fig.asp: 0.364
#| fig-align: "center"
#| fig-cap: |
#|   R dispone di 26 forme predefinite identificate da numeri. Esistono apparenti duplicazioni (ad es. 0, 15 e 22 sono quadrati): 
#|   la differenza risiede nell'interazione tra le estetiche 'color' e 'fill'. 
#|   Le forme vuote (0--14) utilizzano 'color' per il bordo; quelle piene (15--20) sono riempite con 'color'; 
#|   le forme per cui si specifica sia 'color' che 'fill' (21--25) mostrano entrambi.
shapes <- tibble(
  shape = c(0, 1, 2, 5, 3, 4, 6:19, 22, 21, 24, 23, 20, 25),
  x = (0:25 %/% 5) / 2,
  y = (-(0:25 %% 5)) / 4
)
ggplot(shapes, aes(x, y)) + 
  geom_point(aes(shape = shape), size = 5, fill = "red") +
  geom_text(aes(label = shape), hjust = 0, nudge_x = 0.15) +
  scale_shape_identity() +
  expand_limits(x = 4.1) +
  scale_x_continuous(NULL, breaks = NULL) + 
  scale_y_continuous(NULL, breaks = NULL, limits = c(-1.2, 0.2)) + 
  theme_minimal() +
  theme(aspect.ratio = 1/2.75)
```

Finora abbiamo discusso delle estetiche che possiamo mappare o impostare in uno scatterplot usando un geom a punti. 
Per ulteriori dettagli su tutte le mappature estetiche possibili, consulta la vignetta delle specifiche estetiche a <https://ggplot2.tidyverse.org/articles/ggplot2-specs.html>.

Le estetiche specifiche disponibili per un grafico dipendono dal geom usato per rappresentare i dati. 
Nella prossima sezione approfondiremo i geoms.

### Esercizi

1. Crea uno scatterplot di `hwy` vs. `displ` in cui i punti sono triangoli riempiti di rosa.
2. Spiega perché il seguente codice non ha prodotto un grafico con punti blu?
   ```{r}
   #| fig-show: hide
   #| fig-alt: |
   #|   Scatterplot di efficienza in autostrada vs. cilindrata che mostra una relazione negativa. 
   #|   Tutti i punti sono rossi e la legenda associa il termine "blue" a un punto rosso.
   ggplot(mpg) + 
     geom_point(aes(x = displ, y = hwy, color = "blue"))
   ```
3. Cosa fa l'estetica `stroke`? Con quali forme funziona? (Suggerimento: usa `?geom_point`)
4. Cosa accade se mappi un'estetica a qualcosa di diverso da un nome di variabile, ad esempio `aes(color = displ < 5)`? 
   (Nota: dovrai specificare anche `x` e `y`.)

## Oggetti geometrici

In cosa sono simili questi due grafici?

```{r}
#| echo: false
#| message: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   A sinistra, uno scatterplot di efficienza in autostrada vs. cilindrata; a destra, una curva liscia che segue la relazione tra queste variabili, con un intervallo di confidenza.
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

Entrambi i grafici utilizzano la stessa variabile per l'asse x, la stessa per l'asse y e rappresentano gli stessi dati, 
ma non sono identici. 
Ciascun grafico usa un diverso oggetto geometrico (geom) per rappresentare i dati: 
- Quello a sinistra impiega il geom dei punti, 
- quello a destra utilizza il geom liscio, ovvero una linea liscia adattata ai dati.

Per cambiare il geom in un grafico, modifica la funzione geom aggiunta a `ggplot()`. 
Ad esempio, per ottenere i grafici sopra, puoi usare:

```{r}
#| fig-show: hide
# Sinistra
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()

# Destra
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

Ogni funzione geom in ggplot2 accetta un argomento `mapping`, che può essere definito localmente nel layer o globalmente in `ggplot()`. 
Tuttavia, non ogni estetica funziona con ogni geom; 
ad esempio, puoi impostare la forma di un punto ma non la "forma" di una linea. 
Se ci provi, ggplot2 ignorerà silenziosamente quella mappatura. 
D'altro canto, puoi impostare il tipo di linea. 
`geom_smooth()` disegnerà una linea diversa, con un tipo differente, per ciascun valore unico della variabile mappata a `linetype`.

```{r}
#| message: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   Due grafici di efficienza in autostrada vs. cilindrata. 
#|   Nel primo grafico, tre curve lisce hanno lo stesso tipo di linea; 
#|   nel secondo, le curve hanno tipi differenti (solida, tratteggiata o a tratto lungo) in base al valore di trazione.
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + 
  geom_smooth()

ggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) + 
  geom_smooth()
```

Qui, `geom_smooth()` separa le auto in tre linee in base al valore di `drv`, che descrive la trazione dell'auto: 
- Una linea per le auto con `4` (trazione integrale), 
- una per quelle con `f` (trazione anteriore) e 
- una per quelle con `r` (trazione posteriore).

Se questo ti sembra strano, possiamo chiarirlo sovrapponendo le linee ai dati grezzi e colorando tutto in base a `drv`:

```{r}
#| message: false
#| fig-alt: |
#|   Un grafico di efficienza in autostrada vs. cilindrata in cui i dati sono rappresentati sia da punti (colorati in base a trazione) sia da curve lisce (con il tipo di linea determinato dalla trazione). 
#|   Sono mostrati anche gli intervalli di confidenza.
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + 
  geom_point() +
  geom_smooth(aes(linetype = drv))
```

Nota che questo grafico contiene due geoms nello stesso grafico.
Molti geoms, come `geom_smooth()`, usano un singolo oggetto geometrico per rappresentare più righe di dati. 
Per tali geoms, puoi impostare l'estetica `group` su una variabile categorica per disegnare oggetti multipli; 
ggplot2 disegnerà un oggetto separato per ciascun valore unico del gruppo.
In pratica, ggplot2 raggrupperà automaticamente i dati ogni volta che mappi un'estetica a una variabile discreta (come nell'esempio di `linetype`). 
È comodo affidarsi a questa funzionalità poiché l'estetica `group` da sola non aggiunge una legenda o altre caratteristiche distintive.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-asp: 1
#| message: false
#| fig-alt: |
#|   Tre grafici: ciascuno con l'efficienza in autostrada sull'asse y e la cilindrata sull'asse x. 
#|   Il primo mostra una curva liscia unica; 
#|   il secondo, curve lisce separate per ciascun livello di trazione; 
#|   il terzo mostra le stesse curve lisce colorate in base a trazione. 
#|   In tutti vengono visualizzati intervalli di confidenza.
# Sinistra
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth()

# Centrale
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(group = drv))

# Destra
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(color = drv), show.legend = FALSE)
```

Se posizioni le mappature all'interno di una funzione geom, ggplot2 le tratta come mappature locali per quel layer, 
e le usa per estendere o sovrascrivere quelle globali *solo per quel layer*. 
Questo consente di visualizzare estetiche differenti in layer diversi.

```{r}
#| message: false
#| fig-alt: |
#|   Scatterplot di efficienza in autostrada vs. cilindrata, con punti colorati in base alla classe e una curva liscia sovrapposta con intervallo di confidenza.
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(aes(color = class)) + 
  geom_smooth()
```

Puoi usare lo stesso sistema per specificare dataset differenti per ogni layer. 
Qui, evidenziamo le auto a due posti con punti rossi e cerchi aperti; 
l'argomento `data` locale in `geom_point()` sovrascrive quello globale definito in `ggplot()` solo per quel layer.

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_point(
    data = mpg |> filter(class == "2seater"), 
    color = "red"
  ) +
  geom_point(
    data = mpg |> filter(class == "2seater"), 
    shape = "circle open", size = 3, color = "red"
  )
```

I geoms sono i componenti fondamentali di ggplot2. 
Modificando il geom puoi trasformare completamente l'aspetto del tuo grafico, 
e diversi geoms possono evidenziare differenti aspetti dei tuoi dati. 
Ad esempio, l'istogramma e il grafico di densità qui sotto rivelano che la distribuzione dell'efficienza in autostrada è bimodale e asimmetrica a destra, 
mentre il boxplot evidenzia due potenziali outlier.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-alt: |
#|   Tre grafici: istogramma, grafico di densità e boxplot dell'efficienza in autostrada.
# Sinistra
ggplot(mpg, aes(x = hwy)) +
  geom_histogram(binwidth = 2)

# Centrale
ggplot(mpg, aes(x = hwy)) +
  geom_density()

# Destra
ggplot(mpg, aes(x = hwy)) +
  geom_boxplot()
```

## Esercizi

1. Crea uno scatterplot di `hwy` vs. `displ` in cui i punti sono riempiti di rosa e hanno forma di triangolo.
2. Spiega perché il seguente codice non ha prodotto un grafico con punti blu?
   ```{r}
   #| fig-show: hide
   #| fig-alt: |
   #|   Scatterplot di efficienza in autostrada vs. cilindrata che mostra una relazione negativa. 
   #|   Tutti i punti risultano rossi e la legenda associa il termine "blue" a un punto rosso.
   ggplot(mpg) + 
     geom_point(aes(x = displ, y = hwy, color = "blue"))
   ```
3. Che cosa fa l'estetica `stroke`? Con quali forme funziona? (Suggerimento: usa `?geom_point`)
4. Cosa accade se mappi un'estetica a qualcosa di diverso da un nome di variabile, ad esempio `aes(color = displ < 5)`? 
   (Nota: specifica anche gli assi `x` e `y`.)

## Oggetti geometrici

In cosa sono simili questi due grafici?

```{r}
#| echo: false
#| message: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   A sinistra, uno scatterplot di efficienza in autostrada vs. cilindrata; a destra, una curva liscia che segue la relazione tra queste variabili, con un intervallo di confidenza.
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

Entrambi i grafici usano le stesse variabili sugli assi e rappresentano gli stessi dati, 
ma non sono identici. 
Ciascun grafico utilizza un diverso geom per rappresentare i dati: 
- Quello a sinistra usa il geom dei punti, 
- quello a destra impiega il geom liscio, ovvero una linea liscia adattata ai dati.

Modifica il geom del grafico cambiando la funzione geom aggiunta a `ggplot()`. 
Ad esempio, per ottenere i grafici sopra:

```{r}
#| fig-show: hide
# Sinistra
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()

# Destra
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

Ogni funzione geom in ggplot2 accetta un argomento `mapping`, definito localmente o globalmente. 
Tuttavia, non tutte le estetiche sono applicabili a ogni geom: 
puoi impostare la forma di un punto, ma non quella di una linea. 
Se provi, ggplot2 ignorerà silenziosamente quella mappatura. 
In alternativa, puoi impostare il tipo di linea. 
`geom_smooth()` disegnerà una linea diversa, con un tipo differente, per ogni valore unico della variabile mappata a `linetype`.

```{r}
#| message: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   Due grafici di efficienza in autostrada vs. cilindrata. Nel primo, le curve lisce hanno tutte lo stesso tipo di linea; nel secondo, le curve hanno tipi differenti (solida, tratteggiata, o a tratto lungo) in base al valore di trazione.
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + 
  geom_smooth()

ggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) + 
  geom_smooth()
```

Qui, `geom_smooth()` separa le auto in tre linee in base al valore di `drv` (trazione): 
- Una linea per quelle con `4` (trazione integrale), 
- una per quelle con `f` (trazione anteriore) e 
- una per quelle con `r` (trazione posteriore).

Se ciò ti sembra strano, possiamo chiarirlo sovrapponendo le linee ai dati grezzi e colorando tutto in base a `drv`:

```{r}
#| message: false
#| fig-alt: |
#|   Grafico di efficienza in autostrada vs. cilindrata in cui i dati sono rappresentati da punti 
#|   (colorati in base a trazione) e da curve lisce (con il tipo di linea determinato da trazione).
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + 
  geom_point() +
  geom_smooth(aes(linetype = drv))
```

Nota che questo grafico contiene due geoms. 
Molti geoms, come `geom_smooth()`, usano un singolo oggetto geometrico per rappresentare più righe di dati; 
per questi, puoi impostare l'estetica `group` su una variabile categorica in modo che vengano disegnati oggetti separati per ciascun gruppo. 
ggplot2 raggrupperà automaticamente i dati ogni volta che mappi un'estetica a una variabile discreta (come in `linetype`).

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-asp: 1
#| message: false
#| fig-alt: |
#|   Tre grafici, ognuno con l'efficienza in autostrada sull'asse y e la cilindrata sull'asse x.
#|   Il primo mostra una curva liscia unica; il secondo, curve separate per ciascun livello di trazione; 
#|   il terzo mostra le stesse curve, colorate in base a trazione. In tutti sono visibili gli intervalli di confidenza.
# Sinistra
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth()

# Centrale
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(group = drv))

# Destra
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(color = drv), show.legend = FALSE)
```

Se le mappature sono definite all'interno di un geom, ggplot2 le considera locali a quel layer, 
e le utilizza per estendere o sovrascrivere quelle globali *solo per quel layer*. 
Questo permette di mostrare diverse estetiche in layer differenti.

```{r}
#| message: false
#| fig-alt: |
#|   Scatterplot di efficienza in autostrada vs. cilindrata, con punti colorati in base alla classe 
#|   e una curva liscia sovrapposta con intervallo di confidenza.
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(aes(color = class)) + 
  geom_smooth()
```

Puoi utilizzare lo stesso approccio per specificare dataset differenti per ogni layer. 
Qui evidenziamo le auto a due posti con punti rossi e cerchi aperti; 
l'argomento `data` locale in `geom_point()` sovrascrive quello globale in `ggplot()` solo per quel layer.

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_point(
    data = mpg |> filter(class == "2seater"), 
    color = "red"
  ) +
  geom_point(
    data = mpg |> filter(class == "2seater"), 
    shape = "circle open", size = 3, color = "red"
  )
```

I geoms sono i mattoni fondamentali di ggplot2. 
Cambiando il geom puoi trasformare completamente l'aspetto del grafico, e diversi geoms possono rivelare differenti aspetti dei dati. 
Ad esempio, l'istogramma e il grafico di densità qui sotto rivelano che la distribuzione dell'efficienza in autostrada è bimodale e asimmetrica a destra, mentre il boxplot evidenzia due possibili outlier.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-alt: |
#|   Tre grafici: istogramma, grafico di densità e boxplot dell'efficienza in autostrada.
# Sinistra
ggplot(mpg, aes(x = hwy)) +
  geom_histogram(binwidth = 2)

# Centrale
ggplot(mpg, aes(x = hwy)) +
  geom_density()

# Destra
ggplot(mpg, aes(x = hwy)) +
  geom_boxplot()
```

## Esercizi

1. Crea uno scatterplot di `hwy` vs. `displ` in cui i punti sono riempiti di rosa e hanno forma di triangolo.
2. Spiega perché il seguente codice non ha prodotto un grafico con punti blu?
   ```{r}
   #| fig-show: hide
   #| fig-alt: |
   #|   Scatterplot di efficienza in autostrada vs. cilindrata che mostra una relazione negativa. 
   #|   Tutti i punti risultano rossi e la legenda associa "blue" a un punto rosso.
   ggplot(mpg) + 
     geom_point(aes(x = displ, y = hwy, color = "blue"))
   ```
3. Che cosa fa l'estetica `stroke`? Con quali forme funziona? (Suggerimento: usa `?geom_point`)
4. Cosa accade se mappi un'estetica a qualcosa di diverso da un nome di variabile, ad esempio `aes(color = displ < 5)`? 
   (Nota: specifica anche `x` e `y`.)

## Oggetti geometrici

In cosa sono simili questi due grafici?

```{r}
#| echo: false
#| message: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   A sinistra, uno scatterplot di efficienza in autostrada vs. cilindrata; a destra, una curva liscia con intervallo di confidenza.
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

Entrambi i grafici usano le stesse variabili sugli assi e rappresentano gli stessi dati, 
ma non sono identici: uno usa il geom dei punti, l'altro il geom liscio (una linea adattata ai dati).

Per cambiare il geom, basta modificare la funzione geom aggiunta a `ggplot()`. Ad esempio:

```{r}
#| fig-show: hide
# Sinistra
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()

# Destra
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_smooth()
```

Ogni funzione geom in ggplot2 accetta un argomento `mapping`, definito localmente o globalmente. 
Tuttavia, non tutte le estetiche sono adatte a ogni geom: 
puoi impostare la forma di un punto, ma non quella di una linea; 
se ci provi, ggplot2 ignorerà silenziosamente quella mappatura. 
In alternativa, puoi impostare il tipo di linea. 
`geom_smooth()` disegnerà una linea diversa, con un tipo differente, per ciascun valore unico della variabile mappata a `linetype`.

```{r}
#| message: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   Due grafici di efficienza in autostrada vs. cilindrata: nel primo le curve lisce hanno lo stesso tipo di linea; 
#|   nel secondo, le curve hanno tipi diversi (solida, tratteggiata o a tratto lungo) secondo il valore di trazione.
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + 
  geom_smooth()

ggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) + 
  geom_smooth()
```

Qui, `geom_smooth()` separa le auto in tre linee in base al valore di `drv`: 
- una per quelle con `4` (trazione integrale), 
- una per quelle con `f` (trazione anteriore) e 
- una per quelle con `r` (trazione posteriore).

Se questo ti sembra strano, possiamo chiarirlo sovrapponendo le linee ai dati grezzi e colorando tutto in base a `drv`:

```{r}
#| message: false
#| fig-alt: |
#|   Grafico di efficienza in autostrada vs. cilindrata in cui i dati sono mostrati sia con punti (colorati in base a trazione) sia con curve lisce (con il tipo di linea da trazione).
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + 
  geom_point() +
  geom_smooth(aes(linetype = drv))
```

Nota che questo grafico contiene due geoms nello stesso grafico. 
Molti geoms, ad esempio `geom_smooth()`, utilizzano un singolo oggetto per rappresentare più righe di dati. 
Per questi, puoi impostare l'estetica `group` su una variabile categorica, in modo da disegnare oggetti separati per ogni gruppo. 
In pratica, ggplot2 raggrupperà automaticamente i dati quando mappi un'estetica a una variabile discreta (come in `linetype`).

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-asp: 1
#| message: false
#| fig-alt: |
#|   Tre grafici, ciascuno con efficienza in autostrada sull'asse y e cilindrata sull'asse x. 
#|   Il primo mostra una curva liscia unica, il centrale curve separate per trazione, 
#|   il terzo curve lisce colorate per trazione, con intervalli di confidenza.
# Sinistra
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth()

# Centrale
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(group = drv))

# Destra
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(color = drv), show.legend = FALSE)
```

Se le mappature vengono definite all'interno di una funzione geom, ggplot2 le tratta come locali, 
e le usa per estendere o sovrascrivere quelle globali *solo per quel layer*. 
Questo consente di mostrare estetiche diverse in layer differenti.

```{r}
#| message: false
#| fig-alt: |
#|   Scatterplot di efficienza in autostrada vs. cilindrata, con punti colorati in base alla classe e una curva liscia sovrapposta.
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(aes(color = class)) + 
  geom_smooth()
```

Puoi usare lo stesso concetto per specificare dataset diversi per ogni layer. 
Qui, evidenziamo le auto a due posti con punti rossi e cerchi aperti: 
l'argomento `data` locale in `geom_point()` sovrascrive quello globale definito in `ggplot()` solo per quel layer.

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_point(
    data = mpg |> filter(class == "2seater"), 
    color = "red"
  ) +
  geom_point(
    data = mpg |> filter(class == "2seater"), 
    shape = "circle open", size = 3, color = "red"
  )
```

I geoms sono i fondamenti di ggplot2. 
Cambiandoli puoi trasformare completamente l'aspetto di un grafico, e diversi geoms mettono in luce diverse caratteristiche dei dati. 
Ad esempio, l'istogramma e il grafico di densità qui sotto rivelano che la distribuzione dell'efficienza in autostrada è bimodale e asimmetrica a destra, mentre il boxplot evidenzia due potenziali outlier.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-alt: |
#|   Tre grafici: istogramma, grafico di densità e boxplot dell'efficienza in autostrada.
# Sinistra
ggplot(mpg, aes(x = hwy)) +
  geom_histogram(binwidth = 2)

# Centrale
ggplot(mpg, aes(x = hwy)) +
  geom_density()

# Destra
ggplot(mpg, aes(x = hwy)) +
  geom_boxplot()
```

## Esercizi

1. Crea uno scatterplot di `hwy` vs. `displ` in cui i punti sono riempiti di rosa e hanno forma di triangolo.
2. Spiega perché il seguente codice non ha prodotto un grafico con punti blu?
   ```{r}
   #| fig-show: hide
   #| fig-alt: |
   #|   Scatterplot di efficienza in autostrada vs. cilindrata che mostra una relazione negativa. 
   #|   Tutti i punti risultano rossi e la legenda associa "blue" a un punto rosso.
   ggplot(mpg) + 
     geom_point(aes(x = displ, y = hwy, color = "blue"))
   ```
3. Che cosa fa l'estetica `stroke`? Con quali forme funziona? (Suggerimento: usa `?geom_point`)
4. Cosa succede se mappi un'estetica a qualcosa di diverso da un nome di variabile, ad esempio `aes(color = displ < 5)`? 
   (Nota: specifica anche `x` e `y`.)

## Conclusione

Questi sono i concetti fondamentali dei layer in ggplot2: le mappature estetiche, i geoms e il raggruppamento dei dati. 
Nel prossimo capitolo potrai approfondire ulteriormente le opzioni che ggplot2 offre per personalizzare e affinare i tuoi grafici.
