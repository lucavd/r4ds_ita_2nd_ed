# Workflow: basi {#sec-workflow-basics}

```{r}
#| echo: false
source("_common.R")
```

Ora hai un po' di esperienza nell'eseguire codice R.
Non ti abbiamo dato molti dettagli, ma ovviamente hai capito le basi, altrimenti avresti gettato via questo libro per la frustrazione!
La frustrazione è naturale quando inizi a programmare in R perché è molto pignolo sulla punteggiatura, e anche un carattere fuori posto può farlo lamentare.
Ma mentre dovresti aspettarti di essere un po' frustrato, consolati sapendo che questa esperienza è tipica e temporanea: succede a tutti, e l'unico modo per superarla è continuare a provare.

Prima di andare oltre, assicuriamoci che tu abbia una solida base nell'eseguire codice R e che tu conosca alcune delle funzionalità più utili di RStudio.

## Basi del coding

Ripassiamo alcune basi che abbiamo omesso finora nell'interesse di farti creare grafici il più velocemente possibile.
Puoi usare R per fare calcoli matematici di base:

```{r}
1 / 200 * 30
(59 + 73 + 2) / 3
sin(pi / 2)
```

Puoi creare nuovi oggetti con l'operatore di assegnazione `<-`:

```{r}
x <- 3 * 4
```

Nota che il valore di `x` non viene stampato, è solo memorizzato.
Se vuoi visualizzare il valore, digita `x` nella console.

Puoi **c**ombinare elementi multipli in un vettore con `c()`:

```{r}
primes <- c(2, 3, 5, 7, 11, 13)
```

E l'aritmetica di base sui vettori è applicata a ogni elemento del vettore:

```{r}
primes * 2
primes - 1
```

Tutte le istruzioni R dove crei oggetti, istruzioni di **assegnazione**, hanno la stessa forma:

```{r}
#| eval: false
object_name <- value
```

Quando leggi quel codice, di' "nome oggetto ottiene valore" nella tua testa.

Farai molte assegnazioni, e `<-` è una seccatura da digitare.
Puoi risparmiare tempo con la scorciatoia da tastiera di RStudio: Alt + - (il segno meno).
Nota che RStudio circonda automaticamente `<-` con spazi, che è una buona pratica di formattazione del codice.
Il codice può essere miserabile da leggere anche in una buona giornata, quindi dai una pausa ai tuoi occhi e usa gli spazi.

## Commenti

R ignorerà qualsiasi testo dopo `#` per quella riga.
Questo ti permette di scrivere **commenti**, testo che viene ignorato da R ma letto da altri umani.
A volte includeremo commenti negli esempi spiegando cosa sta succedendo con il codice.

I commenti possono essere utili per descrivere brevemente cosa fa il codice seguente.

```{r}
# crea vettore di numeri primi
primes <- c(2, 3, 5, 7, 11, 13)

# moltiplica i numeri primi per 2
primes * 2
```

Con pezzi di codice brevi come questo, lasciare un commento per ogni singola riga di codice potrebbe non essere necessario.
Ma man mano che il codice che stai scrivendo diventa più complesso, i commenti possono farti risparmiare (e ai tuoi collaboratori) molto tempo nel capire cosa è stato fatto nel codice.

Usa i commenti per spiegare il *perché* del tuo codice, non il *come* o il *cosa*.
Il *cosa* e il *come* del tuo codice sono sempre possibili da capire, anche se potrebbe essere tedioso, leggendolo attentamente.
Se descrivi ogni passo nei commenti, e poi cambi il codice, dovrai ricordarti di aggiornare anche i commenti o sarà confuso quando tornerai al tuo codice in futuro.

Capire *perché* qualcosa è stato fatto è molto più difficile, se non impossibile.
Per esempio, `geom_smooth()` ha un argomento chiamato `span`, che controlla la morbidezza della curva, con valori più grandi che producono una curva più morbida.
Supponi di decidere di cambiare il valore di `span` dal suo default di 0.75 a 0.9: è facile per un futuro lettore capire *cosa* sta succedendo, ma a meno che tu non annoti il tuo ragionamento in un commento, nessuno capirà *perché* hai cambiato il default.

Per il codice di analisi dei dati, usa i commenti per spiegare il tuo piano generale di attacco e registrare intuizioni importanti mentre le incontri.
Non c'è modo di ri-catturare questa conoscenza dal codice stesso.

## Cosa c'è in un nome? {#sec-whats-in-a-name}

I nomi degli oggetti devono iniziare con una lettera e possono contenere solo lettere, numeri, `_` e `.`.
Vuoi che i nomi dei tuoi oggetti siano descrittivi, quindi dovrai adottare una convenzione per parole multiple.
Raccomandiamo **snake_case**, dove separi parole minuscole con `_`.

```{r}
#| eval: false
i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
```

Torneremo sui nomi quando discuteremo lo stile del codice in @sec-workflow-style.

Puoi ispezionare un oggetto digitando il suo nome:

```{r}
x
```

Fai un'altra assegnazione:

```{r}
this_is_a_really_long_name <- 2.5
```

Per ispezionare questo oggetto, prova la funzionalità di completamento di RStudio: digita "this", premi TAB, aggiungi caratteri fino ad avere un prefisso unico, poi premi invio.

Supponiamo che tu abbia fatto un errore, e che il valore di `this_is_a_really_long_name` dovrebbe essere 3.5, non 2.5.
Puoi usare un'altra scorciatoia da tastiera per aiutarti a risolverlo.
Per esempio, puoi premere ↑ per richiamare l'ultimo comando che hai digitato e modificarlo.
Oppure, digita "this" poi premi Cmd/Ctrl + ↑ per elencare tutti i comandi che hai digitato che iniziano con quelle lettere.
Usa i tasti freccia per navigare, poi premi invio per ridigitare il comando.
Cambia 2.5 a 3.5 e riesegui.

Fai ancora un'altra assegnazione:

```{r}
r_rocks <- 2^3
```

Proviamo a ispezionarlo:

```{r}
#| eval: false
r_rock
#> Error: object 'r_rock' not found
R_rocks
#> Error: object 'R_rocks' not found
```

Questo illustra il contratto implicito tra te e R: R farà i calcoli tediosi per te, ma in cambio, devi essere completamente preciso nelle tue istruzioni.
Se non lo sei, probabilmente otterrai un errore che dice che l'oggetto che stai cercando non è stato trovato.
I refusi contano; R non può leggere la tua mente e dire, "oh, probabilmente intendevano `r_rocks` quando hanno digitato `r_rock`".
Le maiuscole/minuscole contano; similmente, R non può leggere la tua mente e dire, "oh, probabilmente intendevano `r_rocks` quando hanno digitato `R_rocks`".

## Chiamare funzioni

R ha una grande collezione di funzioni integrate che vengono chiamate così:

```{r}
#| eval: false
function_name(argument1 = value1, argument2 = value2, ...)
```

Proviamo a usare `seq()`, che crea **seq**uenze regolari di numeri, e nel frattempo, impariamo più funzionalità utili di RStudio.
Digita `se` e premi TAB.
Un popup ti mostra i possibili completamenti.
Specifica `seq()` digitando di più (una `q`) per disambiguare o usando le frecce ↑/↓ per selezionare.
Nota il tooltip fluttuante che appare, ricordandoti gli argomenti e lo scopo della funzione.
Se vuoi più aiuto, premi F1 per ottenere tutti i dettagli nella scheda di aiuto nel pannello in basso a destra.

Quando hai selezionato la funzione che vuoi, premi TAB di nuovo.
RStudio aggiungerà le parentesi di apertura (`(`) e chiusura (`)`) corrispondenti per te.
Digita il nome del primo argomento, `from`, e impostalo uguale a `1`.
Poi, digita il nome del secondo argomento, `to`, e impostalo uguale a `10`.
Infine, premi invio.

```{r}
seq(from = 1, to = 10)
```

Spesso omettiamo i nomi dei primi diversi argomenti nelle chiamate di funzione, quindi possiamo riscrivere questo come segue:

```{r}
seq(1, 10)
```

Digita il seguente codice e nota che RStudio fornisce assistenza simile con le virgolette appaiate:

```{r}
x <- "hello world"
```

Quotation marks and parentheses must always come in a pair.
RStudio does its best to help you, but it's still possible to mess up and end up with a mismatch.
If this happens, R will show you the continuation character "+":

```         
> x <- "hello
+
```

Il `+` ti dice che R sta aspettando più input; non pensa che tu abbia finito ancora.
Di solito, questo significa che hai dimenticato o una `"` o una `)`. O aggiungi la coppia mancante, o premi ESCAPE per interrompere l'espressione e prova di nuovo.

Nota che la scheda environment nel pannello in alto a destra mostra tutti gli oggetti che hai creato:

```{r}
#| echo: false
#| fig-alt: |
#|   Scheda Environment di RStudio che mostra r_rocks, this_is_a_really_long_name,
#|   x, e y nel Global Environment.
knitr::include_graphics("screenshots/rstudio-env.png")
```

## Esercizi

1.  Perché questo codice non funziona?

    ```{r}
    #| error: true
    my_variable <- 10
    my_varıable
    ```

    Guarda attentamente!
    (Questo potrebbe sembrare un esercizio inutile, ma allenare il tuo cervello a notare anche la più piccola differenza ripagherà quando programmi.)

2.  Modifica ciascuno dei seguenti comandi R in modo che funzionino correttamente:

    ```{r}
    #| eval: false
    libary(todyverse)

    ggplot(dTA = mpg) + 
      geom_point(maping = aes(x = displ y = hwy)) +
      geom_smooth(method = "lm)
    ```

3.  Premi Option + Shift + K / Alt + Shift + K.
    Cosa succede?
    Come puoi arrivare allo stesso posto usando i menu?

4.  Rivisitiamo un esercizio da @sec-ggsave.
    Esegui le seguenti righe di codice.
    Quale dei due grafici viene salvato come `mpg-plot.png`?
    Perché?

    ```{r}
    #| eval: false
    my_bar_plot <- ggplot(mpg, aes(x = class)) +
      geom_bar()
    my_scatter_plot <- ggplot(mpg, aes(x = cty, y = hwy)) +
      geom_point()
    ggsave(filename = "mpg-plot.png", plot = my_bar_plot)
    ```

## Riassunto

Ora che hai imparato un po' di più su come funziona il codice R, e alcuni suggerimenti per aiutarti a capire il tuo codice quando ci tornerai in futuro.
Nel prossimo capitolo, continueremo il tuo viaggio nella data science insegnandoti dplyr, il pacchetto tidyverse che ti aiuta a trasformare i dati, che si tratti di selezionare variabili importanti, filtrare righe di interesse, o calcolare statistiche riassuntive.