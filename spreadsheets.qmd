# Fogli di calcolo {#sec-import-spreadsheets}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

In @sec-data-import hai imparato a importare dati da file di testo semplice come `.csv` e `.tsv`.
Ora è il momento di imparare come estrarre dati da un foglio di calcolo, sia esso un foglio di calcolo Excel o un Google Sheet.
Questo si basarà su molto di quello che hai imparato in @sec-data-import, ma discuteremo anche considerazioni e complessità aggiuntive quando lavori con dati da fogli di calcolo.

Se tu o i tuoi collaboratori state usando fogli di calcolo per organizzare i dati, raccomandiamo vivamente di leggere l'articolo "Data Organization in Spreadsheets" di Karl Broman e Kara Woo: <https://doi.org/10.1080/00031305.2017.1375989>.
Le migliori pratiche presentate in questo articolo ti faranno risparmiare molti mal di testa quando importi dati da un foglio di calcolo in R per analizzarli e visualizzarli.

## Excel

Microsoft Excel è un programma software per fogli di calcolo ampiamente utilizzato dove i dati sono organizzati in fogli di lavoro all'interno di file di fogli di calcolo.

### Prerequisiti

In questa sezione, imparerai come caricare dati da fogli di calcolo Excel in R con il pacchetto **readxl**.
Questo pacchetto non è nel core del tidyverse, quindi devi caricarlo esplicitamente, ma viene installato automaticamente quando installi il pacchetto tidyverse.
Più tardi, useremo anche il pacchetto writexl, che ci permette di creare fogli di calcolo Excel.

```{r}
#| message: false
library(readxl)
library(tidyverse)
library(writexl)
```

### Iniziare

La maggior parte delle funzioni di readxl ti permette di caricare fogli di calcolo Excel in R:

-   `read_xls()` legge file Excel con formato `xls`.
-   `read_xlsx()` legge file Excel con formato `xlsx`.
-   `read_excel()` può leggere file con entrambi i formati `xls` e `xlsx`. Indovina il tipo di file basandosi sull'input.

Queste funzioni hanno tutte una sintassi simile proprio come altre funzioni che abbiamo precedentemente introdotto per leggere altri tipi di file, es., `read_csv()`, `read_table()`, ecc.
Per il resto del capitolo ci concentreremo sull'uso di `read_excel()`.

### Leggere fogli di calcolo Excel {#sec-reading-spreadsheets-excel}

@fig-students-excel mostra come appare in Excel il foglio di calcolo che leggeremo in R.
Questo foglio di calcolo può essere scaricato come file Excel da <https://docs.google.com/spreadsheets/d/1V1nPp1tzOuutXFLb3G9Eyxi3qxeEhnOXUzL5_BcCQ0w/>.

```{r}
#| label: fig-students-excel
#| echo: false
#| fig-width: 5
#| fig-cap: |
#|   Foglio di calcolo chiamato students.xlsx in Excel.
#| fig-alt: |
#|   Uno sguardo al foglio di calcolo students in Excel. Il foglio di calcolo contiene 
#|   informazioni su 6 studenti, il loro ID, nome completo, cibo preferito, piano pasti, 
#|   ed età.
knitr::include_graphics("screenshots/import-spreadsheets-students.png")
```

Il primo argomento di `read_excel()` è il percorso del file da leggere.

```{r}
students <- read_excel("data/students.xlsx")
```

`read_excel()` leggerà il file come un tibble.

```{r}
students
```

Abbiamo sei studenti nei dati e cinque variabili per ogni studente.
Tuttavia ci sono alcune cose che potremmo voler affrontare in questo dataset:

1.  I nomi delle colonne sono tutti sparsi.
    Puoi fornire nomi di colonne che seguono un formato coerente; raccomandiamo `snake_case` usando l'argomento `col_names`.

    ```{r}
    #| include: false
    options(
      dplyr.print_min = 7,
      dplyr.print_max = 7
    )
    ```

    ```{r}
    read_excel(
      "data/students.xlsx",
      col_names = c("student_id", "full_name", "favourite_food", "meal_plan", "age")
    )
    ```

    ```{r}
    #| include: false
    options(
      dplyr.print_min = 6,
      dplyr.print_max = 6
    )
    ```

    Sfortunatamente, questo non ha funzionato del tutto.
    Ora abbiamo i nomi delle variabili che vogliamo, ma quella che prima era la riga di intestazione ora appare come la prima osservazione nei dati.
    Puoi saltare esplicitamente quella riga usando l'argomento `skip`.

    ```{r}
    read_excel(
      "data/students.xlsx",
      col_names = c("student_id", "full_name", "favourite_food", "meal_plan", "age"),
      skip = 1
    )
    ```

2.  Nella colonna `favourite_food`, una delle osservazioni è `N/A`, che sta per "non disponibile" ma attualmente non è riconosciuta come un `NA` (nota il contrasto tra questo `N/A` e l'età del quarto studente nella lista).
    Puoi specificare quali stringhe di caratteri dovrebbero essere riconosciute come `NA` con l'argomento `na`.
    Di default, solo `""` (stringa vuota, o, nel caso di lettura da un foglio di calcolo, una cella vuota o una cella con la formula `=NA()`) è riconosciuta come un `NA`.

    ```{r}
    read_excel(
      "data/students.xlsx",
      col_names = c("student_id", "full_name", "favourite_food", "meal_plan", "age"),
      skip = 1,
      na = c("", "N/A")
    )
    ```

3.  Un altro problema rimanente è che `age` viene letta come una variabile carattere, ma dovrebbe essere numerica.
    Proprio come con `read_csv()` e compagni per leggere dati da file piatti, puoi fornire un argomento `col_types` a `read_excel()` e specificare i tipi di colonna per le variabili che leggi.
    La sintassi è un po' diversa, però.
    Le tue opzioni sono `"skip"`, `"guess"`, `"logical"`, `"numeric"`, `"date"`, `"text"` o `"list"`.

    ```{r}
    read_excel(
      "data/students.xlsx",
      col_names = c("student_id", "full_name", "favourite_food", "meal_plan", "age"),
      skip = 1,
      na = c("", "N/A"),
      col_types = c("numeric", "text", "text", "text", "numeric")
    )
    ```

    Tuttavia, neanche questo ha prodotto il risultato desiderato.
    Specificando che `age` dovrebbe essere numerica, abbiamo trasformato l'unica cella con il valore non numerico (che aveva il valore `five`) in un `NA`.
    In questo caso, dovremmo leggere age come `"text"` e poi fare il cambiamento una volta che i dati sono caricati in R.

    ```{r}
    students <- read_excel(
      "data/students.xlsx",
      col_names = c("student_id", "full_name", "favourite_food", "meal_plan", "age"),
      skip = 1,
      na = c("", "N/A"),
      col_types = c("numeric", "text", "text", "text", "text")
    )

    students <- students |>
      mutate(
        age = if_else(age == "five", "5", age),
        age = parse_number(age)
      )

    students
    ```

Ci sono voluti diversi passaggi e tentativi ed errori per caricare i dati esattamente nel formato che vogliamo, e questo non è inaspettato.
La data science è un processo iterativo, e il processo di iterazione può essere ancora più tedioso quando si leggono dati da fogli di calcolo rispetto ad altri file di dati rettangolari di testo semplice perché gli esseri umani tendono a inserire dati nei fogli di calcolo e usarli non solo per l'archiviazione di dati ma anche per la condivisione e comunicazione.

Non c'è modo di sapere esattamente come saranno i dati finché non li carichi e non dai un'occhiata.
Beh, c'è un modo, in realtà.
Puoi aprire il file in Excel e dare una sbirciatina.
Se hai intenzione di farlo, raccomandiamo di fare una copia del file Excel da aprire e sfogliare interattivamente mentre lasci il file di dati originale intatto e leggi in R dal file intatto.
Questo assicurerà che non sovrascriva accidentalmente nulla nel foglio di calcolo mentre lo ispezioni.
Non dovresti anche aver paura di fare quello che abbiamo fatto qui: caricare i dati, dare un'occhiata, fare aggiustamenti al tuo codice, caricarli di nuovo, e ripetere finché non sei soddisfatto del risultato.

### Leggere fogli di lavoro

Una caratteristica importante che distingue i fogli di calcolo dai file piatti è la nozione di fogli multipli, chiamati fogli di lavoro.
@fig-penguins-islands mostra un foglio di calcolo Excel con fogli di lavoro multipli.
I dati provengono dal pacchetto **palmerpenguins**, e puoi scaricare questo foglio di calcolo come file Excel da <https://docs.google.com/spreadsheets/d/1aFu8lnD_g0yjF5O-K6SFgSEWiHPpgvFCF0NY9D6LXnY/>.
Ogni foglio di lavoro contiene informazioni sui pinguini di un'isola diversa dove sono stati raccolti i dati.

```{r}
#| label: fig-penguins-islands
#| echo: false
#| fig-cap: |
#|   Foglio di calcolo chiamato penguins.xlsx in Excel contenente tre fogli di lavoro.
#| fig-alt: |
#|   Uno sguardo al foglio di calcolo penguins in Excel. Il foglio di calcolo contiene 
#|   tre fogli di lavoro: Torgersen Island, Biscoe Island, e Dream Island.
knitr::include_graphics("screenshots/import-spreadsheets-penguins-islands.png")
```

Puoi leggere un singolo foglio di lavoro da un foglio di calcolo con l'argomento `sheet` in `read_excel()`.
Il default, su cui ci siamo basati finora, è il primo foglio.

```{r}
read_excel("data/penguins.xlsx", sheet = "Torgersen Island")
```

Alcune variabili che sembrano contenere dati numerici sono lette come caratteri a causa della stringa di caratteri `"NA"` che non viene riconosciuta come un vero `NA`.

```{r}
penguins_torgersen <- read_excel("data/penguins.xlsx", sheet = "Torgersen Island", na = "NA")

penguins_torgersen
```

In alternativa, puoi usare `excel_sheets()` per ottenere informazioni su tutti i fogli di lavoro in un foglio di calcolo Excel, e poi leggere quello/quelli che ti interessano.

```{r}
excel_sheets("data/penguins.xlsx")
```

Una volta che conosci i nomi dei fogli di lavoro, puoi leggerli individualmente con `read_excel()`.

```{r}
penguins_biscoe <- read_excel("data/penguins.xlsx", sheet = "Biscoe Island", na = "NA")
penguins_dream  <- read_excel("data/penguins.xlsx", sheet = "Dream Island", na = "NA")
```

In questo caso il dataset completo dei pinguini è distribuito su tre fogli di lavoro nel foglio di calcolo.
Ogni foglio di lavoro ha lo stesso numero di colonne ma numeri diversi di righe.

```{r}
dim(penguins_torgersen)
dim(penguins_biscoe)
dim(penguins_dream)
```

Possiamo metterli insieme con `bind_rows()`.

```{r}
penguins <- bind_rows(penguins_torgersen, penguins_biscoe, penguins_dream)
penguins
```

In @sec-iteration parleremo di modi per fare questo tipo di compito senza codice ripetitivo.

### Leggere parte di un foglio

Poiché molti usano i fogli di calcolo Excel per la presentazione oltre che per l'archiviazione dei dati, è abbastanza comune trovare voci di celle in un foglio di calcolo che non fanno parte dei dati che vuoi leggere in R.
@fig-deaths-excel mostra un tale foglio di calcolo: nel mezzo del foglio c'è quello che sembra un data frame ma c'è testo estraneo nelle celle sopra e sotto i dati.

```{r}
#| label: fig-deaths-excel
#| echo: false
#| fig-cap: |
#|   Foglio di calcolo chiamato deaths.xlsx in Excel.
#| fig-alt: |
#|   Uno sguardo al foglio di calcolo deaths in Excel. Il foglio di calcolo ha quattro righe 
#|   in alto che contengono informazioni non-dati; il testo 'Per la stessa 
#|   coerenza nel layout dei dati, che è davvero una cosa bella, continuerò 
#|   a fare note qui sopra.' è distribuito tra le celle in queste quattro righe superiori. 
#|   Poi, c'è un data frame che include informazioni sui decessi di 10 
#|   persone famose, inclusi i loro nomi, professioni, età, se hanno 
#|   figli o no, data di nascita e morte. In fondo, ci sono altre quattro 
#|   righe di informazioni non-dati; il testo 'È stato davvero divertente, ma 
#|   ora ci stiamo congedando!' è distribuito tra le celle in queste quattro righe inferiori.
knitr::include_graphics("screenshots/import-spreadsheets-deaths.png")
```

Questo foglio di calcolo è uno dei fogli di calcolo di esempio forniti nel pacchetto readxl.
Puoi usare la funzione `readxl_example()` per localizzare il foglio di calcolo sul tuo sistema nella directory dove è installato il pacchetto.
Questa funzione restituisce il percorso del foglio di calcolo, che puoi usare in `read_excel()` come al solito.

```{r}
deaths_path <- readxl_example("deaths.xlsx")
deaths <- read_excel(deaths_path)
deaths
```

Le prime tre righe e le ultime quattro righe non fanno parte del data frame.
È possibile eliminare queste righe estranee usando gli argomenti `skip` e `n_max`, ma raccomandiamo di usare i range di celle.
In Excel, la cella in alto a sinistra è `A1`.
Mentre ti sposti attraverso le colonne verso destra, l'etichetta della cella si sposta giù nell'alfabeto, cioè
`B1`, `C1`, ecc.
E mentre ti sposti giù per una colonna, il numero nell'etichetta della cella aumenta, cioè
`A2`, `A3`, ecc.

Qui i dati che vogliamo leggere iniziano nella cella `A5` e finiscono nella cella `F15`.
Nella notazione del foglio di calcolo, questo è `A5:F15`, che forniamo all'argomento `range`:

```{r}
read_excel(deaths_path, range = "A5:F15")
```

### Tipi di dati

Nei file CSV, tutti i valori sono stringhe.
Questo non è particolarmente fedele ai dati, ma è semplice: tutto è una stringa.

I dati sottostanti nei fogli di calcolo Excel sono più complessi.
Una cella può essere una di quattro cose:

-   Un booleano, come `TRUE`, `FALSE`, o `NA`.

-   Un numero, come "10" o "10.5".

-   Un datetime, che può anche includere l'ora come "11/1/21" o "11/1/21 3:00 PM".

-   Una stringa di testo, come "ten".

Quando lavori con dati di fogli di calcolo, è importante tenere a mente che i dati sottostanti possono essere molto diversi da quello che vedi nella cella.
Per esempio, Excel non ha nozione di un intero.
Tutti i numeri sono memorizzati come punti flottanti, ma puoi scegliere di visualizzare i dati con un numero personalizzabile di punti decimali.
Similmente, le date sono in realtà memorizzate come numeri, specificamente il numero di secondi dal 1° gennaio 1970.
Puoi personalizzare come visualizzi la data applicando la formattazione in Excel.
Confusamente, è anche possibile avere qualcosa che sembra un numero ma è in realtà una stringa (es., digita `'10` in una cella in Excel).

Queste differenze tra come i dati sottostanti sono memorizzati vs. come vengono visualizzati possono causare sorprese quando i dati sono caricati in R.
Di default readxl indovinerà il tipo di dati in una data colonna.
Un flusso di lavoro raccomandato è lasciare che readxl indovini i tipi di colonna, confermare che sei soddisfatto dei tipi di colonna indovinati, e se no, tornare indietro e re-importare specificando `col_types` come mostrato in @sec-reading-spreadsheets-excel.

Un'altra sfida è quando hai una colonna nel tuo foglio di calcolo Excel che ha un mix di questi tipi, es., alcune celle sono numeriche, altre testo, altre date.
Quando importi i dati in R readxl deve prendere alcune decisioni.
In questi casi puoi impostare il tipo per questa colonna a `"list"`, che caricherà la colonna come una lista di vettori di lunghezza 1, dove il tipo di ogni elemento del vettore è indovinato.

::: callout-note
A volte i dati sono memorizzati in modi più esotici, come il colore dello sfondo della cella, o se il testo è grassetto o no.
In questi casi, potresti trovare utile il [pacchetto tidyxl](https://nacnudus.github.io/tidyxl/).
Vedi <https://nacnudus.github.io/spreadsheet-munging-strategies/> per di più sulle strategie per lavorare con dati non tabulari da Excel.
:::

### Scrivere in Excel {#sec-writing-to-excel}

Creiamo un piccolo data frame che possiamo poi scrivere.
Nota che `item` è un fattore e `quantity` è un intero.

```{r}
bake_sale <- tibble(
  item     = factor(c("brownie", "cupcake", "cookie")),
  quantity = c(10, 5, 8)
)

bake_sale
```

Puoi scrivere dati di nuovo su disco come file Excel usando la funzione `write_xlsx()` dal [pacchetto writexl](https://docs.ropensci.org/writexl/):

```{r}
#| eval: false

write_xlsx(bake_sale, path = "data/bake-sale.xlsx")
```

@fig-bake-sale-excel mostra come appaiono i dati in Excel.
Nota che i nomi delle colonne sono inclusi e in grassetto.
Questi possono essere disattivati impostando gli argomenti `col_names` e `format_headers` a `FALSE`.

```{r}
#| label: fig-bake-sale-excel
#| echo: false
#| fig-width: 5
#| fig-cap: |
#|   Foglio di calcolo chiamato bake-sale.xlsx in Excel.
#| fig-alt: |
#|   Data frame bake sale creato in precedenza in Excel.
knitr::include_graphics("screenshots/import-spreadsheets-bake-sale.png")
```

Proprio come leggere da un CSV, le informazioni sul tipo di dati vengono perse quando rileggiamo i dati.
Questo rende i file Excel inaffidabili anche per il caching di risultati intermedi.
Per alternative, vedi @sec-writing-to-a-file.

```{r}
read_excel("data/bake-sale.xlsx")
```

### Output formattato

Il pacchetto writexl è una soluzione leggera per scrivere un semplice foglio di calcolo Excel, ma se sei interessato a funzionalità aggiuntive come scrivere in fogli all'interno di un foglio di calcolo e styling, vorrai usare il [pacchetto openxlsx](https://ycphs.github.io/openxlsx).
Non entreremo nei dettagli dell'uso di questo pacchetto qui, ma raccomandiamo di leggere <https://ycphs.github.io/openxlsx/articles/Formatting.html> per una discussione estesa su ulteriori funzionalità di formattazione per dati scritti da R a Excel con openxlsx.

Nota che questo pacchetto non fa parte del tidyverse quindi le funzioni e i flussi di lavoro potrebbero sembrare non familiari.
Per esempio, i nomi delle funzioni sono camelCase, funzioni multiple non possono essere composte in pipeline, e gli argomenti sono in un ordine diverso da quello che tendono ad essere nel tidyverse.
Tuttavia, questo va bene.
Mentre il tuo apprendimento e uso di R si espande al di fuori di questo libro incontrerai molti stili diversi usati in vari pacchetti R che potresti usare per raggiungere obiettivi specifici in R.
Un buon modo per familiarizzare con lo stile di codifica usato in un nuovo pacchetto è eseguire gli esempi forniti nella documentazione delle funzioni per avere un'idea della sintassi e dei formati di output così come leggere qualsiasi vignette che potrebbe venire con il pacchetto.

### Esercizi

1.  In un file Excel, crea il seguente dataset e salvalo come `survey.xlsx`.
    In alternativa, puoi scaricarlo come file Excel da [qui](https://docs.google.com/spreadsheets/d/1yc5gL-a2OOBr8M7B3IsDNX5uR17vBHOyWZq6xSTG2G8).

    ```{r}
    #| echo: false
    #| fig-width: 4
    #| fig-alt: |
    #|   Un foglio di calcolo con 3 colonne (group, subgroup, e id) e 12 righe. 
    #|   La colonna group ha due valori: 1 (che copre 7 righe unite) e 2 
    #|   (che copre 5 righe unite). La colonna subgroup ha quattro valori: A 
    #|   (che copre 3 righe unite), B (che copre 4 righe unite), A (che copre 2 
    #|   righe unite), e B (che copre 3 righe unite). La colonna id ha dodici 
    #|   valori, numeri da 1 a 12.
    knitr::include_graphics("screenshots/import-spreadsheets-survey.png")
    ```

    Poi, leggilo in R, con `survey_id` come variabile carattere e `n_pets` come variabile numerica.

    ```{r}
    #| echo: false
    read_excel("data/survey.xlsx", na = c("", "N/A"), col_types = c("text", "text")) |>
      mutate(
        n_pets = case_when(
          n_pets == "none" ~ "0",
          n_pets == "two"  ~ "2",
          TRUE             ~ n_pets
        ),
        n_pets = as.numeric(n_pets)
      )
    ```

2.  In un altro file Excel, crea il seguente dataset e salvalo come `roster.xlsx`.
    In alternativa, puoi scaricarlo come file Excel da [qui](https://docs.google.com/spreadsheets/d/1LgZ0Bkg9d_NK8uTdP2uHXm07kAlwx8-Ictf8NocebIE).

    ```{r}
    #| echo: false
    #| fig-width: 4
    #| fig-alt: |
    #|   Un foglio di calcolo con 3 colonne (group, subgroup, e id) e 12 righe. La 
    #|   colonna group ha due valori: 1 (che copre 7 righe unite) e 2 (che copre 
    #|   5 righe unite). La colonna subgroup ha quattro valori: A (che copre 3 righe unite), 
    #|   B (che copre 4 righe unite), A (che copre 2 righe unite), e B 
    #|   (che copre 3 righe unite). La colonna id ha dodici valori, numeri da 1 
    #|   a 12.
    knitr::include_graphics("screenshots/import-spreadsheets-roster.png")
    ```

    Poi, leggilo in R.
    Il data frame risultante dovrebbe essere chiamato `roster` e dovrebbe apparire come segue.

    ```{r}
    #| echo: false
    #| message: false
    read_excel("data/roster.xlsx") |>
      fill(group, subgroup) |>
      print(n = 12)
    ```

3.  In un nuovo file Excel, crea il seguente dataset e salvalo come `sales.xlsx`.
    In alternativa, puoi scaricarlo come file Excel da [qui](https://docs.google.com/spreadsheets/d/1oCqdXUNO8JR3Pca8fHfiz_WXWxMuZAp3YiYFaKze5V0).

    ```{r}
    #| echo: false
    #| fig-alt: |
    #|   Un foglio di calcolo con 2 colonne e 13 righe. Le prime due righe hanno testo 
    #|   contenente informazioni sul foglio. La riga 1 dice "Questo file contiene
    #|   informazioni sulle vendite". La riga 2 dice "I dati sono organizzati per nome 
    #|   del marchio, e per ogni marchio, abbiamo il numero ID dell'articolo venduto, 
    #|   e quanti ne sono stati venduti.". Poi ci sono due righe vuote, e poi 9 righe di dati.
    knitr::include_graphics("screenshots/import-spreadsheets-sales.png")
    ```

    a\.
    Leggi `sales.xlsx` e salvalo come `sales`.
    Il data frame dovrebbe apparire come segue, con `id` e `n` come nomi delle colonne e con 9 righe.

    ```{r}
    #| echo: false
    #| message: false
    read_excel("data/sales.xlsx", skip = 3, col_names = c("id", "n")) |>
      print(n = 9)
    ```

    b\.
    Modifica ulteriormente `sales` per ottenerlo nel seguente formato tidy con tre colonne (`brand`, `id`, e `n`) e 7 righe di dati.
    Nota che `id` e `n` sono numeriche, `brand` è una variabile carattere.

    ```{r}
    #| echo: false
    #| message: false
    read_excel("data/sales.xlsx", skip = 3, col_names = c("id", "n")) |>
      mutate(brand = if_else(str_detect(id, "Brand"), id, NA)) |>
      fill(brand) |>
      filter(n != "n") |>
      relocate(brand) |>
      mutate(
        id = as.numeric(id),
        n = as.numeric(n)
      ) |>
      print(n = 7)
    ```

4.  Ricrea il data frame `bake_sale`, scrivilo in un file Excel usando la funzione `write.xlsx()` dal pacchetto openxlsx.

5.  In @sec-data-import hai imparato la funzione `janitor::clean_names()` per trasformare i nomi delle colonne in snake case.
    Leggi il file `students.xlsx` che abbiamo introdotto in precedenza in questa sezione e usa questa funzione per "pulire" i nomi delle colonne.

6.  Cosa succede se provi a leggere un file con estensione `.xlsx` con `read_xls()`?

## Google Sheets

Google Sheets è un altro programma per fogli di calcolo ampiamente utilizzato.
È gratuito e basato sul web.
Proprio come con Excel, in Google Sheets i dati sono organizzati in fogli di lavoro (chiamati anche sheets) all'interno di file di fogli di calcolo.

### Prerequisiti

Questa sezione si concentrerà anche sui fogli di calcolo, ma questa volta caricherai dati da un Google Sheet con il pacchetto **googlesheets4**.
Anche questo pacchetto non è nel core del tidyverse, devi caricarlo esplicitamente.

```{r}
library(googlesheets4)
library(tidyverse)
```

Una nota veloce sul nome del pacchetto: googlesheets4 usa v4 della [Sheets API v4](https://developers.google.com/sheets/api/) per fornire un'interfaccia R a Google Sheets, da qui il nome.

### Iniziare

La funzione principale del pacchetto googlesheets4 è `read_sheet()`, che legge un Google Sheet da un URL o un file id.
Questa funzione è conosciuta anche col nome `range_read()`.

Puoi anche creare un foglio completamente nuovo con `gs4_create()` o scrivere in un foglio esistente con `sheet_write()` e compagni.

In questa sezione lavoreremo con gli stessi dataset di quelli nella sezione Excel per evidenziare somiglianze e differenze tra i flussi di lavoro per leggere dati da Excel e Google Sheets.
I pacchetti readxl e googlesheets4 sono entrambi progettati per imitare la funzionalità del pacchetto readr, che fornisce la funzione `read_csv()` che hai visto in @sec-data-import.
Quindi, molti dei compiti possono essere realizzati semplicemente sostituendo `read_excel()` con `read_sheet()`.
Tuttavia vedrai anche che Excel e Google Sheets non si comportano esattamente nello stesso modo, quindi altri compiti potrebbero richiedere ulteriori aggiornamenti alle chiamate di funzione.

### Leggere Google Sheets

@fig-students-googlesheets mostra come appare in Google Sheets il foglio di calcolo che leggeremo in R.
Questo è lo stesso dataset di @fig-students-excel, tranne che è memorizzato in un Google Sheet invece che in Excel.

```{r}
#| label: fig-students-googlesheets
#| echo: false
#| fig-cap: |
#|   Google Sheet chiamato students in una finestra del browser.
#| fig-alt: |
#|   Uno sguardo al foglio di calcolo students in Google Sheets. Il foglio di calcolo contiene 
#|   informazioni su 6 studenti, il loro ID, nome completo, cibo preferito, piano pasti, 
#|   ed età.
knitr::include_graphics("screenshots/import-googlesheets-students.png")
```

Il primo argomento di `read_sheet()` è l'URL del file da leggere, e restituisce un tibble:\
<https://docs.google.com/spreadsheets/d/1V1nPp1tzOuutXFLb3G9Eyxi3qxeEhnOXUzL5_BcCQ0w>.
Questi URL non sono piacevoli con cui lavorare, quindi spesso vorrai identificare un foglio tramite il suo ID.

```{r}
gs4_deauth()
```

```{r}
students_sheet_id <- "1V1nPp1tzOuutXFLb3G9Eyxi3qxeEhnOXUzL5_BcCQ0w"
students <- read_sheet(students_sheet_id)
students
```

Proprio come abbiamo fatto con `read_excel()`, possiamo fornire nomi di colonne, stringhe NA, e tipi di colonne a `read_sheet()`.

```{r}
students <- read_sheet(
  students_sheet_id,
  col_names = c("student_id", "full_name", "favourite_food", "meal_plan", "age"),
  skip = 1,
  na = c("", "N/A"),
  col_types = "dcccc"
)

students
```

Nota che abbiamo definito i tipi di colonne un po' diversamente qui, usando codici brevi.
Per esempio, "dcccc" sta per "double, character, character, character, character".

È anche possibile leggere singoli fogli da Google Sheets.
Leggiamo il foglio "Torgersen Island" dal [Google Sheet penguins](https://pos.it/r4ds-penguins):

```{r}
penguins_sheet_id <- "1aFu8lnD_g0yjF5O-K6SFgSEWiHPpgvFCF0NY9D6LXnY"
read_sheet(penguins_sheet_id, sheet = "Torgersen Island")
```

Puoi ottenere una lista di tutti i fogli all'interno di un Google Sheet con `sheet_names()`:

```{r}
sheet_names(penguins_sheet_id)
```

Infine, proprio come con `read_excel()`, possiamo leggere una porzione di un Google Sheet definendo un `range` in `read_sheet()`.
Nota che stiamo anche usando la funzione `gs4_example()` sotto per localizzare un Google Sheet di esempio che viene con il pacchetto googlesheets4.

```{r}
deaths_url <- gs4_example("deaths")
deaths <- read_sheet(deaths_url, range = "A5:F15")
deaths
```

### Scrivere in Google Sheets

Puoi scrivere da R a Google Sheets con `write_sheet()`.
Il primo argomento è il data frame da scrivere, e il secondo argomento è il nome (o altro identificatore) del Google Sheet in cui scrivere:

```{r}
#| eval: false
write_sheet(bake_sale, ss = "bake-sale")
```

Se vuoi scrivere i tuoi dati in un foglio di lavoro specifico all'interno di un Google Sheet, puoi specificarlo anche con l'argomento `sheet`.

```{r}
#| eval: false
write_sheet(bake_sale, ss = "bake-sale", sheet = "Sales")
```

### Autenticazione

Mentre puoi leggere da un Google Sheet pubblico senza autenticarti con il tuo account Google e con `gs4_deauth()`, leggere un foglio privato o scrivere in un foglio richiede autenticazione così che googlesheets4 possa visualizzare e gestire i *tuoi* Google Sheets.

Quando tenti di leggere un foglio che richiede autenticazione, googlesheets4 ti indirizzerà a un browser web con un prompt per accedere al tuo account Google e concedere il permesso di operare per tuo conto con Google Sheets.
Tuttavia, se vuoi specificare un account Google specifico, scope di autenticazione, ecc. puoi farlo con `gs4_auth()`, es., `gs4_auth(email = "mine@example.com")`, che forzerà l'uso di un token associato a un email specifico.
Per ulteriori dettagli di autenticazione, raccomandiamo di leggere la documentazione vignette auth di googlesheets4: <https://googlesheets4.tidyverse.org/articles/auth.html>.

### Esercizi

1.  Leggi il dataset `students` dal capitolo precedente da Excel e anche da Google Sheets, senza argomenti aggiuntivi forniti alle funzioni `read_excel()` e `read_sheet()`.
    I data frame risultanti in R sono esattamente gli stessi?
    Se no, come sono diversi?

2.  Leggi il Google Sheet intitolato survey da <https://pos.it/r4ds-survey>, con `survey_id` come variabile carattere e `n_pets` come variabile numerica.

3.  Leggi il Google Sheet intitolato roster da <https://pos.it/r4ds-roster>.
    Il data frame risultante dovrebbe essere chiamato `roster` e dovrebbe apparire come segue.

    ```{r}
    #| echo: false
    #| message: false
    read_sheet("https://docs.google.com/spreadsheets/d/1LgZ0Bkg9d_NK8uTdP2uHXm07kAlwx8-Ictf8NocebIE/") |>
      fill(group, subgroup) |>
      print(n = 12)
    ```

## Riassunto

Microsoft Excel e Google Sheets sono due dei sistemi di fogli di calcolo più popolari.
Essere in grado di interagire con dati memorizzati in file Excel e Google Sheets direttamente da R è un superpotere!
In questo capitolo hai imparato come leggere dati in R da fogli di calcolo da Excel con `read_excel()` dal pacchetto readxl e da Google Sheets con `read_sheet()` dal pacchetto googlesheets4.
Queste funzioni lavorano molto similmente tra loro e hanno argomenti simili per specificare nomi di colonne, stringhe NA, righe da saltare in cima al file che stai leggendo, ecc.
Inoltre, entrambe le funzioni rendono possibile anche leggere un singolo foglio da un foglio di calcolo.

D'altra parte, scrivere in un file Excel richiede un pacchetto e funzione diversi (`writexl::write_xlsx()`) mentre puoi scrivere in un Google Sheet con il pacchetto googlesheets4, con `write_sheet()`.

Nel prossimo capitolo, imparerai su una fonte di dati diversa e come leggere dati da quella fonte in R: database.