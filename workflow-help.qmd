# Workflow: ottenere aiuto {#sec-workflow-ottenere-aiuto}

```{r}
#| echo: false
source("_common.R")
```

Questo libro non è un'isola; non esiste una singola risorsa che ti permetta di padroneggiare R.
Man mano che inizi ad applicare le tecniche descritte in questo libro ai tuoi dati, ti troverai presto di fronte a domande alle quali non forniamo risposte.
Questa sezione descrive alcuni suggerimenti su come ottenere aiuto e continuare a imparare.

## Google è il tuo amico

Se ti ritrovi in difficoltà, inizia con Google.
In genere, aggiungere "R" a una query è sufficiente per restringere i risultati a quelli pertinenti: se la ricerca non risulta utile, spesso significa che non ci sono risultati specifici per R disponibili.
Inoltre, aggiungere i nomi dei pacchetti, come "tidyverse" o "ggplot2", aiuterà a restringere i risultati a codice che ti sembrerà più familiare, ad esempio: "come fare un boxplot in R" contro "come fare un boxplot in R con ggplot2".
Google è particolarmente utile per i messaggi di errore.
Se ricevi un messaggio di errore e non hai idea di cosa significhi, prova a cercarlo su Google!
È probabile che qualcun altro sia già stato confuso da esso in passato, e ci sarà aiuto da qualche parte sul web.
(Se il messaggio di errore non è in inglese, esegui `Sys.setenv(LANGUAGE = "en")` e riesegui il codice; è più probabile trovare aiuto per i messaggi di errore in inglese.)

Se Google non ti aiuta, prova [Stack Overflow](https://stackoverflow.com).
Inizia dedicando un po' di tempo a cercare una risposta esistente, includendo `[R]`, per limitare la ricerca a domande e risposte relative a R.

## Creare un reprex

Se la tua ricerca su Google non trova nulla di utile, è davvero una buona idea preparare un **reprex**, abbreviazione di **repr**oducible **ex**ample.
Un buon reprex rende più facile per gli altri aiutarti, e spesso scoprirai da solo qual è il problema durante il processo di creazione.
Ci sono due aspetti nella creazione di un reprex:

- Prima di tutto, devi rendere il tuo codice riproducibile.
  Questo significa che devi includere tutto, ad esempio le chiamate a `library()` e la creazione di tutti gli oggetti necessari.
  Il modo più semplice per assicurarti di aver fatto tutto ciò è utilizzare il pacchetto reprex.

- In secondo luogo, devi renderlo minimale.
  Rimuovi tutto ciò che non è direttamente collegato al tuo problema.
  Questo di solito implica creare un oggetto R molto più piccolo e semplice rispetto a quello che stai utilizzando nella realtà, oppure usare dati predefiniti.

Sembra molto lavoro!
E può esserlo, ma porta grandi benefici:

- L'80% delle volte, creare un reprex eccellente rivela la causa del tuo problema.
  È sorprendente come il processo di scrivere un esempio autonomo e minimale ti permetta spesso di risolvere il tuo stesso problema.

- Nel restante 20% delle volte, avrai catturato l'essenza del tuo problema in modo tale che sia facile per gli altri esaminarlo.
  Questo migliora notevolmente le possibilità di ottenere aiuto!

Quando crei un reprex manualmente, è facile trascurare qualcosa accidentalmente, il che significa che il tuo codice potrebbe non essere eseguibile su un altro computer.
Evita questo problema utilizzando il pacchetto reprex, che fa parte del tidyverse.
Supponiamo che tu copi questo codice negli appunti (oppure, su RStudio Server o Cloud, lo selezioni):

```{r}
#| eval: false
y <- 1:4
mean(y)
```

Poi chiama `reprex()`, il cui output predefinito è formattato per GitHub:

``` r
reprex::reprex()
```

Una bella anteprima HTML verrà visualizzata nel Viewer di RStudio (se usi RStudio) oppure nel tuo browser predefinito.
Il reprex viene automaticamente copiato negli appunti (su RStudio Server o Cloud, dovrai copiarlo manualmente):

````         
``` r
y <- 1:4
mean(y)
#> [1] 2.5
```
````

Questo testo è formattato in uno stile particolare, chiamato Markdown, che può essere incollato in siti come StackOverflow o GitHub, i quali lo interpreteranno automaticamente come codice.
Ecco come quel Markdown verrebbe visualizzato su GitHub:

```{r}
#| eval: false
y <- 1:4
mean(y)
#> [1] 2.5
```

Chiunque può copiare, incollare ed eseguire questo codice immediatamente.

Ci sono tre cose che devi includere per rendere il tuo esempio riproducibile: pacchetti necessari, dati e codice.

1.  **Pacchetti**: dovrebbero essere caricati in cima allo script, così da rendere evidente quali sono necessari per l'esempio.
    Questo è un buon momento per verificare di usare l'ultima versione di ciascun pacchetto; potresti aver scoperto un bug che è stato corretto dopo l'installazione o l'ultimo aggiornamento.
    Per i pacchetti del tidyverse, il modo più semplice per verificare è eseguire `tidyverse_update()`.

2.  Il modo più semplice per includere **dati** è utilizzare `dput()` per generare il codice R necessario alla loro ricreazione.
    Ad esempio, per ricreare il dataset `mtcars` in R, segui questi passaggi:

    1. Esegui `dput(mtcars)` in R
    2. Copia l'output
    3. In reprex, digita `mtcars <-` e poi incolla.
    
    Cerca di utilizzare il sottoinsieme più piccolo dei tuoi dati che riveli comunque il problema.

3.  Dedica un po' di tempo per assicurarti che il tuo **codice** sia facilmente leggibile dagli altri:
    - Assicurati di aver usato spazi e che i nomi delle variabili siano concisi ma informativi.
    - Usa commenti per indicare dove sorge il problema.
    - Fai del tuo meglio per rimuovere tutto ciò che non è correlato al problema.
    
    Più il tuo codice è breve, più è facile da comprendere e da correggere.

Termina verificando di aver creato effettivamente un esempio riproducibile, avviando una nuova sessione R e copiando-incollando il tuo script.
Creare reprexes non è banale, e ci vorrà pratica per imparare a realizzare esempi davvero minimali e di qualità.
Tuttavia, imparare a porre domande includendo il codice, e dedicare tempo a renderlo riproducibile, continuerà a ripagare nel tempo man mano che impari e padroneggi R.

## Investire in te stesso

Dovresti anche dedicare del tempo a prepararti a risolvere i problemi prima che si presentino.
Investire un po' di tempo ogni giorno per imparare R porterà grandi benefici nel lungo termine.
Un modo per farlo è seguire ciò che il team del tidyverse sta facendo sul [blog del tidyverse](https://www.tidyverse.org/blog/).
Per rimanere aggiornato con la community R in senso lato, consigliamo di leggere [R Weekly](https://rweekly.org): è una collaborazione comunitaria che raccoglie le notizie più interessanti nel mondo R ogni settimana.

## Riepilogo

Questo capitolo conclude la parte "Whole Game" del libro.
Hai appena visto le parti più importanti del processo di data science: visualizzazione, trasformazione, tidying e importazione.
Ora hai una visione d'insieme dell'intero processo, e iniziamo ad approfondire i dettagli dei singoli elementi.
La parte successiva del libro, "Visualize", approfondisce la grammatica dei grafici e la creazione di visualizzazioni dei dati con ggplot2, mostra come utilizzare gli strumenti appresi finora per eseguire un'analisi esplorativa dei dati, e introduce buone pratiche per creare grafici a scopo comunicativo.
