# Importazione dati {#sec-data-import}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

Lavorare con dati forniti dai pacchetti R è un ottimo modo per imparare gli strumenti di data science, ma a un certo punto vorrai applicare quello che hai imparato ai tuoi dati.
In questo capitolo, imparerai le basi della lettura di file di dati in R.

Specificamente, questo capitolo si concentrerà sulla lettura di file rettangolari di testo semplice.
Inizieremo con consigli pratici per gestire caratteristiche come nomi delle colonne, tipi, e dati mancanti.
Poi imparerai come leggere dati da file multipli contemporaneamente e scrivere dati da R a un file.
Infine, imparerai come creare manualmente data frame in R.

### Prerequisiti

In questo capitolo, imparerai come caricare file flat in R con il pacchetto **readr**, che fa parte del tidyverse principale.

```{r}
#| label: setup
#| message: false
library(tidyverse)
```

## Leggere dati da un file

Per iniziare, ci concentreremo sul tipo di file di dati rettangolari più comune: CSV, che è l'abbreviazione di comma-separated values (valori separati da virgola).
Ecco come appare un semplice file CSV.
La prima riga, comunemente chiamata riga di intestazione, fornisce i nomi delle colonne, e le seguenti sei righe forniscono i dati.
Le colonne sono separate, cioè delimitate, da virgole.

```{r}
#| echo: false
#| message: false
#| comment: ""
read_lines("data/students.csv") |> cat(sep = "\n")
```

@tbl-students-table mostra una rappresentazione degli stessi dati come una tabella.

```{r}
#| label: tbl-students-table
#| echo: false
#| message: false
#| tbl-cap: Dati dal file students.csv come una tabella.
read_csv("data/students.csv") |>
  knitr::kable()
```

Possiamo leggere questo file in R usando `read_csv()`.
Il primo argomento è il più importante: il percorso al file.
Puoi pensare al percorso come l'indirizzo del file: il file si chiama `students.csv` e vive nella cartella `data`.

```{r}
#| message: true
students <- read_csv("data/students.csv")
```

Il codice sopra funzionerà se hai il file `students.csv` in una cartella `data` nel tuo progetto.
Puoi scaricare il file `students.csv` da <https://pos.it/r4ds-students-csv> o puoi leggerlo direttamente da quell'URL con:

```{r}
#| eval: false
students <- read_csv("https://pos.it/r4ds-students-csv")
```

Quando esegui `read_csv()`, stampa un messaggio che ti dice il numero di righe e colonne di dati, il delimitatore che è stato usato, e le specifiche delle colonne (nomi delle colonne organizzati per il tipo di dati che la colonna contiene).
Stampa anche alcune informazioni su come recuperare la specifica completa delle colonne e come silenziare questo messaggio.
Questo messaggio è una parte integrale di readr, e ci torneremo in @sec-col-types.

### Consigli pratici

Una volta che leggi i dati, il primo passo di solito comporta trasformarli in qualche modo per renderli più facili da lavorare nel resto della tua analisi.
Diamo un'altra occhiata ai dati `students` con questo in mente.

```{r}
students
```

Nella colonna `favourite.food`, ci sono un sacco di cibi, e poi la stringa di caratteri `N/A`, che dovrebbe essere stata un vero `NA` che R riconoscerà come "non disponibile".
Questa è qualcosa che possiamo affrontare usando l'argomento `na`.
Per impostazione predefinita, `read_csv()` riconosce solo stringhe vuote (`""`) in questo dataset come `NA`, e vogliamo che riconosca anche la stringa di caratteri `"N/A"`.

```{r}
#| message: false
students <- read_csv("data/students.csv", na = c("N/A", ""))

students
```

Potresti anche notare che le colonne `Student ID` e `Full Name` sono circondate da backticks.
Questo perché contengono spazi, rompendo le regole usuali di R per i nomi delle variabili; sono nomi **non-sintattici**.
Per riferirsi a queste variabili, devi circondarle con backticks, `` ` ``:

```{r}
students |> 
  rename(
    student_id = `Student ID`,
    full_name = `Full Name`
  )
```

Un approccio alternativo è usare `janitor::clean_names()` per usare alcune euristiche per trasformarli tutti in snake case in una volta[^data-import-1].

[^data-import-1]: Il pacchetto [janitor](http://sfirke.github.io/janitor/) non fa parte del tidyverse, ma offre funzioni utili per la pulizia dei dati e funziona bene all'interno di pipeline di dati che usano `|>`.

```{r}
#| message: false
students |> janitor::clean_names()
```

Un altro compito comune dopo aver letto i dati è considerare i tipi di variabile.
Per esempio, `meal_plan` è una variabile categorica con un insieme noto di valori possibili, che in R dovrebbe essere rappresentata come un fattore:

```{r}
students |>
  janitor::clean_names() |>
  mutate(meal_plan = factor(meal_plan))
```

Nota che i valori nella variabile `meal_plan` sono rimasti gli stessi, ma il tipo di variabile denotato sotto il nome della variabile è cambiato da carattere (`<chr>`) a fattore (`<fct>`).
Imparerai di più sui fattori in @sec-factors.

Prima di analizzare questi dati, probabilmente vorrai aggiustare la colonna `age`.
Attualmente, `age` è una variabile carattere perché una delle osservazioni è scritta come `five` invece di un numero `5`.
Discutiamo i dettagli per aggiustare questo problema in @sec-import-spreadsheets.

```{r}
students <- students |>
  janitor::clean_names() |>
  mutate(
    meal_plan = factor(meal_plan),
    age = parse_number(if_else(age == "five", "5", age))
  )

students
```

Una nuova funzione qui è `if_else()`, che ha tre argomenti.
Il primo argomento `test` dovrebbe essere un vettore logico.
Il risultato conterrà il valore del secondo argomento, `yes`, quando `test` è `TRUE`, e il valore del terzo argomento, `no`, quando è `FALSE`.
Qui stiamo dicendo se `age` è la stringa di caratteri `"five"`, rendila `"5"`, e se no lasciala come `age`.
Imparerai di più su `if_else()` e vettori logici in @sec-logicals.

### Altri argomenti

Ci sono un paio di altri argomenti importanti che dobbiamo menzionare, e saranno più facili da dimostrare se prima ti mostriamo un trucco utile: `read_csv()` può leggere stringhe di testo che hai creato e formattato come un file CSV:

```{r}
#| message: false
read_csv(
  "a,b,c
  1,2,3
  4,5,6"
)
```

Di solito, `read_csv()` usa la prima riga dei dati per i nomi delle colonne, che è una convenzione molto comune.
Ma non è raro che alcune righe di metadati siano incluse in cima al file.
Puoi usare `skip = n` per saltare le prime `n` righe o usare `comment = "#"` per eliminare tutte le righe che iniziano con (es.) `#`:

```{r}
#| message: false
read_csv(
  "The first line of metadata
  The second line of metadata
  x,y,z
  1,2,3",
  skip = 2
)

read_csv(
  "# A comment I want to skip
  x,y,z
  1,2,3",
  comment = "#"
)
```

In altri casi, i dati potrebbero non avere nomi delle colonne.
Puoi usare `col_names = FALSE` per dire a `read_csv()` di non trattare la prima riga come intestazioni e invece etichettarle sequenzialmente da `X1` a `Xn`:

```{r}
#| message: false
read_csv(
  "1,2,3
  4,5,6",
  col_names = FALSE
)
```

In alternativa, puoi passare a `col_names` un vettore di caratteri che sarà usato come nomi delle colonne:

```{r}
#| message: false
read_csv(
  "1,2,3
  4,5,6",
  col_names = c("x", "y", "z")
)
```

Questi argomenti sono tutto quello che devi sapere per leggere la maggior parte dei file CSV che incontrerai in pratica.
(Per il resto, dovrai ispezionare attentamente il tuo file `.csv` e leggere la documentazione per i molti altri argomenti di `read_csv()`.)

### Altri tipi di file

Una volta che hai padroneggiato `read_csv()`, usare le altre funzioni di readr è semplice; è solo questione di sapere quale funzione scegliere:

-   `read_csv2()` legge file separati da punto e virgola.
    Questi usano `;` invece di `,` per separare i campi e sono comuni nei paesi che usano `,` come marcatore decimale.

-   `read_tsv()` legge file delimitati da tab.

-   `read_delim()` legge file con qualsiasi delimitatore, tentando di indovinare automaticamente il delimitatore se non lo specifichi.

-   `read_fwf()` legge file a larghezza fissa.
    Puoi specificare i campi per le loro larghezze con `fwf_widths()` o per le loro posizioni con `fwf_positions()`.

-   `read_table()` legge una variazione comune di file a larghezza fissa dove le colonne sono separate da spazio bianco.

-   `read_log()` legge file di log in stile Apache.

### Esercizi

1.  Quale funzione useresti per leggere un file dove i campi erano separati con "\|"?

2.  A parte `file`, `skip`, e `comment`, quali altri argomenti hanno in comune `read_csv()` e `read_tsv()`?

3.  Quali sono gli argomenti più importanti per `read_fwf()`?

4.  A volte le stringhe in un file CSV contengono virgole.
    Per prevenire che causino problemi, devono essere circondate da un carattere di citazione, come `"` o `'`. Per impostazione predefinita, `read_csv()` assume che il carattere di citazione sarà `"`.
    Per leggere il seguente testo in un data frame, quale argomento di `read_csv()` devi specificare?

    ```{r}
    #| eval: false
    "x,y\n1,'a,b'"
    ```

5.  Identifica cosa non va in ognuno dei seguenti file CSV inline.
    Cosa succede quando esegui il codice?

    ```{r}
    #| eval: false
    read_csv("a,b\n1,2,3\n4,5,6")
    read_csv("a,b,c\n1,2\n1,2,3,4")
    read_csv("a,b\n\"1")
    read_csv("a,b\n1,2\na,b")
    read_csv("a;b\n1;3")
    ```

6.  Pratica il riferimento a nomi non-sintattici nel seguente data frame:

    a.  Estraendo la variabile chiamata `1`.
    b.  Tracciando uno scatterplot di `1` vs. `2`.
    c.  Creando una nuova colonna chiamata `3`, che è `2` diviso `1`.
    d.  Rinominando le colonne in `one`, `two`, e `three`.

    ```{r}
    annoying <- tibble(
      `1` = 1:10,
      `2` = `1` * 2 + rnorm(length(`1`))
    )
    ```

## Controllare i tipi di colonna {#sec-col-types}

Un file CSV non contiene informazioni sul tipo di ogni variabile (cioè se è un logico, numero, stringa, ecc.), quindi readr cercherà di indovinare il tipo.
Questa sezione descrive come funziona il processo di indovinare, come risolvere alcuni problemi comuni che causano il fallimento, e, se necessario, come fornire tu stesso i tipi di colonna.
Infine, menzioneremo alcune strategie generali che sono utili se readr sta fallendo catastroficamente e hai bisogno di ottenere più intuizione sulla struttura del tuo file.

### Indovinare i tipi

readr usa un'euristica per capire i tipi di colonna.
Per ogni colonna, estrae i valori di 1.000[^data-import-2] righe distribuite uniformemente dalla prima riga all'ultima, ignorando i valori mancanti.
Poi lavora attraverso le seguenti domande:

[^data-import-2]: Puoi sovrascrivere il default di 1000 con l'argomento `guess_max`.

-   Contiene solo `F`, `T`, `FALSE`, o `TRUE` (ignorando maiuscole/minuscole)? Se sì, è un logico.
-   Contiene solo numeri (es., `1`, `-4.5`, `5e6`, `Inf`)? Se sì, è un numero.
-   Corrisponde allo standard ISO8601? Se sì, è una data o data-ora. (Torneremo su date-ore più in dettaglio in @sec-creating-datetimes).
-   Altrimenti, deve essere una stringa.

Puoi vedere quel comportamento in azione in questo semplice esempio:

```{r}
#| message: false
read_csv("
  logical,numeric,date,string
  TRUE,1,2021-01-15,abc
  false,4.5,2021-02-15,def
  T,Inf,2021-02-16,ghi
")
```

Questa euristica funziona bene se hai un dataset pulito, ma nella vita reale, incontrerai una selezione di fallimenti strani e belli.

### Valori mancanti, tipi di colonna, e problemi

Il modo più comune in cui la rilevazione delle colonne fallisce è che una colonna contiene valori inaspettati, e ottieni una colonna carattere invece di un tipo più specifico.
Una delle cause più comuni per questo è un valore mancante, registrato usando qualcosa di diverso dal `NA` che readr si aspetta.

Take this simple 1 column CSV file as an example:

```{r}
simple_csv <- "
  x
  10
  .
  20
  30"
```

If we read it without any additional arguments, `x` becomes a character column:

```{r}
#| message: false
read_csv(simple_csv)
```

In this very small case, you can easily see the missing value `.`.
But what happens if you have thousands of rows with only a few missing values represented by `.`s sprinkled among them?
One approach is to tell readr that `x` is a numeric column, and then see where it fails.
You can do that with the `col_types` argument, which takes a named list where the names match the column names in the CSV file:

```{r}
df <- read_csv(
  simple_csv, 
  col_types = list(x = col_double())
)
```

Now `read_csv()` reports that there was a problem, and tells us we can find out more with `problems()`:

```{r}
problems(df)
```

This tells us that there was a problem in row 3, col 1 where readr expected a double but got a `.`.
That suggests this dataset uses `.` for missing values.
So then we set `na = "."`, the automatic guessing succeeds, giving us the numeric column that we want:

```{r}
#| message: false
read_csv(simple_csv, na = ".")
```

### Tipi di colonna

readr fornisce un totale di nove tipi di colonna da usare:

-   `col_logical()` e `col_double()` leggono logici e numeri reali. Sono relativamente raramente necessari (eccetto come sopra), dato che readr di solito li indovinerà per te.
-   `col_integer()` legge interi. Raramente distinguiamo interi e double in questo libro perché sono funzionalmente equivalenti, ma leggere interi esplicitamente può occasionalmente essere utile perché occupano metà della memoria dei double.
-   `col_character()` legge stringhe. Questo può essere utile da specificare esplicitamente quando hai una colonna che è un identificatore numerico, cioè lunghe serie di cifre che identificano un oggetto ma non ha senso applicare operazioni matematiche. Esempi includono numeri di telefono, numeri di previdenza sociale, numeri di carta di credito, ecc.
-   `col_factor()`, `col_date()`, e `col_datetime()` creano fattori, date, e date-ore rispettivamente; imparerai di più su quelli quando arriveremo a quei tipi di dati in @sec-factors e @sec-dates-and-times.
-   `col_number()` è un parser numerico permissivo che ignorerà componenti non-numerici, ed è particolarmente utile per valute. Imparerai di più su questo in @sec-numbers.
-   `col_skip()` salta una colonna quindi non è inclusa nel risultato, che può essere utile per velocizzare la lettura dei dati se hai un grande file CSV e vuoi usare solo alcune delle colonne.

È anche possibile sovrascrivere la colonna predefinita passando da `list()` a `cols()` e specificando `.default`:

```{r}
another_csv <- "
x,y,z
1,2,3"

read_csv(
  another_csv, 
  col_types = cols(.default = col_character())
)
```

Un altro helper utile è `cols_only()` che leggerà solo le colonne che specifichi:

```{r}
read_csv(
  another_csv,
  col_types = cols_only(x = col_character())
)
```

## Leggere dati da file multipli {#sec-readr-directory}

A volte i tuoi dati sono divisi tra file multipli invece di essere contenuti in un singolo file.
Per esempio, potresti avere dati di vendita per mesi multipli, con i dati di ogni mese in un file separato: `01-sales.csv` per gennaio, `02-sales.csv` per febbraio, e `03-sales.csv` per marzo.
With `read_csv()` you can read these data in at once and stack them on top of each other in a single data frame.

```{r}
#| message: false
sales_files <- c("data/01-sales.csv", "data/02-sales.csv", "data/03-sales.csv")
read_csv(sales_files, id = "file")
```

Once again, the code above will work if you have the CSV files in a `data` folder in your project.
You can download these files from <https://pos.it/r4ds-01-sales>, <https://pos.it/r4ds-02-sales>, and <https://pos.it/r4ds-03-sales> or you can read them directly with:

```{r}
#| eval: false
sales_files <- c(
  "https://pos.it/r4ds-01-sales",
  "https://pos.it/r4ds-02-sales",
  "https://pos.it/r4ds-03-sales"
)
read_csv(sales_files, id = "file")
```

The `id` argument adds a new column called `file` to the resulting data frame that identifies the file the data come from.
This is especially helpful in circumstances where the files you're reading in do not have an identifying column that can help you trace the observations back to their original sources.

If you have many files you want to read in, it can get cumbersome to write out their names as a list.
Instead, you can use the base `list.files()` function to find the files for you by matching a pattern in the file names.
You'll learn more about these patterns in @sec-regular-expressions.

```{r}
sales_files <- list.files("data", pattern = "sales\\.csv$", full.names = TRUE)
sales_files
```

## Scrivere su un file {#sec-writing-to-a-file}

readr viene anche con due funzioni utili per scrivere dati di nuovo su disco: `write_csv()` e `write_tsv()`.
Gli argomenti più importanti per queste funzioni sono `x` (il data frame da salvare) e `file` (la posizione dove salvarlo).
Puoi anche specificare come vengono scritti i valori mancanti con `na`, e se vuoi `append` a un file esistente.

```{r}
#| eval: false
write_csv(students, "students.csv")
```

Ora leggiamo quel file csv di nuovo.
Nota che le informazioni sul tipo di variabile che hai appena impostato vengono perse quando salvi in CSV perché stai ricominciando con la lettura da un file di testo semplice di nuovo:

```{r}
#| warning: false
#| message: false
students
write_csv(students, "students-2.csv")
read_csv("students-2.csv")
```

Questo rende i CSV un po' inaffidabili per memorizzare risultati intermedi---devi ricreare la specifica delle colonne ogni volta che carichi.
Ci sono due alternative principali:

1.  `write_rds()` e `read_rds()` sono wrapper uniformi attorno alle funzioni base `readRDS()` e `saveRDS()`.
    Queste memorizzano dati nel formato binario personalizzato di R chiamato RDS.
    Questo significa che quando ricarichi l'oggetto, stai caricando l'*esatto stesso* oggetto R che hai memorizzato.

    ```{r}
    write_rds(students, "students.rds")
    read_rds("students.rds")
    ```

2.  Il pacchetto arrow ti permette di leggere e scrivere file parquet, un formato di file binario veloce che può essere condiviso tra linguaggi di programmazione.
    Torneremo su arrow in maggiore profondità in @sec-arrow.

    ```{r}
    #| eval: false
    library(arrow)
    write_parquet(students, "students.parquet")
    read_parquet("students.parquet")
    #> # A tibble: 6 × 5
    #>   student_id full_name        favourite_food     meal_plan             age
    #>        <dbl> <chr>            <chr>              <fct>               <dbl>
    #> 1          1 Sunil Huffmann   Strawberry yoghurt Lunch only              4
    #> 2          2 Barclay Lynn     French fries       Lunch only              5
    #> 3          3 Jayendra Lyne    NA                 Breakfast and lunch     7
    #> 4          4 Leon Rossini     Anchovies          Lunch only             NA
    #> 5          5 Chidiegwu Dunkel Pizza              Breakfast and lunch     5
    #> 6          6 Güvenç Attila    Ice cream          Lunch only              6
    ```

Parquet tende ad essere molto più veloce di RDS ed è utilizzabile fuori da R, ma richiede il pacchetto arrow.

```{r}
#| include: false
file.remove("students-2.csv")
file.remove("students.rds")
```

## Inserimento dati

A volte dovrai assemblare un tibble "a mano" facendo un po' di inserimento dati nel tuo script R.
Ci sono due funzioni utili per aiutarti a fare questo che differiscono nel fatto che tu disponga il tibble per colonne o per righe.
`tibble()` funziona per colonna:

```{r}
tibble(
  x = c(1, 2, 5), 
  y = c("h", "m", "g"),
  z = c(0.08, 0.83, 0.60)
)
```

Laying out the data by column can make it hard to see how the rows are related, so an alternative is `tribble()`, short for **tr**ansposed t**ibble**, which lets you lay out your data row by row.
`tribble()` is customized for data entry in code: column headings start with `~` and entries are separated by commas.
This makes it possible to lay out small amounts of data in an easy to read form:

```{r}
tribble(
  ~x, ~y, ~z,
  1, "h", 0.08,
  2, "m", 0.83,
  5, "g", 0.60
)
```

## Riassunto

In questo capitolo, hai imparato come caricare file CSV con `read_csv()` e fare il tuo inserimento dati con `tibble()` e `tribble()`.
Hai imparato come funzionano i file csv, alcuni dei problemi che potresti incontrare, e come superarli.
Torneremo sull'importazione dati alcune volte in questo libro: @sec-import-spreadsheets da Excel e Google Sheets, @sec-import-databases ti mostrerà come caricare dati da database, @sec-arrow da file parquet, @sec-rectangling da JSON, e @sec-scraping da siti web.

Siamo quasi alla fine di questa sezione del libro, ma c'è un ultimo argomento importante da coprire: come ottenere aiuto.
Quindi nel prossimo capitolo, imparerai alcuni buoni posti dove cercare aiuto, come creare un reprex per massimizzare le tue possibilità di ottenere buon aiuto, e alcuni consigli generali per tenersi aggiornati con il mondo di R.