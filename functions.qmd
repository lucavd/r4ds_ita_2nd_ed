# Funzioni {#sec-functions}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

Uno dei modi migliori per migliorare la tua portata come data scientist è scrivere funzioni.
Le funzioni ti permettono di automatizzare compiti comuni in un modo più potente e generale del copia-e-incolla.
Scrivere una funzione ha quattro grandi vantaggi rispetto all'uso del copia-e-incolla:

1.  Puoi dare a una funzione un nome evocativo che rende il tuo codice più facile da capire.

2.  Quando i requisiti cambiano, devi aggiornare il codice solo in un posto, invece che in molti.

3.  Elimini la possibilità di fare errori accidentali quando copi e incolli (cioè aggiornare un nome di variabile in un posto, ma non in un altro).

4.  Rende più facile riutilizzare il lavoro da progetto a progetto, aumentando la tua produttività nel tempo.

Una buona regola generale è considerare di scrivere una funzione ogni volta che hai copiato e incollato un blocco di codice più di due volte (cioè ora hai tre copie dello stesso codice).
In questo capitolo, imparerai su tre tipi utili di funzioni:

-   Le funzioni vettoriali prendono uno o più vettori come input e restituiscono un vettore come output.
-   Le funzioni di data frame prendono un data frame come input e restituiscono un data frame come output.
-   Le funzioni di grafico che prendono un data frame come input e restituiscono un grafico come output.

Ognuna di queste sezioni include molti esempi per aiutarti a generalizzare i pattern che vedi.
Questi esempi non sarebbero stati possibili senza l'aiuto delle persone di twitter, e ti incoraggiamo a seguire i link nei commenti per vedere le ispirazioni originali.
Potresti anche voler leggere i tweet motivazionali originali per [funzioni generali](https://twitter.com/hadleywickham/status/1571603361350164486) e [funzioni di grafico](https://twitter.com/hadleywickham/status/1574373127349575680) per vedere ancora più funzioni.

### Prerequisiti

Useremo una varietà di funzioni da tutto il tidyverse.
Useremo anche nycflights13 come fonte di dati familiari da usare con le nostre funzioni.

```{r}
#| message: false
library(tidyverse)
library(nycflights13)
```

## Funzioni vettoriali

Inizieremo con le funzioni vettoriali: funzioni che prendono uno o più vettori e restituiscono un risultato vettoriale.
Ad esempio, dai un'occhiata a questo codice.
Cosa fa?

```{r}
df <- tibble(
  a = rnorm(5),
  b = rnorm(5),
  c = rnorm(5),
  d = rnorm(5),
)

df |> mutate(
  a = (a - min(a, na.rm = TRUE)) / 
    (max(a, na.rm = TRUE) - min(a, na.rm = TRUE)),
  b = (b - min(a, na.rm = TRUE)) / 
    (max(b, na.rm = TRUE) - min(b, na.rm = TRUE)),
  c = (c - min(c, na.rm = TRUE)) / 
    (max(c, na.rm = TRUE) - min(c, na.rm = TRUE)),
  d = (d - min(d, na.rm = TRUE)) / 
    (max(d, na.rm = TRUE) - min(d, na.rm = TRUE)),
)
```

Potresti essere in grado di capire che questo ridimensiona ogni colonna per avere un intervallo da 0 a 1.
Ma hai notato l'errore?
Quando Hadley ha scritto questo codice ha fatto un errore quando ha copiato-e-incollato e ha dimenticato di cambiare una `a` in una `b`.
Prevenire questo tipo di errore è una ragione molto buona per imparare come scrivere funzioni.

### Scrivere una funzione

Per scrivere una funzione devi prima analizzare il tuo codice ripetuto per capire quali parti sono costanti e quali parti variano.
Se prendiamo il codice sopra e lo tiriamo fuori da `mutate()`, è un po' più facile vedere il pattern perché ogni ripetizione è ora una riga:

```{r}
#| eval: false
(a - min(a, na.rm = TRUE)) / (max(a, na.rm = TRUE) - min(a, na.rm = TRUE))
(b - min(b, na.rm = TRUE)) / (max(b, na.rm = TRUE) - min(b, na.rm = TRUE))
(c - min(c, na.rm = TRUE)) / (max(c, na.rm = TRUE) - min(c, na.rm = TRUE))
(d - min(d, na.rm = TRUE)) / (max(d, na.rm = TRUE) - min(d, na.rm = TRUE))  
```

Per rendere questo un po' più chiaro possiamo sostituire la parte che varia con `█`:

```{r}
#| eval: false
(█ - min(█, na.rm = TRUE)) / (max(█, na.rm = TRUE) - min(█, na.rm = TRUE))
```

Per trasformare questo in una funzione hai bisogno di tre cose:

1.  Un **nome**.
    Qui useremo `rescale01` perché questa funzione ridimensiona un vettore per stare tra 0 e 1.

2.  Gli **argomenti**.
    Gli argomenti sono cose che variano tra le chiamate e la nostra analisi sopra ci dice che ne abbiamo solo uno.
    Lo chiameremo `x` perché questo è il nome convenzionale per un vettore numerico.

3.  Il **corpo**.
    Il corpo è il codice che è ripetuto in tutte le chiamate.

Poi crei una funzione seguendo il template:

```{r}
name <- function(arguments) {
  body
}
```

Per questo caso questo porta a:

```{r}
rescale01 <- function(x) {
  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
```

A questo punto potresti testare con alcuni input semplici per assicurarti di aver catturato la logica correttamente:

```{r}
rescale01(c(-10, 0, 10))
rescale01(c(1, 2, 3, NA, 5))
```

Poi puoi riscrivere la chiamata a `mutate()` come:

```{r}
df |> mutate(
  a = rescale01(a),
  b = rescale01(b),
  c = rescale01(c),
  d = rescale01(d),
)
```

(Nel @sec-iteration, imparerai come usare `across()` per ridurre la duplicazione ancora di più così tutto quello di cui hai bisogno è `df |> mutate(across(a:d, rescale01))`).

### Migliorare la nostra funzione

Potresti notare che la funzione `rescale01()` fa del lavoro non necessario --- invece di calcolare `min()` due volte e `max()` una volta potremmo invece calcolare sia il minimo che il massimo in un passo con `range()`:

```{r}
rescale01 <- function(x) {
  rng <- range(x, na.rm = TRUE)
  (x - rng[1]) / (rng[2] - rng[1])
}
```

O potresti provare questa funzione su un vettore che include un valore infinito:

```{r}
x <- c(1:10, Inf)
rescale01(x)
```

Quel risultato non è particolarmente utile quindi potremmo chiedere a `range()` di ignorare i valori infiniti:

```{r}
rescale01 <- function(x) {
  rng <- range(x, na.rm = TRUE, finite = TRUE)
  (x - rng[1]) / (rng[2] - rng[1])
}

rescale01(x)
```

Questi cambiamenti illustrano un beneficio importante delle funzioni: perché abbiamo spostato il codice ripetuto in una funzione, dobbiamo fare il cambiamento solo in un posto.

### Funzioni mutate

Ora che hai l'idea di base delle funzioni, diamo un'occhiata a un mucchio di esempi.
Inizieremo guardando le funzioni "mutate", cioè funzioni che funzionano bene dentro `mutate()` e `filter()` perché restituiscono un output della stessa lunghezza dell'input.

Iniziamo con una variazione semplice di `rescale01()`.
Forse vuoi calcolare il Z-score, ridimensionando un vettore per avere una media di zero e una deviazione standard di uno:

```{r}
z_score <- function(x) {
  (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
}
```

O forse vuoi racchiudere un `case_when()` semplice e dargli un nome utile.
Ad esempio, questa funzione `clamp()` assicura che tutti i valori di un vettore stiano tra un minimo o un massimo:

```{r}
clamp <- function(x, min, max) {
  case_when(
    x < min ~ min,
    x > max ~ max,
    .default = x
  )
}

clamp(1:10, min = 3, max = 7)
```

Ovviamente le funzioni non hanno bisogno di funzionare solo con variabili numeriche.
Potresti voler fare della manipolazione di stringhe ripetuta.
Forse hai bisogno di rendere il primo carattere maiuscolo:

```{r}
first_upper <- function(x) {
  str_sub(x, 1, 1) <- str_to_upper(str_sub(x, 1, 1))
  x
}

first_upper("hello")
```

O forse vuoi rimuovere segni di percentuale, virgole e segni di dollaro da una stringa prima di convertirla in un numero:

```{r}
# https://twitter.com/NVlabormarket/status/1571939851922198530
clean_number <- function(x) {
  is_pct <- str_detect(x, "%")
  num <- x |> 
    str_remove_all("%") |> 
    str_remove_all(",") |> 
    str_remove_all(fixed("$")) |> 
    as.numeric()
  if_else(is_pct, num / 100, num)
}

clean_number("$12,300")
clean_number("45%")
```

A volte le tue funzioni saranno altamente specializzate per un passo di analisi dati.
Ad esempio, se hai un mucchio di variabili che registrano valori mancanti come 997, 998, o 999, potresti voler scrivere una funzione per sostituirli con `NA`:

```{r}
fix_na <- function(x) {
  if_else(x %in% c(997, 998, 999), NA, x)
}
```

Ci siamo concentrati su esempi che prendono un singolo vettore perché pensiamo siano i più comuni.
Ma non c'è ragione per cui la tua funzione non possa prendere input di vettori multipli.

### Funzioni di riassunto

Un'altra famiglia importante di funzioni vettoriali sono le funzioni di riassunto, funzioni che restituiscono un singolo valore da usare in `summarize()`.
A volte questo può essere solo una questione di impostare un argomento di default o due:

```{r}
commas <- function(x) {
  str_flatten(x, collapse = ", ", last = " and ")
}

commas(c("cat", "dog", "pigeon"))
```

O potresti racchiudere un calcolo semplice, come per il coefficiente di variazione, che divide la deviazione standard per la media:

```{r}
cv <- function(x, na.rm = FALSE) {
  sd(x, na.rm = na.rm) / mean(x, na.rm = na.rm)
}

cv(runif(100, min = 0, max = 50))
cv(runif(100, min = 0, max = 500))
```

O forse vuoi solo rendere un pattern comune più facile da ricordare dandogli un nome memorabile:

```{r}
# https://twitter.com/gbganalyst/status/1571619641390252033
n_missing <- function(x) {
  sum(is.na(x))
} 
```

Puoi anche scrivere funzioni con input di vettori multipli.
Ad esempio, forse vuoi calcolare l'errore percentuale assoluto medio per aiutarti a confrontare predizioni del modello con valori reali:

```{r}
# https://twitter.com/neilgcurrie/status/1571607727255834625
mape <- function(actual, predicted) {
  sum(abs((actual - predicted) / actual)) / length(actual)
}
```

::: callout-note
## RStudio

Una volta che inizi a scrivere funzioni, ci sono due scorciatoie di RStudio che sono super utili:

-   Per trovare la definizione di una funzione che hai scritto, posiziona il cursore sul nome della funzione e premi `F2`.

-   Per saltare rapidamente a una funzione, premi `Ctrl + .` per aprire il fuzzy file and function finder e digita le prime lettere del nome della tua funzione.
    Puoi anche navigare a file, sezioni Quarto, e altro, rendendolo uno strumento di navigazione molto utile.
:::

### Esercizi

1.  Esercitati a trasformare i seguenti frammenti di codice in funzioni.
    Pensa a cosa fa ogni funzione.
    Come la chiameresti?
    Di quanti argomenti ha bisogno?

    ```{r}
    #| eval: false
    mean(is.na(x))
    mean(is.na(y))
    mean(is.na(z))

    x / sum(x, na.rm = TRUE)
    y / sum(y, na.rm = TRUE)
    z / sum(z, na.rm = TRUE)

    round(x / sum(x, na.rm = TRUE) * 100, 1)
    round(y / sum(y, na.rm = TRUE) * 100, 1)
    round(z / sum(z, na.rm = TRUE) * 100, 1)
    ```

2.  Nella seconda variante di `rescale01()`, i valori infiniti sono lasciati invariati.
    Puoi riscrivere `rescale01()` così che `-Inf` sia mappato a 0, e `Inf` sia mappato a 1?

3.  Dato un vettore di date di nascita, scrivi una funzione per calcolare l'età in anni.

4.  Scrivi le tue funzioni per calcolare la varianza e l'asimmetria di un vettore numerico.
    Puoi cercare le definizioni su Wikipedia o altrove.

5.  Scrivi `both_na()`, una funzione di riassunto che prende due vettori della stessa lunghezza e restituisce il numero di posizioni che hanno un `NA` in entrambi i vettori.

6.  Leggi la documentazione per capire cosa fanno le seguenti funzioni.
    Perché sono utili anche se sono così brevi?

    ```{r}
    is_directory <- function(x) {
      file.info(x)$isdir
    }
    is_readable <- function(x) {
      file.access(x, 4) == 0
    }
    ```

## Funzioni di data frame

Le funzioni vettoriali sono utili per estrarre codice che è ripetuto dentro un verbo dplyr.
Ma spesso ripeterai anche i verbi stessi, particolarmente dentro una pipeline grande.
Quando ti accorgi di copiare e incollare verbi multipli più volte, potresti pensare di scrivere una funzione di data frame.
Le funzioni di data frame funzionano come i verbi dplyr: prendono un data frame come primo argomento, alcuni argomenti extra che dicono cosa fare con esso, e restituiscono un data frame o un vettore.

Per permetterti di scrivere una funzione che usa verbi dplyr, prima ti introdurremo alla sfida dell'indirezione e come puoi superarla con l'abbracciare, `{{{ }}}`.
Con questa teoria sotto la cintura, ti mostreremo poi un mucchio di esempi per illustrare cosa potresti fare con essa.

### Indirezione e tidy evaluation

Quando inizi a scrivere funzioni che usano verbi dplyr colpisci rapidamente il problema dell'indirezione.
Illustriamo il problema con una funzione molto semplice: `grouped_mean()`.
L'obiettivo di questa funzione è calcolare la media di `mean_var` raggruppata per `group_var`:

```{r}
grouped_mean <- function(df, group_var, mean_var) {
  df |> 
    group_by(group_var) |> 
    summarize(mean(mean_var))
}
```

Se proviamo a usarla, otteniamo un errore:

```{r}
#| error: true
diamonds |> grouped_mean(cut, carat)
```

Per rendere il problema un po' più chiaro, possiamo usare un data frame inventato:

```{r}
df <- tibble(
  mean_var = 1,
  group_var = "g",
  group = 1,
  x = 10,
  y = 100
)

df |> grouped_mean(group, x)
df |> grouped_mean(group, y)
```

Indipendentemente da come chiamiamo `grouped_mean()` fa sempre `df |> group_by(group_var) |> summarize(mean(mean_var))`, invece di `df |> group_by(group) |> summarize(mean(x))` o `df |> group_by(group) |> summarize(mean(y))`.
Questo è un problema di indirezione, e sorge perché dplyr usa **tidy evaluation** per permetterti di riferirsi ai nomi delle variabili dentro il tuo data frame senza alcun trattamento speciale.

La tidy evaluation è fantastica il 95% delle volte perché rende le tue analisi dati molto concise dato che non devi mai dire da quale data frame viene una variabile; è ovvio dal contesto.
Lo svantaggio della tidy evaluation viene quando vogliamo racchiudere codice tidyverse ripetuto in una funzione.
Qui abbiamo bisogno di qualche modo per dire a `group_by()` e `summarize()` di non trattare `group_var` e `mean_var` come il nome delle variabili, ma invece guardare dentro di loro per la variabile che vogliamo veramente usare.

La tidy evaluation include una soluzione a questo problema chiamata **abbracciare** 🤗.
Abbracciare una variabile significa avvolgerla in parentesi graffe così (ad es.) `var` diventa `{{{ var }}}`.
Abbracciare una variabile dice a dplyr di usare il valore memorizzato dentro l'argomento, non l'argomento come nome letterale della variabile.
Un modo per ricordare cosa sta succedendo è pensare a `{{{ }}}` come guardare giù per un tunnel --- `{{{ var }}}` farà in modo che una funzione dplyr guardi dentro `var` piuttosto che cercare una variabile chiamata `var`.

Quindi per far funzionare `grouped_mean()`, dobbiamo circondare `group_var` e `mean_var` con `{{{ }}}`:

```{r}
grouped_mean <- function(df, group_var, mean_var) {
  df |> 
    group_by({{ group_var }}) |> 
    summarize(mean({{ mean_var }}))
}

df |> grouped_mean(group, x)
```

Successo!

### Quando abbracciare? {#sec-embracing}

Quindi la sfida chiave nello scrivere funzioni di data frame è capire quali argomenti hanno bisogno di essere abbracciati.
Fortunatamente, questo è facile perché puoi cercarlo nella documentazione 😄.
Ci sono due termini da cercare nei documenti che corrispondono ai due sottotipi più comuni di tidy evaluation:

-   **Data-masking**: questo è usato in funzioni come `arrange()`, `filter()`, e `summarize()` che calcolano con variabili.

-   **Tidy-selection**: questo è usato per funzioni come `select()`, `relocate()`, e `rename()` che selezionano variabili.

La tua intuizione su quali argomenti usano tidy evaluation dovrebbe essere buona per molte funzioni comuni --- pensa solo se puoi calcolare (ad es., `x + 1`) o selezionare (ad es., `a:x`).

Nelle sezioni seguenti, esploreremo i tipi di funzioni utili che potresti scrivere una volta che capisci l'abbracciare.

### Casi d'uso comuni

Se comunemente esegui lo stesso set di riassunti quando fai esplorazione iniziale dei dati, potresti considerare di racchiuderli in una funzione helper:

```{r}
summary6 <- function(data, var) {
  data |> summarize(
    min = min({{ var }}, na.rm = TRUE),
    mean = mean({{ var }}, na.rm = TRUE),
    median = median({{ var }}, na.rm = TRUE),
    max = max({{ var }}, na.rm = TRUE),
    n = n(),
    n_miss = sum(is.na({{ var }})),
    .groups = "drop"
  )
}

diamonds |> summary6(carat)
```

(Ogni volta che racchiudi `summarize()` in un helper, pensiamo sia buona pratica impostare `.groups = "drop"` per evitare sia il messaggio che lasciare i dati in uno stato non raggruppato.)

La cosa bella di questa funzione è che, perché racchiude `summarize()`, puoi usarla su dati raggruppati:

```{r}
diamonds |> 
  group_by(cut) |> 
  summary6(carat)
```

Inoltre, dato che gli argomenti di summarize sono data-masking, così è l'argomento `var` di `summary6()`.
Questo significa che puoi anche riassumere variabili calcolate:

```{r}
diamonds |> 
  group_by(cut) |> 
  summary6(log10(carat))
```

Per riassumere variabili multiple, dovrai aspettare fino al @sec-across, dove imparerai come usare `across()`.

Un'altra funzione helper popolare di `summarize()` è una versione di `count()` che calcola anche proporzioni:

```{r}
# https://twitter.com/Diabb6/status/1571635146658402309
count_prop <- function(df, var, sort = FALSE) {
  df |>
    count({{ var }}, sort = sort) |>
    mutate(prop = n / sum(n))
}

diamonds |> count_prop(clarity)
```

Questa funzione ha tre argomenti: `df`, `var`, e `sort`, e solo `var` ha bisogno di essere abbracciato perché è passato a `count()` che usa data-masking per tutte le variabili.
Nota che usiamo un valore di default per `sort` così che se l'utente non fornisce il proprio valore sarà di default `FALSE`.

O forse vuoi trovare i valori unici ordinati di una variabile per un sottoinsieme dei dati.
Piuttosto che fornire una variabile e un valore per fare il filtraggio, permetteremo all'utente di fornire una condizione:

```{r}
unique_where <- function(df, condition, var) {
  df |> 
    filter({{ condition }}) |> 
    distinct({{ var }}) |> 
    arrange({{ var }})
}

# Trova tutte le destinazioni a dicembre
flights |> unique_where(month == 12, dest)
```

Qui abbracciamo `condition` perché è passato a `filter()` e `var` perché è passato a `distinct()` e `arrange()`.

Abbiamo fatto tutti questi esempi per prendere un data frame come primo argomento, ma se stai lavorando ripetutamente con gli stessi dati, può avere senso codificarli duramente.
Ad esempio, la seguente funzione lavora sempre con il dataset flights e seleziona sempre `time_hour`, `carrier`, e `flight` dato che formano la chiave primaria composta che ti permette di identificare una riga.

```{r}
subset_flights <- function(rows, cols) {
  flights |> 
    filter({{ rows }}) |> 
    select(time_hour, carrier, flight, {{ cols }})
}
```

### Data-masking vs. tidy-selection

A volte vuoi selezionare variabili dentro una funzione che usa data-masking.
Ad esempio, immagina di voler scrivere un `count_missing()` che conta il numero di osservazioni mancanti nelle righe.
Potresti provare a scrivere qualcosa come:

```{r}
#| error: true
count_missing <- function(df, group_vars, x_var) {
  df |> 
    group_by({{ group_vars }}) |> 
    summarize(
      n_miss = sum(is.na({{ x_var }})),
      .groups = "drop"
    )
}

flights |> 
  count_missing(c(year, month, day), dep_time)
```

Questo non funziona perché `group_by()` usa data-masking, non tidy-selection.
Possiamo aggirare quel problema usando la funzione comoda `pick()`, che ti permette di usare tidy-selection dentro funzioni data-masking:

```{r}
count_missing <- function(df, group_vars, x_var) {
  df |> 
    group_by(pick({{ group_vars }})) |> 
    summarize(
      n_miss = sum(is.na({{ x_var }})),
      .groups = "drop"
  )
}

flights |> 
  count_missing(c(year, month, day), dep_time)
```

Un altro uso conveniente di `pick()` è fare una tabella 2d di conteggi.
Qui contiamo usando tutte le variabili nelle `rows` e `columns`, poi usiamo `pivot_wider()` per riorganizzare i conteggi in una griglia:

```{r}
# https://twitter.com/pollicipes/status/1571606508944719876
count_wide <- function(data, rows, cols) {
  data |> 
    count(pick(c({{ rows }}, {{ cols }}))) |> 
    pivot_wider(
      names_from = {{ cols }}, 
      values_from = n,
      names_sort = TRUE,
      values_fill = 0
    )
}

diamonds |> count_wide(c(clarity, color), cut)
```

Mentre i nostri esempi si sono concentrati principalmente su dplyr, la tidy evaluation sostiene anche tidyr, e se guardi i documenti di `pivot_wider()` puoi vedere che `names_from` usa tidy-selection.

### Esercizi

1.  Usando i dataset da nycflights13, scrivi una funzione che:

    1.  Trova tutti i voli che sono stati cancellati (cioè `is.na(arr_time)`) o ritardati di più di un'ora.

        ```{r}
        #| eval: false
        flights |> filter_severe()
        ```

    2.  Conta il numero di voli cancellati e il numero di voli ritardati di più di un'ora.

        ```{r}
        #| eval: false
        flights |> group_by(dest) |> summarize_severe()
        ```

    3.  Trova tutti i voli che sono stati cancellati o ritardati di più di un numero di ore fornito dall'utente:

        ```{r}
        #| eval: false
        flights |> filter_severe(hours = 2)
        ```

    4.  Riassume il tempo per calcolare il minimo, media, e massimo, di una variabile fornita dall'utente:

        ```{r}
        #| eval: false
        weather |> summarize_weather(temp)
        ```

    5.  Converte la variabile fornita dall'utente che usa l'orario dell'orologio (ad es., `dep_time`, `arr_time`, ecc.) in un tempo decimale (cioè ore + (minuti / 60)).

        ```{r}
        #| eval: false
        flights |> standardize_time(sched_dep_time)
        ```

2.  Per ognuna delle seguenti funzioni elenca tutti gli argomenti che usano tidy evaluation e descrivi se usano data-masking o tidy-selection: `distinct()`, `count()`, `group_by()`, `rename_with()`, `slice_min()`, `slice_sample()`.

3.  Generalizza la seguente funzione così che puoi fornire qualsiasi numero di variabili da contare.

    ```{r}
    count_prop <- function(df, var, sort = FALSE) {
      df |>
        count({{ var }}, sort = sort) |>
        mutate(prop = n / sum(n))
    }
    ```

## Funzioni di grafico

Invece di restituire un data frame, potresti voler restituire un grafico.
Fortunatamente, puoi usare le stesse tecniche con ggplot2, perché `aes()` è una funzione data-masking.
Ad esempio, immagina di fare molti istogrammi:

```{r}
#| fig-show: hide
diamonds |> 
  ggplot(aes(x = carat)) +
  geom_histogram(binwidth = 0.1)

diamonds |> 
  ggplot(aes(x = carat)) +
  geom_histogram(binwidth = 0.05)
```

Non sarebbe bello se potessi racchiudere questo in una funzione istogramma?
Questo è facile come bere un bicchier d'acqua una volta che sai che `aes()` è una funzione data-masking e devi abbracciare:

```{r}
#| fig-alt: |
#|   Un istogramma dei carati dei diamanti, che va da 0 a 5, mostrando una distribuzione 
#|   unimodale, asimmetrica a destra con un picco tra 0 a 1 carati.
histogram <- function(df, var, binwidth = NULL) {
  df |> 
    ggplot(aes(x = {{ var }})) + 
    geom_histogram(binwidth = binwidth)
}

diamonds |> histogram(carat, 0.1)
```

Nota che `histogram()` restituisce un grafico ggplot2, il che significa che puoi ancora aggiungere componenti aggiuntivi se vuoi.
Ricorda solo di passare da `|>` a `+`:

```{r}
#| fig.show: hide
diamonds |> 
  histogram(carat, 0.1) +
  labs(x = "Size (in carats)", y = "Number of diamonds")
```

### Più variabili

È semplice aggiungere più variabili al mix.
Ad esempio, forse vuoi un modo facile per valutare a occhio se un dataset è lineare o no sovrapponendo una linea liscia e una linea dritta:

```{r}
#| fig-alt: |
#|   Scatterplot di altezza vs. massa dei personaggi di StarWars che mostra una relazione 
#|   positiva. Una curva liscia della relazione è tracciata in rosso, e 
#|   la linea di best fit è tracciata in blu.
# https://twitter.com/tyler_js_smith/status/1574377116988104704
linearity_check <- function(df, x, y) {
  df |>
    ggplot(aes(x = {{ x }}, y = {{ y }})) +
    geom_point() +
    geom_smooth(method = "loess", formula = y ~ x, color = "red", se = FALSE) +
    geom_smooth(method = "lm", formula = y ~ x, color = "blue", se = FALSE) 
}

starwars |> 
  filter(mass < 1000) |> 
  linearity_check(mass, height)
```

O forse vuoi un'alternativa agli scatterplot colorati per dataset molto grandi dove il sovrapporsi è un problema:

```{r}
#| fig-alt: |
#|   Grafico esagonale di prezzo vs. carati di diamanti che mostra una relazione positiva. 
#|   Ci sono più diamanti che sono meno di 2 carati che più di 2 carati.
# https://twitter.com/ppaxisa/status/1574398423175921665
hex_plot <- function(df, x, y, z, bins = 20, fun = "mean") {
  df |> 
    ggplot(aes(x = {{ x }}, y = {{ y }}, z = {{ z }})) + 
    stat_summary_hex(
      aes(color = after_scale(fill)), # rendi il bordo dello stesso colore del riempimento
      bins = bins, 
      fun = fun,
    )
}

diamonds |> hex_plot(carat, price, depth)
```

### Combinare con altro tidyverse

Alcuni degli helper più utili combinano un pizzico di manipolazione dati con ggplot2.
Ad esempio, se potresti voler fare un grafico a barre verticale dove ordini automaticamente le barre in ordine di frequenza usando `fct_infreq()`.
Dato che il grafico a barre è verticale, dobbiamo anche invertire l'ordine usuale per ottenere i valori più alti in cima:

```{r}
#| fig-alt: |
#|   Grafico a barre della chiarezza dei diamanti, dove la chiarezza è sull'asse y e i conteggi 
#|   sono sull'asse x, e le barre sono ordinate in ordine di frequenza: SI1, 
#|   VS2, SI2, VS1, VVS2, VVS1, IF, I1.
sorted_bars <- function(df, var) {
  df |> 
    mutate({{ var }} := fct_rev(fct_infreq({{ var }})))  |>
    ggplot(aes(y = {{ var }})) +
    geom_bar()
}

diamonds |> sorted_bars(clarity)
```

Dobbiamo usare un nuovo operatore qui, `:=` (comunemente chiamato "operatore tricheco"), perché stiamo generando il nome della variabile basato sui dati forniti dall'utente.
I nomi delle variabili vanno sul lato sinistro di `=`, ma la sintassi di R non permette niente sul lato sinistro di `=` eccetto un singolo nome letterale.
Per aggirare questo problema, usiamo l'operatore speciale `:=` che la tidy evaluation tratta esattamente nello stesso modo di `=`.

O forse vuoi rendere facile disegnare un grafico a barre solo per un sottoinsieme dei dati:

```{r}
#| fig-alt: |
#|   Grafico a barre della chiarezza dei diamanti. Il più comune è SI1, poi SI2, poi 
#|   VS2, poi VS1, poi VVS2, poi VVS1, poi I1, poi infine IF.
conditional_bars <- function(df, condition, var) {
  df |> 
    filter({{ condition }}) |> 
    ggplot(aes(x = {{ var }})) + 
    geom_bar()
}

diamonds |> conditional_bars(cut == "Good", clarity)
```

Puoi anche essere creativo e mostrare riassunti di dati in altri modi.
Puoi trovare un'applicazione interessante su <https://gist.github.com/GShotwell/b19ef520b6d56f61a830fabb3454965b>; usa le etichette degli assi per mostrare il valore più alto.
Mentre impari di più su ggplot2, il potere delle tue funzioni continuerà ad aumentare.

Finiremo con un caso più complicato: etichettare i grafici che crei.

### Etichettatura

Ricordi la funzione istogramma che ti abbiamo mostrato prima?

```{r}
histogram <- function(df, var, binwidth = NULL) {
  df |> 
    ggplot(aes(x = {{ var }})) + 
    geom_histogram(binwidth = binwidth)
}
```

Non sarebbe bello se potessimo etichettare l'output con la variabile e la larghezza del bin che è stata usata?
Per farlo, dovremo andare sotto le coperture della tidy evaluation e usare una funzione dal pacchetto di cui non abbiamo ancora parlato: rlang.
rlang è un pacchetto di basso livello che è usato da quasi ogni altro pacchetto nel tidyverse perché implementa la tidy evaluation (così come molti altri strumenti utili).

Per risolvere il problema dell'etichettatura possiamo usare `rlang::englue()`.
Questo funziona similmente a `str_glue()`, quindi qualsiasi valore racchiuso in `{ }` sarà inserito nella stringa.
Ma capisce anche `{{{ }}}`, che inserisce automaticamente il nome della variabile appropriato:

```{r}
#| fig-alt: |
#|   Istogramma dei carati dei diamanti, che va da 0 a 5. La distribuzione è 
#|   unimodale e asimmetrica a destra con un picco tra 0 a 1 carati.
histogram <- function(df, var, binwidth) {
  label <- rlang::englue("A histogram of {{var}} with binwidth {binwidth}")
  
  df |> 
    ggplot(aes(x = {{ var }})) + 
    geom_histogram(binwidth = binwidth) + 
    labs(title = label)
}

diamonds |> histogram(carat, 0.1)
```

Puoi usare lo stesso approccio in qualsiasi altro posto dove vuoi fornire una stringa in un grafico ggplot2.

### Esercizi

Costruisci una funzione di grafico ricca implementando incrementalmente ognuno dei passi sotto:

1.  Disegna uno scatterplot dato un dataset e variabili `x` e `y`.

2.  Aggiungi una linea di best fit (cioè un modello lineare senza errori standard).

3.  Aggiungi un titolo.

## Stile

A R non importa come sono chiamate le tue funzioni o argomenti ma i nomi fanno una grande differenza per gli umani.
Idealmente, il nome della tua funzione sarà breve, ma evocherà chiaramente cosa fa la funzione.
È difficile!
Ma è meglio essere chiari che brevi, dato che l'autocompletamento di RStudio rende facile digitare nomi lunghi.

Generalmente, i nomi delle funzioni dovrebbero essere verbi, e gli argomenti dovrebbero essere nomi.
Ci sono alcune eccezioni: i nomi vanno bene se la funzione calcola un nome molto ben conosciuto (cioè `mean()` è meglio di `compute_mean()`), o accedere a qualche proprietà di un oggetto (cioè `coef()` è meglio di `get_coefficients()`).
Usa il tuo miglior giudizio e non aver paura di rinominare una funzione se capisci un nome migliore dopo.

```{r}
#| eval: false
# Troppo breve
f()

# Non un verbo, o descrittivo
my_awesome_function()

# Lungo, ma chiaro
impute_missing()
collapse_years()
```

A R non importa neanche come usi lo spazio bianco nelle tue funzioni ma ai lettori futuri importerà.
Continua a seguire le regole dal @sec-workflow-style.
Inoltre, `function()` dovrebbe sempre essere seguita da parentesi graffe (`{}`), e i contenuti dovrebbero essere indentati di due spazi aggiuntivi.
Questo rende più facile vedere la gerarchia nel tuo codice scorrendo il margine sinistro.

```{r}
# Mancano due spazi extra
density <- function(color, facets, binwidth = 0.1) {
diamonds |> 
  ggplot(aes(x = carat, y = after_stat(density), color = {{ color }})) +
  geom_freqpoly(binwidth = binwidth) +
  facet_wrap(vars({{ facets }}))
}

# Pipe indentata incorrettamente
density <- function(color, facets, binwidth = 0.1) {
  diamonds |> 
  ggplot(aes(x = carat, y = after_stat(density), color = {{ color }})) +
  geom_freqpoly(binwidth = binwidth) +
  facet_wrap(vars({{ facets }}))
}
```

Come puoi vedere raccomandiamo di mettere spazi extra dentro `{{{ }}}`.
Questo rende molto ovvio che sta succedendo qualcosa di inusuale.

### Esercizi

1.  Leggi il codice sorgente per ognuna delle seguenti due funzioni, capisci cosa fanno, e poi fai brainstorming di nomi migliori.

    ```{r}
    f1 <- function(string, prefix) {
      str_sub(string, 1, str_length(prefix)) == prefix
    }

    f3 <- function(x, y) {
      rep(y, length.out = length(x))
    }
    ```

2.  Prendi una funzione che hai scritto di recente e spendi 5 minuti facendo brainstorming di un nome migliore per essa e i suoi argomenti.

3.  Fai un caso per perché `norm_r()`, `norm_d()` ecc. sarebbero meglio di `rnorm()`, `dnorm()`.
    Fai un caso per l'opposto.
    Come potresti rendere i nomi ancora più chiari?

## Riassunto

In questo capitolo, hai imparato come scrivere funzioni per tre scenari utili: creare un vettore, creare un data frame, o creare un grafico.
Lungo la strada hai visto molti esempi, che speriamo abbiano iniziato a far fluire i tuoi succhi creativi, e ti abbiano dato alcune idee per dove le funzioni potrebbero aiutare il tuo codice di analisi.

Ti abbiamo mostrato solo il minimo per iniziare con le funzioni e c'è molto di più da imparare.
Alcuni posti per imparare di più sono:

-   Per imparare di più sulla programmazione con tidy evaluation, vedi ricette utili in [programming with dplyr](https://dplyr.tidyverse.org/articles/programming.html) e [programming with tidyr](https://tidyr.tidyverse.org/articles/programming.html) e impara di più sulla teoria in [What is data-masking and why do I need {{?](https://rlang.r-lib.org/reference/topic-data-mask.html).
-   Per imparare di più sul ridurre la duplicazione nel tuo codice ggplot2, leggi il capitolo [Programming with ggplot2](https://ggplot2-book.org/programming.html){.uri} del libro ggplot2.
-   Per più consigli sullo stile delle funzioni, vedi la [tidyverse style guide](https://style.tidyverse.org/functions.html){.uri}.