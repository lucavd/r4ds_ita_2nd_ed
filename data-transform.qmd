# Trasformazione dei dati {#sec-data-transform}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

La visualizzazione è uno strumento importante per generare intuizioni, ma è raro che tu ottenga i dati esattamente nella forma giusta di cui hai bisogno per creare il grafico che vuoi.
Spesso dovrai creare alcune nuove variabili o riassunti per rispondere alle tue domande con i tuoi dati, o forse vuoi solo rinominare le variabili o riordinare le osservazioni per rendere i dati un po' più facili da lavorare.
Imparerai come fare tutto questo (e altro!) in questo capitolo, che ti introdurrà alla trasformazione dei dati usando il pacchetto **dplyr** e un nuovo dataset sui voli che sono partiti da New York City nel 2013.

L'obiettivo di questo capitolo è darti una panoramica di tutti gli strumenti chiave per trasformare un data frame.
Inizieremo con funzioni che operano sulle righe e poi sulle colonne di un data frame, poi torneremo a parlare di più sulla pipe, uno strumento importante che usi per combinare i verbi.
Poi introdurremo la capacità di lavorare con i gruppi.
Concluderemo il capitolo con un caso studio che mostra queste funzioni in azione.
Nei capitoli successivi, torneremo sulle funzioni più nel dettaglio quando inizieremo ad approfondire tipi specifici di dati (es. numeri, stringhe, date).

### Prerequisiti

In questo capitolo, ci concentreremo sul pacchetto dplyr, un altro membro principale del tidyverse.
Illustreremo le idee chiave usando dati dal pacchetto nycflights13 e useremo ggplot2 per aiutarci a capire i dati.

```{r}
#| label: setup
library(nycflights13)
library(tidyverse)
```

Prendi nota attentamente del messaggio di conflitti che viene stampato quando carichi il tidyverse.
Ti dice che dplyr sovrascrive alcune funzioni in R base.
Se vuoi usare la versione base di queste funzioni dopo aver caricato dplyr, dovrai usare i loro nomi completi: `stats::filter()` e `stats::lag()`.
Finora, abbiamo per lo più ignorato da quale pacchetto proviene una funzione perché di solito non importa.
Tuttavia, conoscere il pacchetto può aiutarti a trovare aiuto e funzioni correlate, quindi quando dobbiamo essere precisi su da quale pacchetto proviene una funzione, useremo la stessa sintassi di R: `packagename::functionname()`.

### nycflights13

Per esplorare i verbi base di dplyr, useremo `nycflights13::flights`.
Questo dataset contiene tutti i `r format(nrow(nycflights13::flights), big.mark = ",")` voli che sono partiti da New York City nel 2013.
I dati provengono dal [Bureau of Transportation Statistics](https://www.transtats.bts.gov/DL_SelectFields.aspx?gnoyr_VQ=FGJ&QO_fu146_anzr=b0-gvzr) degli Stati Uniti e sono documentati in `?flights`.

```{r}
flights
```

`flights` è un tibble, un tipo speciale di data frame usato dal tidyverse per evitare alcuni tranelli comuni.
La differenza più importante tra tibble e data frame è il modo in cui i tibble stampano; sono progettati per dataset grandi, quindi mostrano solo le prime righe e solo le colonne che stanno in uno schermo.
Ci sono alcune opzioni per vedere tutto.
Se stai usando RStudio, la più conveniente è probabilmente `View(flights)`, che apre una vista interattiva, scorrevole e filtrabile.
Altrimenti puoi usare `print(flights, width = Inf)` per mostrare tutte le colonne, o usare `glimpse()`:

```{r}
glimpse(flights)
```

In entrambe le viste, i nomi delle variabili sono seguiti da abbreviazioni che ti dicono il tipo di ogni variabile: `<int>` è l'abbreviazione di integer, `<dbl>` è l'abbreviazione di double (alias numeri reali), `<chr>` per character (alias stringhe), e `<dttm>` per date-time.
Questi sono importanti perché le operazioni che puoi eseguire su una colonna dipendono molto dal suo "tipo".

### Basi di dplyr

Stai per imparare i verbi primari di dplyr (funzioni), che ti permetteranno di risolvere la grande maggioranza delle tue sfide di manipolazione dei dati.
Ma prima di discutere le loro differenze individuali, vale la pena affermare cosa hanno in comune:

1.  Il primo argomento è sempre un data frame.

2.  Gli argomenti successivi tipicamente descrivono su quali colonne operare usando i nomi delle variabili (senza virgolette).

3.  L'output è sempre un nuovo data frame.

Poiché ogni verbo fa una cosa bene, risolvere problemi complessi richiederà solitamente di combinare più verbi, e lo faremo con la pipe, `|>`.
Discuteremo di più della pipe in @sec-the-pipe, ma in breve, la pipe prende la cosa alla sua sinistra e la passa alla funzione alla sua destra così che `x |> f(y)` è equivalente a `f(x, y)`, e `x |> f(y) |> g(z)` è equivalente a `g(f(x, y), z)`.
Il modo più facile per pronunciare la pipe è "poi".
Questo rende possibile avere un'idea del seguente codice anche se non hai ancora imparato i dettagli:

```{r}
#| eval: false
flights |>
  filter(dest == "IAH") |> 
  group_by(year, month, day) |> 
  summarize(
    arr_delay = mean(arr_delay, na.rm = TRUE)
  )
```

I verbi di dplyr sono organizzati in quattro gruppi basati su cosa operano: **righe**, **colonne**, **gruppi**, o **tabelle**.
Nelle sezioni seguenti, imparerai i verbi più importanti per righe, colonne e gruppi.
Poi, torneremo ai verbi di join che lavorano sulle tabelle in @sec-joins.
Tuffiamoci!

## Righe

I verbi più importanti che operano sulle righe di un dataset sono `filter()`, che cambia quali righe sono presenti senza cambiare il loro ordine, e `arrange()`, che cambia l'ordine delle righe senza cambiare quali sono presenti.
Entrambe le funzioni influenzano solo le righe, e le colonne rimangono invariate.
Discuteremo anche `distinct()` che trova righe con valori unici.
A differenza di `arrange()` e `filter()` può anche opzionalmente modificare le colonne.

### `filter()`

`filter()` ti permette di mantenere le righe basandoti sui valori delle colonne[^data-transform-1].
Il primo argomento è il data frame.
Il secondo e i successivi argomenti sono le condizioni che devono essere vere per mantenere la riga.
Per esempio, potremmo trovare tutti i voli che sono partiti con più di 120 minuti (due ore) di ritardo:

[^data-transform-1]: Più avanti, imparerai sulla famiglia `slice_*()`, che ti permette di scegliere righe basandoti sulle loro posizioni.

```{r}
flights |> 
  filter(dep_delay > 120)
```

Oltre a `>` (maggiore di), puoi usare `>=` (maggiore o uguale a), `<` (minore di), `<=` (minore o uguale a), `==` (uguale a), e `!=` (diverso da).
Puoi anche combinare condizioni con `&` o `,` per indicare "e" (controlla entrambe le condizioni) o con `|` per indicare "o" (controlla una delle due condizioni):

```{r}
# Voli che sono partiti il 1 gennaio
flights |> 
  filter(month == 1 & day == 1)

# Voli che sono partiti in gennaio o febbraio
flights |> 
  filter(month == 1 | month == 2)
```

C'è una scorciatoia utile quando stai combinando `|` e `==`: `%in%`.
Mantiene le righe dove la variabile è uguale a uno dei valori a destra:

```{r}
# Un modo più breve per selezionare voli che sono partiti in gennaio o febbraio
flights |> 
  filter(month %in% c(1, 2))
```

Torneremo su questi confronti e operatori logici più in dettaglio in @sec-logicals.

Quando esegui `filter()` dplyr esegue l'operazione di filtraggio, creando un nuovo data frame, e poi lo stampa.
Non modifica il dataset `flights` esistente perché le funzioni dplyr non modificano mai i loro input.
Per salvare il risultato, devi usare l'operatore di assegnazione, `<-`:

```{r}
jan1 <- flights |> 
  filter(month == 1 & day == 1)
```

### Errori comuni

Quando stai iniziando con R, l'errore più facile da fare è usare `=` invece di `==` quando testi per l'uguaglianza.
`filter()` te lo farà sapere quando questo succede:

```{r}
#| error: true
flights |> 
  filter(month = 1)
```

Un altro errore è scrivere istruzioni "o" come faresti in inglese:

```{r}
#| eval: false
flights |> 
  filter(month == 1 | 2)
```

Questo "funziona", nel senso che non genera un errore, ma non fa quello che vuoi perché `|` prima controlla la condizione `month == 1` e poi controlla la condizione `2`, che non è una condizione sensata da controllare.
Impareremo di più su cosa sta succedendo qui e perché in @sec-order-operations-boolean.

### `arrange()`

`arrange()` cambia l'ordine delle righe basandosi sul valore delle colonne.
Prende un data frame e un insieme di nomi di colonne (o espressioni più complicate) per ordinare.
Se fornisci più di un nome di colonna, ogni colonna aggiuntiva sarà usata per risolvere i pareggi nei valori delle colonne precedenti.
Per esempio, il seguente codice ordina per orario di partenza, che è distribuito su quattro colonne.
Otteniamo prima gli anni più precoci, poi all'interno di un anno, i mesi più precoci, ecc.

```{r}
flights |> 
  arrange(year, month, day, dep_time)
```

Puoi usare `desc()` su una colonna dentro `arrange()` per riordinare il data frame basandoti su quella colonna in ordine decrescente (dal grande al piccolo).
Per esempio, questo codice ordina i voli da più a meno ritardati:

```{r}
flights |> 
  arrange(desc(dep_delay))
```

Nota che il numero di righe non è cambiato -- stiamo solo ordinando i dati, non li stiamo filtrando.

### `distinct()`

`distinct()` trova tutte le righe uniche in un dataset, quindi tecnicamente, opera principalmente sulle righe.
La maggior parte delle volte, tuttavia, vorrai la combinazione distinta di alcune variabili, quindi puoi anche opzionalmente fornire nomi di colonne:

```{r}
# Rimuovi righe duplicate, se ce ne sono
flights |> 
  distinct()

# Trova tutte le coppie uniche di origine e destinazione
flights |> 
  distinct(origin, dest)
```

In alternativa, se vuoi mantenere le altre colonne quando filtri per righe uniche, puoi usare l'opzione `.keep_all = TRUE`.

```{r}
flights |> 
  distinct(origin, dest, .keep_all = TRUE)
```

Non è una coincidenza che tutti questi voli distinti siano del 1 gennaio: `distinct()` troverà la prima occorrenza di una riga unica nel dataset e scarterà il resto.

Se vuoi trovare il numero di occorrenze invece, è meglio sostituire `distinct()` con `count()`.
Con l'argomento `sort = TRUE`, puoi ordinarli in ordine decrescente del numero di occorrenze.
Imparerai di più su count in @sec-counts.

```{r}
flights |>
  count(origin, dest, sort = TRUE)
```

### Esercizi

1.  In una singola pipeline per ogni condizione, trova tutti i voli che soddisfano la condizione:

    -   Hanno avuto un ritardo di arrivo di due o più ore
    -   Sono volati a Houston (`IAH` o `HOU`)
    -   Sono stati operati da United, American, o Delta
    -   Sono partiti in estate (luglio, agosto e settembre)
    -   Sono arrivati con più di due ore di ritardo ma non sono partiti in ritardo
    -   Sono stati ritardati di almeno un'ora, ma hanno recuperato più di 30 minuti in volo

2.  Ordina `flights` per trovare i voli con i ritardi di partenza più lunghi.
    Trova i voli che sono partiti più presto al mattino.

3.  Ordina `flights` per trovare i voli più veloci.
    (Suggerimento: Prova a includere un calcolo matematico dentro la tua funzione.)

4.  C'è stato un volo in ogni giorno del 2013?

5.  Quali voli hanno viaggiato la distanza più lunga?
    Quali hanno viaggiato la distanza più breve?

6.  Importa l'ordine in cui hai usato `filter()` e `arrange()` se stai usando entrambi?
    Perché/perché no?
    Pensa ai risultati e a quanto lavoro dovrebbero fare le funzioni.

## Colonne

Ci sono quattro verbi importanti che influenzano le colonne senza cambiare le righe: `mutate()` crea nuove colonne che sono derivate dalle colonne esistenti, `select()` cambia quali colonne sono presenti, `rename()` cambia i nomi delle colonne, e `relocate()` cambia le posizioni delle colonne.

### `mutate()` {#sec-mutate}

Il lavoro di `mutate()` è aggiungere nuove colonne che sono calcolate dalle colonne esistenti.
Nei capitoli di trasformazione, imparerai un grande set di funzioni che puoi usare per manipolare diversi tipi di variabili.
Per ora, ci atteniamo all'algebra di base, che ci permette di calcolare il `gain`, quanto tempo un volo in ritardo ha recuperato in aria, e la `speed` in miglia per ora:

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60
  )
```

Di default, `mutate()` aggiunge nuove colonne sul lato destro del tuo dataset, che rende difficile vedere cosa sta succedendo qui.
Possiamo usare l'argomento `.before` per aggiungere invece le variabili sul lato sinistro[^data-transform-2]:

[^data-transform-2]: Ricorda che in RStudio, il modo più facile per vedere un dataset con molte colonne è `View()`.

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = 1
  )
```

Il `.` indica che `.before` è un argomento della funzione, non il nome di una terza nuova variabile che stiamo creando.
Puoi anche usare `.after` per aggiungere dopo una variabile, e in entrambi `.before` e `.after` puoi usare il nome della variabile invece di una posizione.
Per esempio, potremmo aggiungere le nuove variabili dopo `day`:

```{r}
#| results: false
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = day
  )
```

In alternativa, puoi controllare quali variabili sono mantenute con l'argomento `.keep`.
Un argomento particolarmente utile è `"used"` che specifica che manteniamo solo le colonne che sono state coinvolte o create nel passo `mutate()`.
Per esempio, il seguente output conterrà solo le variabili `dep_delay`, `arr_delay`, `air_time`, `gain`, `hours`, e `gain_per_hour`.

```{r}
#| results: false
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    hours = air_time / 60,
    gain_per_hour = gain / hours,
    .keep = "used"
  )
```

Nota che siccome non abbiamo assegnato il risultato del calcolo sopra di nuovo a `flights`, le nuove variabili `gain`, `hours`, e `gain_per_hour` saranno solo stampate ma non saranno memorizzate in un data frame.
E se vogliamo che siano disponibili in un data frame per uso futuro, dovremmo pensare attentamente se vogliamo che il risultato sia assegnato di nuovo a `flights`, sovrascrivendo il data frame originale con molte più variabili, o a un nuovo oggetto.
Spesso, la risposta giusta è un nuovo oggetto che è nominato informativamente per indicare i suoi contenuti, es. `delay_gain`, ma potresti anche avere buone ragioni per sovrascrivere `flights`.

### `select()` {#sec-select}

Non è raro ottenere dataset con centinaia o anche migliaia di variabili.
In questa situazione, la prima sfida è spesso solo concentrarsi sulle variabili che ti interessano.
`select()` ti permette di ingrandire rapidamente su un sottoinsieme utile usando operazioni basate sui nomi delle variabili:

-   Seleziona colonne per nome:

    ```{r}
    #| results: false
    flights |> 
      select(year, month, day)
    ```

-   Seleziona tutte le colonne tra year e day (inclusi):

    ```{r}
    #| results: false
    flights |> 
      select(year:day)
    ```

-   Seleziona tutte le colonne eccetto quelle da year a day (inclusi):

    ```{r}
    #| results: false
    flights |> 
      select(!year:day)
    ```

    Storicamente questa operazione era fatta con `-` invece di `!`, quindi è probabile che lo vedrai in giro.
    Questi due operatori servono allo stesso scopo ma con sottili differenze nel comportamento.
    Raccomandiamo di usare `!` perché si legge come "non" e si combina bene con `&` e `|`.

-   Seleziona tutte le colonne che sono character:

    ```{r}
    #| results: false
    flights |> 
      select(where(is.character))
    ```

Ci sono diverse funzioni helper che puoi usare dentro `select()`:

-   `starts_with("abc")`: corrisponde ai nomi che iniziano con "abc".
-   `ends_with("xyz")`: corrisponde ai nomi che finiscono con "xyz".
-   `contains("ijk")`: corrisponde ai nomi che contengono "ijk".
-   `num_range("x", 1:3)`: corrisponde a `x1`, `x2` e `x3`.

Vedi `?select` per più dettagli.
Una volta che conosci le espressioni regolari (l'argomento di @sec-regular-expressions) sarai anche in grado di usare `matches()` per selezionare variabili che corrispondono a un pattern.

Puoi rinominare variabili mentre le `select()` usando `=`.
Il nuovo nome appare sul lato sinistro del `=`, e la vecchia variabile appare sul lato destro:

```{r}
flights |> 
  select(tail_num = tailnum)
```

### `rename()`

Se vuoi mantenere tutte le variabili esistenti e vuoi solo rinominarne alcune, puoi usare `rename()` invece di `select()`:

```{r}
flights |> 
  rename(tail_num = tailnum)
```

Se hai un gruppo di colonne nominate inconsistentemente e sarebbe doloroso sistemarle tutte a mano, dai un'occhiata a `janitor::clean_names()` che fornisce alcune utili pulizie automatiche.

### `relocate()`

Usa `relocate()` per spostare le variabili.
Potresti voler raccogliere variabili correlate insieme o spostare variabili importanti davanti.
Di default `relocate()` sposta le variabili davanti:

```{r}
flights |> 
  relocate(time_hour, air_time)
```

Puoi anche specificare dove metterle usando gli argomenti `.before` e `.after`, proprio come in `mutate()`:

```{r}
#| results: false
flights |> 
  relocate(year:dep_time, .after = time_hour)
flights |> 
  relocate(starts_with("arr"), .before = dep_time)
```

### Exercises

```{r}
#| eval: false
#| echo: false
# For data checking, not used in results shown in book
flights <- flights |> mutate(
  dep_time = hour * 60 + minute,
  arr_time = (arr_time %/% 100) * 60 + (arr_time %% 100),
  airtime2 = arr_time - dep_time,
  dep_sched = dep_time + dep_delay
)

ggplot(flights, aes(x = dep_sched)) + geom_histogram(binwidth = 60)
ggplot(flights, aes(x = dep_sched %% 60)) + geom_histogram(binwidth = 1)
ggplot(flights, aes(x = air_time - airtime2)) + geom_histogram()
```

1.  Confronta `dep_time`, `sched_dep_time`, e `dep_delay`.
    Come ti aspetteresti che questi tre numeri siano correlati?

2.  Pensa a quanti più modi possibili per selezionare `dep_time`, `dep_delay`, `arr_time`, e `arr_delay` da `flights`.

3.  Cosa succede se specifichi il nome della stessa variabile più volte in una chiamata `select()`?

4.  Cosa fa la funzione `any_of()`?
    Perché potrebbe essere utile in congiunzione con questo vettore?

    ```{r}
    variables <- c("year", "month", "day", "dep_delay", "arr_delay")
    ```

5.  Il risultato dell'esecuzione del seguente codice ti sorprende?
    Come gestiscono le funzioni helper di select maiuscole e minuscole di default?
    Come puoi cambiare quel default?

    ```{r}
    #| eval: false
    flights |> select(contains("TIME"))
    ```

6.  Rinomina `air_time` in `air_time_min` per indicare le unità di misura e spostala all'inizio del data frame.

7.  Perché il seguente non funziona, e cosa significa l'errore?

    ```{r}
    #| error: true
    flights |> 
      select(tailnum) |> 
      arrange(arr_delay)
    ```

## La pipe {#sec-the-pipe}

Ti abbiamo mostrato esempi semplici della pipe sopra, ma il suo vero potere emerge quando inizi a combinare più verbi.
Per esempio, immagina di voler trovare i voli più veloci per l'aeroporto IAH di Houston: devi combinare `filter()`, `mutate()`, `select()`, e `arrange()`:

```{r}
flights |> 
  filter(dest == "IAH") |> 
  mutate(speed = distance / air_time * 60) |> 
  select(year:day, dep_time, carrier, flight, speed) |> 
  arrange(desc(speed))
```

Anche se questa pipeline ha quattro passi, è facile da scorrere perché i verbi vengono all'inizio di ogni riga: inizia con i dati `flights`, poi filtra, poi muta, poi seleziona, poi ordina.

Cosa succederebbe se non avessimo la pipe?
Potremmo annidare ogni chiamata di funzione dentro la chiamata precedente:

```{r}
#| results: false
arrange(
  select(
    mutate(
      filter(
        flights, 
        dest == "IAH"
      ),
      speed = distance / air_time * 60
    ),
    year:day, dep_time, carrier, flight, speed
  ),
  desc(speed)
)
```

Oppure potremmo usare un gruppo di oggetti intermedi:

```{r}
#| results: false
flights1 <- filter(flights, dest == "IAH")
flights2 <- mutate(flights1, speed = distance / air_time * 60)
flights3 <- select(flights2, year:day, dep_time, carrier, flight, speed)
arrange(flights3, desc(speed))
```

Mentre entrambe le forme hanno il loro tempo e posto, la pipe generalmente produce codice di analisi dei dati che è più facile da scrivere e leggere.

Per aggiungere la pipe al tuo codice, raccomandiamo di usare la scorciatoia da tastiera integrata Ctrl/Cmd + Shift + M.
Dovrai fare un cambiamento alle opzioni di RStudio per usare `|>` invece di `%>%` come mostrato in @fig-pipe-options; di più su `%>%` a breve.

```{r}
#| label: fig-pipe-options
#| echo: false
#| fig-cap: |
#|   Per inserire `|>`, assicurati che l'opzione "Use native pipe operator" sia selezionata.
#| fig-alt: | 
#|   Screenshot che mostra l'opzione "Use native pipe operator" che può
#|   essere trovata nel pannello "Editing" delle opzioni "Code".
knitr::include_graphics("screenshots/rstudio-pipe-options.png")
```

::: callout-note
## magrittr

Se hai usato il tidyverse per un po', potresti essere familiare con la pipe `%>%` fornita dal pacchetto **magrittr**.
Il pacchetto magrittr è incluso nel tidyverse principale, quindi puoi usare `%>%` ogni volta che carichi il tidyverse:

```{r}
#| eval: false
library(tidyverse)

mtcars %>% 
  group_by(cyl) %>%
  summarize(n = n())
```

Per casi semplici, `|>` e `%>%` si comportano identicamente.
Allora perché raccomandiamo la pipe base?
Primo, perché è parte di R base, è sempre disponibile per l'uso, anche quando non stai usando il tidyverse.
Secondo, `|>` è parecchio più semplice di `%>%`: nel tempo tra l'invenzione di `%>%` nel 2014 e l'inclusione di `|>` in R 4.1.0 nel 2021, abbiamo acquisito una migliore comprensione della pipe.
Questo ha permesso all'implementazione base di abbandonare caratteristiche usate infrequentemente e meno importanti.
:::

## Gruppi

Finora hai imparato sulle funzioni che lavorano con righe e colonne.
dplyr diventa ancora più potente quando aggiungi la capacità di lavorare con i gruppi.
In questa sezione, ci concentreremo sulle funzioni più importanti: `group_by()`, `summarize()`, e la famiglia di funzioni slice.

### `group_by()`

Usa `group_by()` per dividere il tuo dataset in gruppi significativi per la tua analisi:

```{r}
flights |> 
  group_by(month)
```

`group_by()` non cambia i dati ma, se guardi attentamente l'output, noterai che l'output indica che è "raggruppato per" mese (`Groups: month [12]`).
Questo significa che le operazioni successive ora lavoreranno "per mese".
`group_by()` aggiunge questa caratteristica raggruppata (riferita come classe) al data frame, che cambia il comportamento dei verbi successivi applicati ai dati.

### `summarize()` {#sec-summarize}

L'operazione raggruppata più importante è un riassunto, che, se usata per calcolare una singola statistica riassuntiva, riduce il data frame ad avere una singola riga per ogni gruppo.
In dplyr, questa operazione è eseguita da `summarize()`[^data-transform-3], come mostrato dal seguente esempio, che calcola il ritardo medio di partenza per mese:

[^data-transform-3]: O `summarise()`, se preferisci l'inglese britannico.

```{r}
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay)
  )
```

Ops!
Qualcosa è andato storto, e tutti i nostri risultati sono `NA` (pronunciato "N-A"), il simbolo di R per valore mancante.
Questo è successo perché alcuni dei voli osservati avevano dati mancanti nella colonna delay, e quindi quando abbiamo calcolato la media includendo quei valori, abbiamo ottenuto un risultato `NA`.
Torneremo a discutere i valori mancanti in dettaglio in @sec-missing-values, ma per ora, diremo alla funzione `mean()` di ignorare tutti i valori mancanti impostando l'argomento `na.rm` a `TRUE`:

```{r}
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE)
  )
```

Puoi creare qualsiasi numero di riassunti in una singola chiamata a `summarize()`.
Imparerai vari riassunti utili nei prossimi capitoli, ma un riassunto molto utile è `n()`, che restituisce il numero di righe in ogni gruppo:

```{r}
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE), 
    n = n()
  )
```

Medie e conteggi possono portarti sorprendentemente lontano nella data science!

### Le funzioni `slice_`

Ci sono cinque funzioni pratiche che ti permettono di estrarre righe specifiche dentro ogni gruppo:

-   `df |> slice_head(n = 1)` prende la prima riga da ogni gruppo.
-   `df |> slice_tail(n = 1)` prende l'ultima riga in ogni gruppo.
-   `df |> slice_min(x, n = 1)` prende la riga con il valore più piccolo della colonna `x`.
-   `df |> slice_max(x, n = 1)` prende la riga con il valore più grande della colonna `x`.
-   `df |> slice_sample(n = 1)` prende una riga casuale.

Puoi variare `n` per selezionare più di una riga, o invece di `n =`, puoi usare `prop = 0.1` per selezionare (ad es.) il 10% delle righe in ogni gruppo.
Per esempio, il seguente codice trova i voli che sono più ritardati all'arrivo in ogni destinazione:

```{r}
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 1) |>
  relocate(dest)
```

Nota che ci sono 105 destinazioni ma otteniamo 108 righe qui.
Cosa succede?
`slice_min()` e `slice_max()` mantengono valori legati quindi `n = 1` significa darci tutte le righe con il valore più alto.
Se vuoi esattamente una riga per gruppo puoi impostare `with_ties = FALSE`.

Questo è simile al calcolare il ritardo massimo con `summarize()`, ma ottieni l'intera riga corrispondente (o righe se c'è un pareggio) invece della singola statistica riassuntiva.

### Raggruppare per variabili multiple

Puoi creare gruppi usando più di una variabile.
Per esempio, potremmo creare un gruppo per ogni data.

```{r}
daily <- flights |>  
  group_by(year, month, day)
daily
```

Quando riassumi un tibble raggruppato per più di una variabile, ogni riassunto rimuove l'ultimo gruppo.
Col senno di poi, questo non era un ottimo modo per far funzionare questa funzione, ma è difficile cambiare senza rompere il codice esistente.
Per rendere ovvio cosa sta succedendo, dplyr mostra un messaggio che ti dice come puoi cambiare questo comportamento:

```{r}
daily_flights <- daily |> 
  summarize(n = n())
```

Se sei soddisfatto di questo comportamento, puoi richiederlo esplicitamente per sopprimere il messaggio:

```{r}
#| results: false

daily_flights <- daily |> 
  summarize(
    n = n(), 
    .groups = "drop_last"
  )
```

In alternativa, cambia il comportamento predefinito impostando un valore diverso, ad es., `"drop"` per eliminare tutti i raggruppamenti o `"keep"` per preservare gli stessi gruppi.

### Sraggruppare

Potresti anche voler rimuovere il raggruppamento da un data frame senza usare `summarize()`.
Puoi fare questo con `ungroup()`.

```{r}
daily |> 
  ungroup()
```

Ora vediamo cosa succede quando riassumi un data frame non raggruppato.

```{r}
daily |> 
  ungroup() |>
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE), 
    flights = n()
  )
```

Ottieni una singola riga indietro perché dplyr tratta tutte le righe in un data frame non raggruppato come appartenenti a un gruppo.

### `.by`

dplyr 1.1.0 include una nuova sintassi sperimentale per il raggruppamento per operazione, l'argomento `.by`.
`group_by()` e `ungroup()` non stanno scomparendo, ma ora puoi anche usare l'argomento `.by` per raggruppare dentro una singola operazione:

```{r}
#| results: false
flights |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE), 
    n = n(),
    .by = month
  )
```

O se vuoi raggruppare per variabili multiple:

```{r}
#| results: false
flights |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE), 
    n = n(),
    .by = c(origin, dest)
  )
```

`.by` funziona con tutti i verbi e ha il vantaggio che non devi usare l'argomento `.groups` per sopprimere il messaggio di raggruppamento o `ungroup()` quando hai finito.

Non ci siamo concentrati su questa sintassi in questo capitolo perché era molto nuova quando abbiamo scritto il libro.
Volevamo menzionarla perché pensiamo che abbia molto potenziale ed è probabile che sia piuttosto popolare.
Puoi imparare di più su di essa nel [post del blog dplyr 1.1.0](https://www.tidyverse.org/blog/2023/02/dplyr-1-1-0-per-operation-grouping/).

### Exercises

1.  Quale vettore ha i peggiori ritardi medi?
    Sfida: puoi districare gli effetti di aeroporti cattivi vs. vettori cattivi?
    Perché/perché no?
    (Suggerimento: pensa a `flights |> group_by(carrier, dest) |> summarize(n())`)

2.  Trova i voli che sono più ritardati alla partenza da ogni destinazione.

3.  Come variano i ritardi nel corso della giornata?
    Illustra la tua risposta con un grafico.

4.  Cosa succede se fornisci un `n` negativo a `slice_min()` e affini?

5.  Spiega cosa fa `count()` in termini dei verbi dplyr che hai appena imparato.
    Cosa fa l'argomento `sort` di `count()`?

6.  Supponi di avere il seguente piccolo data frame:

    ```{r}
    df <- tibble(
      x = 1:5,
      y = c("a", "b", "a", "a", "b"),
      z = c("K", "K", "L", "L", "K")
    )
    ```

    a.  Scrivi quello che pensi che l'output sembrerà, poi controlla se eri corretto, e descrivi cosa fa `group_by()`.

        ```{r}
        #| eval: false 
        df |>
          group_by(y)
        ```

    b.  Scrivi quello che pensi che l'output sembrerà, poi controlla se eri corretto, e descrivi cosa fa `arrange()`.
        Inoltre, commenta su come è diverso dal `group_by()` nella parte (a).

        ```{r}
        #| eval: false
        df |>
          arrange(y)
        ```

    c.  Scrivi quello che pensi che l'output sembrerà, poi controlla se eri corretto, e descrivi cosa fa la pipeline.

        ```{r}
        #| eval: false
        df |>
          group_by(y) |>
          summarize(mean_x = mean(x))
        ```

    d.  Scrivi quello che pensi che l'output sembrerà, poi controlla se eri corretto, e descrivi cosa fa la pipeline.
        Poi, commenta su cosa dice il messaggio.

        ```{r}
        #| eval: false  
        df |>
          group_by(y, z) |>
          summarize(mean_x = mean(x))
        ```

    e.  Scrivi quello che pensi che l'output sembrerà, poi controlla se eri corretto, e descrivi cosa fa la pipeline.
        Come è diverso l'output da quello nella parte (d)?

        ```{r}
        #| eval: false
        df |>
          group_by(y, z) |>
          summarize(mean_x = mean(x), .groups = "drop")
        ```

    f.  Scrivi quello che pensi che gli output sembreranno, poi controlla se eri corretto, e descrivi cosa fa ogni pipeline.
        Come sono diversi gli output delle due pipeline?

        ```{r}
        #| eval: false  
        df |>
          group_by(y, z) |>
          summarize(mean_x = mean(x))
            
        df |>
          group_by(y, z) |>
          mutate(mean_x = mean(x))
        ```

## Caso studio: aggregati e dimensione del campione {#sec-sample-size}

Ogni volta che fai qualsiasi aggregazione, è sempre una buona idea includere un conteggio (`n()`).
In questo modo, puoi assicurarti di non trarre conclusioni basate su quantità molto piccole di dati.
Dimostreremo questo con alcuni dati di baseball dal pacchetto **Lahman**.
Specificamente, confronteremo che proporzione di volte un giocatore fa un colpo (`H`) vs. il numero di volte che prova a mettere la palla in gioco (`AB`):

```{r}
batters <- Lahman::Batting |> 
  group_by(playerID) |> 
  summarize(
    performance = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
    n = sum(AB, na.rm = TRUE)
  )
batters
```

Quando grafichiamo l'abilità del battitore (misurata dalla media battuta, `performance`) contro il numero di opportunità di colpire la palla (misurato per volte al piatto, `n`), vedi due pattern:

1.  La variazione in `performance` è maggiore tra i giocatori con meno volte al piatto.
    La forma di questo grafico è molto caratteristica: ogni volta che grafichi una media (o altre statistiche riassuntive) vs. dimensione del gruppo, vedrai che la variazione diminuisce man mano che la dimensione del campione aumenta[^data-transform-4].

2.  C'è una correlazione positiva tra abilità (`performance`) e opportunità di colpire la palla (`n`) perché le squadre vogliono dare ai loro migliori battitori le maggiori opportunità di colpire la palla.

[^data-transform-4]: \*ehm\* la legge dei grandi numeri \*ehm\*.

```{r}
#| warning: false
#| fig-alt: |
#|   Un grafico a dispersione del numero di performance di battuta vs. opportunità di battuta 
#|   sovrapposto con una linea levigata. La performance media aumenta bruscamente
#|   da 0.2 quando n è ~100 a 0.25 quando n è ~1000. La performance media
#|   continua ad aumentare linearmente con una pendenza molto più bassa, raggiungendo
#|   0.3 quando n è ~12.000.
batters |> 
  filter(n > 100) |> 
  ggplot(aes(x = n, y = performance)) +
  geom_point(alpha = 1 / 10) + 
  geom_smooth(se = FALSE)
```

Nota il pattern utile per combinare ggplot2 e dplyr.
Devi solo ricordare di passare da `|>`, per l'elaborazione del dataset, a `+` per aggiungere layer al tuo grafico.

Questo ha anche implicazioni importanti per la classifica.
Se ordini ingenuamente su `desc(performance)`, le persone con le migliori medie di battuta sono chiaramente quelle che hanno provato a mettere la palla in gioco pochissime volte e sono riuscite a fare un colpo, non sono necessariamente i giocatori più abili:

```{r}
batters |> 
  arrange(desc(performance))
```

Puoi trovare una buona spiegazione di questo problema e come superarlo su <http://varianceexplained.org/r/empirical_bayes_baseball/> e <https://www.evanmiller.org/how-not-to-sort-by-average-rating.html>.

## Riassunto

In questo capitolo, hai imparato gli strumenti che dplyr fornisce per lavorare con i data frame.
Gli strumenti sono raggruppati approssimativamente in tre categorie: quelli che manipolano le righe (come `filter()` e `arrange()`), quelli che manipolano le colonne (come `select()` e `mutate()`) e quelli che manipolano i gruppi (come `group_by()` e `summarize()`).
In questo capitolo, ci siamo concentrati su questi strumenti "intero data frame", ma non hai ancora imparato molto su cosa puoi fare con le singole variabili.
Torneremo su questo nella parte Transform del libro, dove ogni capitolo fornisce strumenti per un tipo specifico di variabile.

Nel prossimo capitolo, torneremo al workflow per discutere l'importanza dello stile del codice e mantenere il tuo codice ben organizzato per renderlo facile da leggere e capire per te e altri.