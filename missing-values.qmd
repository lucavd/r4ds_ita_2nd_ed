# Valori mancanti {#sec-missing-values}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

Hai già imparato le basi dei valori mancanti in precedenza nel libro.
Li hai visti per la prima volta in @sec-data-visualization dove hanno causato un avvertimento quando creavi un grafico così come in @sec-summarize dove hanno interferito con il calcolo delle statistiche riassuntive, e hai imparato della loro natura infettiva e come controllare la loro presenza in @sec-na-comparison.
Ora torneremo su di essi più in profondità, così puoi imparare più dettagli.

Iniziamo discutendo alcuni strumenti generali per lavorare con valori mancanti registrati come `NA`.
Poi esploreremo l'idea di valori implicitamente mancanti, valori che sono semplicemente assenti dai tuoi dati, e mostreremo alcuni strumenti che puoi usare per renderli espliciti.
Concluderemo con una discussione correlata sui gruppi vuoti, causati da livelli di fattori che non appaiono nei dati.

### Prerequisiti

Le funzioni per lavorare con dati mancanti provengono principalmente da dplyr e tidyr, che sono membri core del tidyverse.

```{r}
#| label: setup
#| message: false
library(tidyverse)
```

## Valori mancanti espliciti

Per iniziare, esploriamo alcuni strumenti utili per creare o eliminare valori mancanti espliciti, cioè celle dove vedi un `NA`.

### Ultima osservazione portata avanti

Un uso comune per i valori mancanti è come convenienza di inserimento dati.
Quando i dati sono inseriti a mano, i valori mancanti a volte indicano che il valore nella riga precedente è stato ripetuto (o portato avanti):

```{r}
treatment <- tribble(
  ~person,           ~treatment, ~response,
  "Derrick Whitmore", 1,         7,
  NA,                 2,         10,
  NA,                 3,         NA,
  "Katherine Burke",  1,         4
)
```

Puoi riempire questi valori mancanti con `tidyr::fill()`.
Funziona come `select()`, prendendo un insieme di colonne:

```{r}
treatment |>
  fill(everything())
```

Questo trattamento è a volte chiamato "last observation carried forward", o **locf** in breve.
Puoi usare l'argomento `.direction` per riempire valori mancanti che sono stati generati in modi più esotici.

### Valori fissi

A volte i valori mancanti rappresentano qualche valore fisso e noto, più comunemente 0.
Puoi usare `dplyr::coalesce()` per sostituirli:

```{r}
x <- c(1, 4, 5, 7, NA)
coalesce(x, 0)
```

A volte incontrerai il problema opposto dove qualche valore concreto rappresenta effettivamente un valore mancante.
Questo tipicamente emerge in dati generati da software più vecchio che non ha un modo appropriato per rappresentare valori mancanti, quindi deve invece usare qualche valore speciale come 99 o -999.

Se possibile, gestisci questo quando leggi i dati, ad esempio, usando l'argomento `na` di `readr::read_csv()`, es., `read_csv(path, na = "99")`.
Se scopri il problema più tardi, o la tua fonte dati non fornisce un modo per gestirlo in lettura, puoi usare `dplyr::na_if()`:

```{r}
x <- c(1, 4, 5, 7, -99)
na_if(x, -99)
```

### NaN

Prima di continuare, c'è un tipo speciale di valore mancante che incontrerai di tanto in tanto: un `NaN` (pronunciato "nan"), o **n**ot **a** **n**umber.
Non è così importante conoscerlo perché generalmente si comporta proprio come `NA`:

```{r}
x <- c(NA, NaN)
x * 10
x == 1
is.na(x)
```

Nel raro caso in cui devi distinguere un `NA` da un `NaN`, puoi usare `is.nan(x)`.

Generalmente incontrerai un `NaN` quando esegui un'operazione matematica che ha un risultato indeterminato:

```{r}
0 / 0 
0 * Inf
Inf - Inf
sqrt(-1)
```

## Valori mancanti impliciti {#sec-missing-implicit}

Finora abbiamo parlato di valori mancanti che sono **esplicitamente** mancanti, cioè puoi vedere un `NA` nei tuoi dati.
Ma i valori mancanti possono anche essere **implicitamente** mancanti, se un'intera riga di dati è semplicemente assente dai dati.
Illustri la differenza con un semplice dataset che registra il prezzo di alcune azioni ogni trimestre:

```{r}
stocks <- tibble(
  year  = c(2020, 2020, 2020, 2020, 2021, 2021, 2021),
  qtr   = c(   1,    2,    3,    4,    2,    3,    4),
  price = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
```

Questo dataset ha due osservazioni mancanti:

-   Il `price` nel quarto trimestre del 2020 è esplicitamente mancante, perché il suo valore è `NA`.

-   Il `price` per il primo trimestre del 2021 è implicitamente mancante, perché semplicemente non appare nel dataset.

Un modo per pensare alla differenza è con questo koan simile al Zen:

> Un valore mancante esplicito è la presenza di un'assenza.\
>
> Un valore mancante implicito è l'assenza di una presenza.

A volte vuoi rendere i valori mancanti impliciti espliciti per avere qualcosa di fisico con cui lavorare.
In altri casi, i valori mancanti espliciti ti sono imposti dalla struttura dei dati e vuoi liberartene.
Le sezioni seguenti discutono alcuni strumenti per muoversi tra valori mancanti impliciti ed espliciti.

### Pivoting

Hai già visto uno strumento che può rendere i valori mancanti impliciti espliciti e viceversa: il pivoting.
Rendere i dati più larghi può rendere espliciti i valori mancanti impliciti perché ogni combinazione delle righe e nuove colonne deve avere qualche valore.
Ad esempio, se facciamo il pivot di `stocks` per mettere il `quarter` nelle colonne, entrambi i valori mancanti diventano espliciti:

```{r}
stocks |>
  pivot_wider(
    names_from = qtr, 
    values_from = price
  )
```

Per default, rendere i dati più lunghi preserva i valori mancanti espliciti, ma se sono valori mancanti strutturalmente che esistono solo perché i dati non sono tidy, puoi eliminarli (renderli impliciti) impostando `values_drop_na = TRUE`.
Vedi gli esempi in @sec-tidy-data per più dettagli.

### Complete

`tidyr::complete()` ti permette di generare valori mancanti espliciti fornendo un insieme di variabili che definiscono la combinazione di righe che dovrebbero esistere.
Ad esempio, sappiamo che tutte le combinazioni di `year` e `qtr` dovrebbero esistere nei dati `stocks`:

```{r}
stocks |>
  complete(year, qtr)
```

Tipicamente, chiamerai `complete()` con nomi di variabili esistenti, riempiendo le combinazioni mancanti.
Tuttavia, a volte le variabili individuali sono esse stesse incomplete, quindi puoi invece fornire i tuoi dati.
Ad esempio, potresti sapere che il dataset `stocks` dovrebbe andare dal 2019 al 2021, quindi potresti fornire esplicitamente quei valori per `year`:

```{r}
stocks |>
  complete(year = 2019:2021, qtr)
```

Se l'intervallo di una variabile è corretto, ma non tutti i valori sono presenti, potresti usare `full_seq(x, 1)` per generare tutti i valori da `min(x)` a `max(x)` spaziati di 1.

In alcuni casi, l'insieme completo di osservazioni non può essere generato da una semplice combinazione di variabili.
In quel caso, puoi fare manualmente quello che `complete()` fa per te: creare un data frame che contiene tutte le righe che dovrebbero esistere (usando qualsiasi combinazione di tecniche di cui hai bisogno), poi combinarlo con il tuo dataset originale con `dplyr::full_join()`.

### Join

Questo ci porta a un altro modo importante di rivelare osservazioni implicitamente mancanti: i join.
Imparerai di più sui join in @sec-joins, ma volevamo menzionarli rapidamente qui dato che spesso puoi sapere che i valori mancano da un dataset solo quando lo confronti con un altro.

`dplyr::anti_join(x, y)` è uno strumento particolarmente utile qui perché seleziona solo le righe in `x` che non hanno una corrispondenza in `y`.
Ad esempio, possiamo usare due `anti_join()` per rivelare che ci mancano informazioni per quattro aeroporti e 722 aerei menzionati in `flights`:

```{r}
library(nycflights13)

flights |> 
  distinct(faa = dest) |> 
  anti_join(airports)

flights |> 
  distinct(tailnum) |> 
  anti_join(planes)
```

### Esercizi

1.  Puoi trovare qualche relazione tra il carrier e le righe che sembrano mancare da `planes`?

## Fattori e gruppi vuoti

Un tipo finale di valore mancante è il gruppo vuoto, un gruppo che non contiene alcuna osservazione, che può emergere quando lavori con fattori.
Ad esempio, immagina di avere un dataset che contiene alcune informazioni sulla salute delle persone:

```{r}
health <- tibble(
  name   = c("Ikaia", "Oletta", "Leriah", "Dashay", "Tresaun"),
  smoker = factor(c("no", "no", "no", "no", "no"), levels = c("yes", "no")),
  age    = c(34, 88, 75, 47, 56),
)
```

E vogliamo contare il numero di fumatori con `dplyr::count()`:

```{r}
health |> count(smoker)
```

Questo dataset contiene solo non-fumatori, ma sappiamo che i fumatori esistono; il gruppo dei fumatori è vuoto.
Possiamo chiedere a `count()` di mantenere tutti i gruppi, anche quelli non visti nei dati usando `.drop = FALSE`:

```{r}
health |> count(smoker, .drop = FALSE)
```

Lo stesso principio si applica agli assi discreti di ggplot2, che elimineranno anche i livelli che non hanno alcun valore.
Puoi forzarli a visualizzare fornendo `drop = FALSE` all'asse discreto appropriato:

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: 
#|   - A bar chart with a single value on the x-axis, "no".
#|   - The same bar chart as the last plot, but now with two values on
#|     the x-axis, "yes" and "no". There is no bar for the "yes" category.
ggplot(health, aes(x = smoker)) +
  geom_bar() +
  scale_x_discrete()

ggplot(health, aes(x = smoker)) +
  geom_bar() +
  scale_x_discrete(drop = FALSE)
```

Lo stesso problema emerge più generalmente con `dplyr::group_by()`.
E ancora puoi usare `.drop = FALSE` per preservare tutti i livelli dei fattori:

```{r}
#| warning: false
health |> 
  group_by(smoker, .drop = FALSE) |> 
  summarize(
    n = n(),
    mean_age = mean(age),
    min_age = min(age),
    max_age = max(age),
    sd_age = sd(age)
  )
```

Otteniamo alcuni risultati interessanti qui perché quando riassumiamo un gruppo vuoto, le funzioni di riassunto sono applicate a vettori di lunghezza zero.
C'è una distinzione importante tra vettori vuoti, che hanno lunghezza 0, e valori mancanti, ognuno dei quali ha lunghezza 1.

```{r}
# Un vettore contenente due valori mancanti
x1 <- c(NA, NA)
length(x1)

# Un vettore che non contiene nulla
x2 <- numeric()
length(x2)
```

Tutte le funzioni di riassunto funzionano con vettori di lunghezza zero, ma potrebbero restituire risultati che sono sorprendenti a prima vista.
Qui vediamo `mean(age)` restituire `NaN` perché `mean(age)` = `sum(age)/length(age)` che qui è 0/0.
`max()` e `min()` restituiscono -Inf e Inf per vettori vuoti quindi se combini i risultati con un vettore non vuoto di nuovi dati e ricalcoli otterrai il minimo o massimo dei nuovi dati[^missing-values-1].

[^missing-values-1]: In altre parole, `min(c(x, y))` è sempre uguale a `min(min(x), min(y))`.

A volte un approccio più semplice è eseguire il riassunto e poi rendere espliciti i valori mancanti impliciti con `complete()`.

```{r}
health |> 
  group_by(smoker) |> 
  summarize(
    n = n(),
    mean_age = mean(age),
    min_age = min(age),
    max_age = max(age),
    sd_age = sd(age)
  ) |> 
  complete(smoker)
```

Il principale svantaggio di questo approccio è che ottieni un `NA` per il conteggio, anche se sai che dovrebbe essere zero.

## Riepilogo

I valori mancanti sono strani!
A volte sono registrati come un `NA` esplicito ma altre volte li noti solo per la loro assenza.
Questo capitolo ti ha dato alcuni strumenti per lavorare con valori mancanti espliciti, strumenti per scoprire valori mancanti impliciti, e ha discusso alcuni dei modi in cui l'implicito può diventare esplicito e viceversa.

Nel prossimo capitolo, affrontiamo il capitolo finale di questa parte del libro: i join.
Questo è un po' un cambiamento rispetto ai capitoli finora perché discuteremo strumenti che lavorano con i data frame nel loro insieme, non qualcosa che metti dentro un data frame.