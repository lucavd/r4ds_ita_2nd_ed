# Workflow: script e progetti {#sec-workflow-scripts-projects}

```{r}
#| echo: false
source("_common.R")
```

Questo capitolo ti introdurr√† a due strumenti essenziali per organizzare il tuo codice: script e progetti.

## Script

Finora, hai usato la console per eseguire il codice.
Quello √® un ottimo posto per iniziare, ma scoprirai che diventa piuttosto angusto quando crei grafici ggplot2 pi√π complessi e pipeline dplyr pi√π lunghe.
Per darti pi√π spazio per lavorare, usa l'editor di script.
Aprilo cliccando sul menu File, selezionando New File, poi R script, o usando la scorciatoia da tastiera Cmd/Ctrl + Shift + N.
Ora vedrai quattro pannelli, come in @fig-rstudio-script.
L'editor di script √® un ottimo posto per sperimentare con il tuo codice.
Quando vuoi cambiare qualcosa, non devi riscrivere tutto, puoi semplicemente modificare lo script e rieseguirlo.
E una volta che hai scritto codice che funziona e fa quello che vuoi, puoi salvarlo come file di script per tornarci facilmente pi√π tardi.

```{r}
#| label: fig-rstudio-script
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Aprire l'editor di script aggiunge un nuovo pannello in alto a sinistra dell'
#|   IDE.
#| fig-alt: |
#|   RStudio IDE with Editor, Console, and Output highlighted.
knitr::include_graphics("diagrams/rstudio/script.png", dpi = 270)
```

### Eseguire codice

L'editor di script √® un posto eccellente per costruire grafici ggplot2 complessi o lunghe sequenze di manipolazioni dplyr.
La chiave per usare l'editor di script efficacemente √® memorizzare una delle scorciatoie da tastiera pi√π importanti: Cmd/Ctrl + Enter.
Questa esegue l'espressione R corrente nella console.
Per esempio, prendi il codice qui sotto.

```{r}
#| eval: false
library(dplyr)
library(nycflights13)

not_cancelled <- flights |> 
  filter(!is.na(dep_delay)‚ñà, !is.na(arr_delay))

not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(mean = mean(dep_delay))
```

Se il tuo cursore √® a ‚ñà, premere Cmd/Ctrl + Enter eseguir√† il comando completo che genera `not_cancelled`.
Sposter√† anche il cursore alla dichiarazione seguente (che inizia con `not_cancelled |>`).
Questo rende facile scorrere tutto il tuo script premendo ripetutamente Cmd/Ctrl + Enter.

Invece di eseguire il tuo codice espressione per espressione, puoi anche eseguire lo script completo in un solo passaggio con Cmd/Ctrl + Shift + S.
Fare questo regolarmente √® un ottimo modo per assicurarti di aver catturato tutte le parti importanti del tuo codice nello script.

Ti consigliamo di iniziare sempre il tuo script con i pacchetti di cui hai bisogno.
In questo modo, se condividi il tuo codice con altri, possono facilmente vedere quali pacchetti devono installare.
Nota, tuttavia, che non dovresti mai includere `install.packages()` in uno script che condividi.
√à sconsiderato consegnare uno script che cambier√† qualcosa sul loro computer se non stanno attenti!

Quando lavori sui capitoli futuri, ti consigliamo vivamente di iniziare nell'editor di script e praticare le tue scorciatoie da tastiera.
Col tempo, inviare codice alla console in questo modo diventer√† cos√¨ naturale che non ci penserai nemmeno.

### Diagnostica di RStudio

Nell'editor di script, RStudio evidenzier√† gli errori di sintassi con una linea ondulata rossa e una croce nella barra laterale:

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|   Editor di script con lo script x y <- 10. Una X rossa indica che c'√® 
#|   un errore di sintassi. L'errore di sintassi √® anche evidenziato con una linea ondulata rossa.
knitr::include_graphics("screenshots/rstudio-diagnostic.png")
```

Passa il mouse sopra la croce per vedere qual √® il problema:

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|   Editor di script con lo script x y <- 10. Una X rossa indica che c'√® 
#|   un errore di sintassi. L'errore di sintassi √® anche evidenziato con una linea ondulata rossa.
#|   Hovering over the X shows a text box with the text unexpected token y and 
#|   token <- inaspettato.
knitr::include_graphics("screenshots/rstudio-diagnostic-tip.png")
```

RStudio ti far√† anche sapere di potenziali problemi:

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|   Editor di script con lo script 3 == NA. Un punto esclamativo giallo 
#|   indica che potrebbe esserci un problema potenziale. Passare il mouse sopra il 
#|   punto esclamativo mostra una casella di testo con il testo usa is.na per verificare 
#|   se l'espressione valuta a NA.
knitr::include_graphics("screenshots/rstudio-diagnostic-warn.png")
```

### Salvare e denominare

RStudio salva automaticamente i contenuti dell'editor di script quando esci, e li ricarica automaticamente quando riapri.
Tuttavia, √® una buona idea evitare Untitled1, Untitled2, Untitled3, e cos√¨ via e invece salvare i tuoi script e dare loro nomi informativi.

Potrebbe essere tentante chiamare i tuoi file `code.R` o `myscript.R`, ma dovresti pensarci un po' di pi√π prima di scegliere un nome per il tuo file.
Tre principi importanti per la denominazione dei file sono i seguenti:

1.  I nomi dei file dovrebbero essere leggibili dalle **macchine**: evita spazi, simboli e caratteri speciali. Non fare affidamento sulla sensibilit√† alle maiuscole per distinguere i file.
2.  I nomi dei file dovrebbero essere leggibili dagli **umani**: usa i nomi dei file per descrivere cosa c'√® nel file.
3.  I nomi dei file dovrebbero funzionare bene con l'ordinamento predefinito: inizia i nomi dei file con numeri in modo che l'ordinamento alfabetico li metta nell'ordine in cui vengono usati.

Per esempio, supponi di avere i seguenti file in una cartella del progetto.

```         
alternative model.R
code for exploratory analysis.r
finalreport.qmd
FinalReport.qmd
fig 1.png
Figure_02.png
model_first_try.R
run-first.r
temp.txt
```

Ci sono una variet√† di problemi qui: √® difficile trovare quale file eseguire per primo, i nomi dei file contengono spazi, ci sono due file con lo stesso nome ma diversa capitalizzazione (`finalreport` vs. `FinalReport`[^workflow-scripts-1]), e alcuni nomi non descrivono i loro contenuti (`run-first` e `temp`).

[^workflow-scripts-1]: Per non parlare del fatto che stai tentando il destino usando "final" nel nome üòÜ Il fumetto Piled Higher and Deeper ha una [striscia divertente su questo](https://phdcomics.com/comics/archive.php?comicid=1531).

Ecco un modo migliore di denominare e organizzare lo stesso insieme di file:

```         
01-load-data.R
02-exploratory-analysis.R
03-model-approach-1.R
04-model-approach-2.R
fig-01.png
fig-02.png
report-2022-03-20.qmd
report-2022-04-02.qmd
report-draft-notes.txt
```

Numerare gli script chiave rende ovvio in quale ordine eseguirli e uno schema di denominazione coerente rende pi√π facile vedere cosa varia.
Inoltre, le figure sono etichettate in modo simile, i report sono distinti dalle date incluse nei nomi dei file, e `temp` √® rinominato in `report-draft-notes` per descrivere meglio i suoi contenuti.
Se hai molti file in una directory, √® raccomandato portare l'organizzazione un passo oltre e mettere diversi tipi di file (script, figure, ecc.) in directory diverse.

## Progetti

Un giorno, dovrai uscire da R, andare a fare qualcos'altro, e tornare alla tua analisi pi√π tardi.
Un giorno, lavorerai su multiple analisi simultaneamente e vorrai tenerle separate.
Un giorno, dovrai portare dati dal mondo esterno in R e inviare risultati numerici e figure da R di nuovo nel mondo.

Per gestire queste situazioni della vita reale, devi prendere due decisioni:

1.  Qual √® la fonte di verit√†?
    Cosa salverai come tuo record duraturo di quello che √® successo?

2.  Dove vive la tua analisi?

### Qual √® la fonte di verit√†?

Come principiante, va bene fare affidamento sul tuo Environment corrente per contenere tutti gli oggetti che hai creato durante la tua analisi.
Tuttavia, per rendere pi√π facile lavorare su progetti pi√π grandi o collaborare con altri, la tua fonte di verit√† dovrebbero essere gli script R.
Con i tuoi script R (e i tuoi file di dati), puoi ricreare l'environment.
Con solo il tuo environment, √® molto pi√π difficile ricreare i tuoi script R: dovrai o riscrivere molto codice a memoria (inevitabilmente facendo errori lungo la strada) o dovrai scavare accuratamente nella tua cronologia R.

Per aiutare a mantenere i tuoi script R come fonte di verit√† per la tua analisi, ti consigliamo vivamente di istruire RStudio a non preservare il tuo workspace tra le sessioni.
Puoi farlo eseguendo `usethis::use_blank_slate()`[^workflow-scripts-2] o imitando le opzioni mostrate in @fig-blank-slate. Questo ti causer√† un po' di dolore a breve termine, perch√© ora quando riavvii RStudio, non ricorder√† pi√π il codice che hai eseguito l'ultima volta n√© gli oggetti che hai creato o i dataset che hai letto saranno disponibili per l'uso.
Ma questo dolore a breve termine ti salva dall'agonia a lungo termine perch√© ti costringe a catturare tutte le procedure importanti nel tuo codice.
Non c'√® niente di peggio che scoprire tre mesi dopo il fatto che hai memorizzato solo i risultati di un calcolo importante nel tuo environment, non il calcolo stesso nel tuo codice.

[^workflow-scripts-2]: Se non hai usethis installato, puoi installarlo con `install.packages("usethis")`.

```{r}
#| label: fig-blank-slate
#| echo: false
#| fig-cap: |
#|   Copia queste opzioni nelle tue opzioni RStudio per iniziare sempre la tua 
#|   sessione RStudio con una lavagna pulita.
#| fig-alt: |
#|   Finestra Opzioni Globali di RStudio dove l'opzione Ripristina .RData nel workspace 
#|   all'avvio non √® selezionata. Inoltre, l'opzione Salva workspace in .RData 
#|   all'uscita √® impostata su Mai.
#| out-width: ~
knitr::include_graphics("diagrams/rstudio/clean-slate.png", dpi = 270)
```

C'√® una grande coppia di scorciatoie da tastiera che funzioneranno insieme per assicurarti di aver catturato le parti importanti del tuo codice nell'editor:

1.  Premi Cmd/Ctrl + Shift + 0/F10 per riavviare R.
2.  Premi Cmd/Ctrl + Shift + S per rieseguire lo script corrente.

Usiamo collettivamente questo pattern centinaia di volte a settimana.

In alternativa, se non usi le scorciatoie da tastiera, puoi andare su Session \> Restart R e poi evidenziare e rieseguire il tuo script corrente.

::: callout-note
## RStudio server

Se stai usando RStudio server, la tua sessione R non viene mai riavviata per impostazione predefinita.
Quando chiudi la tua scheda del server RStudio, potrebbe sembrare che stai chiudendo R, ma il server in realt√† lo mantiene in esecuzione in background.
La prossima volta che torni, sarai esattamente nello stesso posto dove hai lasciato.
Questo rende ancora pi√π importante riavviare regolarmente R in modo da iniziare con una lavagna pulita.
:::

### Dove vive la tua analisi?

R ha una nozione potente della **directory di lavoro**.
Questo √® dove R cerca i file che gli chiedi di caricare, e dove metter√† qualsiasi file che gli chiedi di salvare.
RStudio mostra la tua directory di lavoro corrente in cima alla console:

```{r}
#| echo: false
#| fig-alt: |
#|   La scheda Console mostra la directory di lavoro corrente come 
#|   ~/Documents/r4ds.
#| out-width: ~
knitr::include_graphics("screenshots/rstudio-wd.png")
```

E puoi stampare questo nel codice R eseguendo `getwd()`:

```{r}
#| eval: false
getwd()
#> [1] "/Users/hadley/Documents/r4ds"
```

In questa sessione R, la directory di lavoro corrente (pensala come "casa") √® nella cartella Documents di hadley, in una sottocartella chiamata r4ds.
Questo codice restituir√† un risultato diverso quando lo esegui, perch√© il tuo computer ha una struttura di directory diversa da quella di Hadley!

Come utente R principiante, va bene lasciare che la tua directory di lavoro sia la tua directory home, directory documenti, o qualsiasi altra directory strana sul tuo computer.
Ma sei a pi√π di qualche capitolo in questo libro, e non sei pi√π un principiante.
Molto presto ora dovresti evolvere nell'organizzare i tuoi progetti in directory e, quando lavori su un progetto, impostare la directory di lavoro di R alla directory associata.

Puoi impostare la directory di lavoro dall'interno di R ma **non lo** **raccomandiamo**:

```{r}
#| eval: false
setwd("/path/to/my/CoolProject")
```

C'√® un modo migliore; un modo che ti mette anche sul percorso per gestire il tuo lavoro R come un esperto.
Quel modo √® il **progetto** **RStudio**.

### Progetti RStudio

Tenere tutti i file associati con un dato progetto (dati di input, script R, risultati analitici, e figure) insieme in una directory √® una pratica cos√¨ saggia e comune che RStudio ha supporto integrato per questo tramite i **progetti**.
Creiamo un progetto da usare mentre lavori attraverso il resto di questo libro.
Clicca File \> New Project, poi segui i passaggi mostrati in @fig-new-project.

```{r}
#| label: fig-new-project
#| echo: false
#| fig-cap: | 
#|   Per creare un nuovo progetto: (sopra) prima clicca New Directory, poi (centro)
#|   clicca New Project, poi (sotto) riempi il nome della directory (progetto),
#|   scegli una buona sottodirectory per la sua casa e clicca Create Project.
#| fig-alt: |
#|   Tre screenshot del menu New Project. Nel primo screenshot, 
#|   √® mostrata la finestra Create Project e New Directory √® selezionato. 
#|   Nel secondo screenshot, √® mostrata la finestra Project Type e 
#|   Empty Project √® selezionato. Nel terzo screenshot, √® mostrata la finestra Create New
#|   Project e il nome della directory √® dato come r4ds e
#|   il progetto viene creato come sottodirectory del Desktop.
#| out-width: ~
knitr::include_graphics("diagrams/new-project.png")
```

Chiama il tuo progetto `r4ds` e pensa attentamente a quale sottodirectory metti il progetto.
Se non lo memorizzi da qualche parte sensata, sar√† difficile trovarlo in futuro!

Una volta che questo processo √® completo, avrai un nuovo progetto RStudio solo per questo libro.
Controlla che la "casa" del tuo progetto sia la directory di lavoro corrente:

```{r}
#| eval: false
getwd()
#> [1] /Users/hadley/Documents/r4ds
```

Ora inserisci i seguenti comandi nell'editor di script, e salva il file, chiamandolo "diamonds.R".
Poi, crea una nuova cartella chiamata "data".
Puoi farlo cliccando sul bottone "New Folder" nel pannello Files in RStudio.
Infine, esegui lo script completo che salver√† un file PNG e CSV nella tua directory del progetto.
Non preoccuparti dei dettagli, li imparerai pi√π tardi nel libro.

```{r}
#| label: toy-line
#| eval: false
library(tidyverse)

ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_hex()
ggsave("diamonds.png")

write_csv(diamonds, "data/diamonds.csv")
```

Esci da RStudio.
Ispeziona la cartella associata al tuo progetto --- nota il file `.Rproj`.
Fai doppio clic su quel file per riaprire il progetto.
Nota che torni dove avevi lasciato: √® la stessa directory di lavoro e cronologia comandi, e tutti i file su cui stavi lavorando sono ancora aperti.
Poich√© hai seguito le nostre istruzioni sopra, avrai, tuttavia, un environment completamente fresco, garantendo che stai iniziando con una lavagna pulita.

Nel tuo modo specifico del SO preferito, cerca `diamonds.png` nel tuo computer e troverai il PNG (nessuna sorpresa) ma *anche lo script che l'ha creato* (`diamonds.R`).
Questa √® una grande vittoria!
Un giorno, vorrai rifare una figura o semplicemente capire da dove √® venuta.
Se salvi rigorosamente le figure nei file **con codice R** e mai con il mouse o gli appunti, sarai in grado di riprodurre il vecchio lavoro con facilit√†!

### Percorsi relativi e assoluti

Una volta che sei dentro un progetto, dovresti usare solo percorsi relativi e non percorsi assoluti.
Qual √® la differenza?
Un percorso relativo √® relativo alla directory di lavoro, cio√® la casa del progetto.
Quando Hadley ha scritto `data/diamonds.csv` sopra era una scorciatoia per `/Users/hadley/Documents/r4ds/data/diamonds.csv`.
Ma soprattutto, se Mine eseguisse questo codice sul suo computer, punterebbe a `/Users/Mine/Documents/r4ds/data/diamonds.csv`.
Questo √® il motivo per cui i percorsi relativi sono importanti: funzioneranno indipendentemente da dove finisce la cartella del progetto R.

I percorsi assoluti puntano allo stesso posto indipendentemente dalla tua directory di lavoro.
Sembrano un po' diversi a seconda del tuo sistema operativo.
Su Windows iniziano con una lettera di unit√† (es., `C:`) o due barre inverse (es., `\\servername`) e su Mac/Linux iniziano con una barra "/" (es., `/users/hadley`).
**Non** dovresti **mai** usare percorsi assoluti nei tuoi script, perch√© ostacolano la condivisione: nessun altro avr√† esattamente la stessa configurazione di directory come te.

C'√® un'altra differenza importante tra i sistemi operativi: come separi i componenti del percorso.
Mac e Linux usano barre (es., `data/diamonds.csv`) e Windows usa barre inverse (es., `data\diamonds.csv`).
R pu√≤ lavorare con entrambi i tipi (non importa quale piattaforma stai attualmente usando), ma sfortunatamente, le barre inverse significano qualcosa di speciale per R, e per ottenere una singola barra inversa nel percorso, devi digitare due barre inverse!
Questo rende la vita frustrante, quindi raccomandiamo di usare sempre lo stile Linux/Mac con barre in avanti.

## Esercizi

1.  Vai all'account Twitter RStudio Tips, <https://twitter.com/rstudiotips> e trova un consiglio che sembra interessante.
    Pratica usandolo!

2.  Quali altri errori comuni riporter√† la diagnostica di RStudio?
    Leggi <https://support.posit.co/hc/en-us/articles/205753617-Code-Diagnostics> per scoprirlo.

## Riassunto

In questo capitolo, hai imparato come organizzare il tuo codice R in script (file) e progetti (directory).
Molto come lo stile del codice, questo pu√≤ sembrare lavoro burocratico all'inizio.
Ma mentre accumuli pi√π codice attraverso progetti multipli, imparerai ad apprezzare come un po' di organizzazione in anticipo pu√≤ farti risparmiare un sacco di tempo lungo la strada.

In riassunto, script e progetti ti danno un workflow solido che ti servir√† bene in futuro:

-   Crea un progetto RStudio per ogni progetto di analisi dati.
-   Salva i tuoi script (con nomi informativi) nel progetto, modificali, eseguili a pezzi o come un tutto. Riavvia R frequentemente per assicurarti di aver catturato tutto nei tuoi script.
-   Usa solo percorsi relativi, non percorsi assoluti.

Poi tutto quello di cui hai bisogno √® in un posto e chiaramente separato da tutti gli altri progetti su cui stai lavorando.

Finora, abbiamo lavorato con dataset inclusi dentro i pacchetti R.
Questo rende pi√π facile fare un po' di pratica su dati pre-preparati, ma ovviamente i tuoi dati non saranno disponibili in questo modo.
Quindi nel prossimo capitolo, imparerai come caricare dati dal disco nella tua sessione R usando il pacchetto readr.