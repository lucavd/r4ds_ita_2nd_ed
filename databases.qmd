# Database {#sec-import-databases}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

Un'enorme quantità di dati risiede nei database, quindi è essenziale sapere come accedervi.
A volte puoi chiedere a qualcuno di scaricare un'istantanea in un file `.csv` per te, ma questo diventa rapidamente doloroso: ogni volta che devi apportare una modifica dovrai comunicare con un altro essere umano.
Vuoi essere in grado di accedere direttamente al database per ottenere i dati di cui hai bisogno, quando ne hai bisogno.

In questo capitolo, imparerai prima le basi del pacchetto DBI: come usarlo per connetterti a un database e poi recuperare dati con una query SQL[^databases-1].
**SQL**, abbreviazione di **s**tructured **q**uery **l**anguage, è la lingua franca dei database ed è un linguaggio importante da imparare per tutti i data scientist.
Detto questo, non inizieremo con SQL, ma invece ti insegneremo dbplyr, che può tradurre il tuo codice dplyr in SQL.
Useremo questo come modo per insegnarti alcune delle caratteristiche più importanti di SQL.
Non diventerai un maestro di SQL alla fine del capitolo, ma sarai in grado di identificare i componenti più importanti e capire cosa fanno.

[^databases-1]: SQL si pronuncia "esse-qu-elle" o "sequel".

### Prerequisiti

In questo capitolo, introdurremo DBI e dbplyr.
DBI è un'interfaccia di basso livello che si connette ai database ed esegue SQL; dbplyr è un'interfaccia di alto livello che traduce il tuo codice dplyr in query SQL e poi le esegue con DBI.

```{r}
#| label: setup
#| message: false
library(DBI)
library(dbplyr)
library(tidyverse)
```

## Basi dei database

Al livello più semplice, puoi pensare a un database come a una collezione di data frame, chiamate **tabelle** nella terminologia dei database.
Come un data frame, una tabella di database è una collezione di colonne nominate, dove ogni valore nella colonna è dello stesso tipo.
Ci sono tre differenze di alto livello tra data frame e tabelle di database:

-   Le tabelle di database sono memorizzate su disco e possono essere arbitrariamente grandi.
    I data frame sono memorizzati in memoria e sono fondamentalmente limitati (anche se quel limite è comunque abbastanza grande per molti problemi).

-   Le tabelle di database hanno quasi sempre degli indici.
    Proprio come l'indice di un libro, un indice di database rende possibile trovare rapidamente le righe di interesse senza dover guardare ogni singola riga.
    I data frame e i tibble non hanno indici, ma i data.table sì, che è uno dei motivi per cui sono così veloci.

-   La maggior parte dei database classici è ottimizzata per raccogliere rapidamente i dati, non per analizzare i dati esistenti.
    Questi database sono chiamati **orientati alle righe** perché i dati sono memorizzati riga per riga, piuttosto che colonna per colonna come R.
    Più recentemente, c'è stato molto sviluppo di database **orientati alle colonne** che rendono molto più veloce l'analisi dei dati esistenti.

I database sono gestiti dai sistemi di gestione di database (**DBMS** in breve), che si presentano in tre forme di base:

-   I DBMS **client-server** funzionano su un potente server centrale, a cui ti connetti dal tuo computer (il client). Sono ottimi per condividere dati con più persone in un'organizzazione. I DBMS client-server popolari includono PostgreSQL, MariaDB, SQL Server e Oracle.
-   I DBMS **cloud**, come Snowflake, Amazon RedShift e Google BigQuery, sono simili ai DBMS client-server, ma funzionano nel cloud. Questo significa che possono facilmente gestire dataset estremamente grandi e possono fornire automaticamente più risorse di calcolo quando necessario.
-   I DBMS **in-process**, come SQLite o duckdb, funzionano interamente sul tuo computer. Sono ottimi per lavorare con grandi dataset dove sei l'utente principale.

## Connettersi a un database

Per connetterti al database da R, userai una coppia di pacchetti:

-   Userai sempre DBI (**d**ata**b**ase **i**nterface) perché fornisce un insieme di funzioni generiche che si connettono al database, caricano dati, eseguono query SQL, ecc.

-   Userai anche un pacchetto su misura per il DBMS a cui ti stai connettendo.
    Questo pacchetto traduce i comandi DBI generici nelle specificità necessarie per un dato DBMS.
    Di solito c'è un pacchetto per ogni DBMS, ad es.
    RPostgres per PostgreSQL e RMariaDB per MySQL.

Se non riesci a trovare un pacchetto specifico per il tuo DBMS, puoi solitamente usare il pacchetto odbc invece.
Questo usa il protocollo ODBC supportato da molti DBMS.
odbc richiede un po' più di configurazione perché dovrai anche installare un driver ODBC e dire al pacchetto odbc dove trovarlo.

Concretamente, crei una connessione al database usando `DBI::dbConnect()`.
Il primo argomento seleziona il DBMS[^databases-2], poi il secondo e i successivi argomenti descrivono come connettersi ad esso (cioè dove si trova e le credenziali necessarie per accedervi).
Il seguente codice mostra un paio di esempi tipici:

[^databases-2]: Tipicamente, questa è l'unica funzione che userai dal pacchetto client, quindi raccomandiamo di usare `::` per estrarre quella singola funzione, piuttosto che caricare il pacchetto completo con `library()`.

```{r}
#| eval: false
con <- DBI::dbConnect(
  RMariaDB::MariaDB(), 
  username = "foo"
)
con <- DBI::dbConnect(
  RPostgres::Postgres(), 
  hostname = "databases.mycompany.com", 
  port = 1234
)
```

I dettagli precisi della connessione variano molto da DBMS a DBMS quindi sfortunatamente non possiamo coprire tutti i dettagli qui.
Questo significa che dovrai fare un po' di ricerca da solo.
Tipicamente puoi chiedere agli altri data scientist del tuo team o parlare con il tuo DBA (**d**ata**b**ase **a**dministrator).
La configurazione iniziale richiederà spesso un po' di smanettamento (e forse qualche ricerca su Google) per farla funzionare correttamente, ma generalmente dovrai farlo solo una volta.

### In questo libro

Configurare un DBMS client-server o cloud sarebbe una seccatura per questo libro, quindi useremo invece un DBMS in-process che vive interamente in un pacchetto R: duckdb.
Grazie alla magia di DBI, l'unica differenza tra usare duckdb e qualsiasi altro DBMS è come ti connetterai al database.
Questo lo rende ottimo per insegnare perché puoi facilmente eseguire questo codice così come facilmente prendere quello che impari e applicarlo altrove.

Connettersi a duckdb è particolarmente semplice perché le impostazioni predefinite creano un database temporaneo che viene eliminato quando esci da R.
Questo è ottimo per imparare perché garantisce che inizierai da zero ogni volta che riavvii R:

```{r}
con <- DBI::dbConnect(duckdb::duckdb())
```

duckdb è un database ad alte prestazioni progettato molto per le esigenze di un data scientist.
Lo usiamo qui perché è molto facile iniziare, ma è anche capace di gestire gigabyte di dati con grande velocità.
Se vuoi usare duckdb per un vero progetto di analisi dati, dovrai anche fornire l'argomento `dbdir` per creare un database persistente e dire a duckdb dove salvarlo.
Assumendo che stai usando un progetto (@sec-workflow-scripts-projects), è ragionevole memorizzarlo nella directory `duckdb` del progetto corrente:

```{r}
#| eval: false
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "duckdb")
```

### Caricare alcuni dati {#sec-load-data}

Dato che questo è un nuovo database, dobbiamo iniziare aggiungendo alcuni dati.
Qui aggiungeremo i dataset `mpg` e `diamonds` da ggplot2 usando `DBI::dbWriteTable()`.
L'uso più semplice di `dbWriteTable()` ha bisogno di tre argomenti: una connessione al database, il nome della tabella da creare nel database e un data frame di dati.

```{r}
dbWriteTable(con, "mpg", ggplot2::mpg)
dbWriteTable(con, "diamonds", ggplot2::diamonds)
```

Se stai usando duckdb in un progetto reale, raccomandiamo vivamente di imparare `duckdb_read_csv()` e `duckdb_register_arrow()`.
Questi ti danno modi potenti e performanti per caricare rapidamente i dati direttamente in duckdb, senza dover prima caricarli in R.
Mostreremo anche una tecnica utile per caricare più file in un database in @sec-save-database.

### Basi di DBI

Puoi verificare che i dati siano caricati correttamente usando un paio di altre funzioni DBI: `dbListTables()` elenca tutte le tabelle nel database[^databases-3] e `dbReadTable()` recupera i contenuti di una tabella.

[^databases-3]: Almeno, tutte le tabelle che hai il permesso di vedere.

```{r}
dbListTables(con)

con |> 
  dbReadTable("diamonds") |> 
  as_tibble()
```

`dbReadTable()` restituisce un `data.frame` quindi usiamo `as_tibble()` per convertirlo in un tibble in modo che si stampi bene.

Se conosci già SQL, puoi usare `dbGetQuery()` per ottenere i risultati dell'esecuzione di una query sul database:

```{r}
sql <- "
  SELECT carat, cut, clarity, color, price 
  FROM diamonds 
  WHERE price > 15000
"
as_tibble(dbGetQuery(con, sql))
```

Se non hai mai visto SQL prima, non preoccuparti!
Imparerai di più su di esso a breve.
Ma se lo leggi attentamente, potresti indovinare che seleziona cinque colonne del dataset diamonds e tutte le righe dove `price` è maggiore di 15.000.

## Basi di dbplyr

Ora che ci siamo connessi a un database e abbiamo caricato alcuni dati, possiamo iniziare a imparare dbplyr.
dbplyr è un **backend** di dplyr, il che significa che continui a scrivere codice dplyr ma il backend lo esegue diversamente.
In questo caso, dbplyr traduce in SQL; altri backend includono [dtplyr](https://dtplyr.tidyverse.org) che traduce in [data.table](https://r-datatable.com), e [multidplyr](https://multidplyr.tidyverse.org) che esegue il tuo codice su più core.

Per usare dbplyr, devi prima usare `tbl()` per creare un oggetto che rappresenta una tabella di database:

```{r}
diamonds_db <- tbl(con, "diamonds")
diamonds_db
```

::: callout-note
Ci sono due altri modi comuni per interagire con un database.
Primo, molti database aziendali sono molto grandi quindi hai bisogno di una gerarchia per mantenere tutte le tabelle organizzate.
In quel caso potresti aver bisogno di fornire uno schema, o un catalogo e uno schema, per scegliere la tabella che ti interessa:

```{r}
#| eval: false
diamonds_db <- tbl(con, in_schema("sales", "diamonds"))
diamonds_db <- tbl(con, in_catalog("north_america", "sales", "diamonds"))
```

Altre volte potresti voler usare la tua query SQL come punto di partenza:

```{r}
#| eval: false
diamonds_db <- tbl(con, sql("SELECT * FROM diamonds"))
```
:::

Questo oggetto è **lazy**; quando usi i verbi dplyr su di esso, dplyr non fa alcun lavoro: registra solo la sequenza di operazioni che vuoi eseguire e le esegue solo quando necessario.
Per esempio, prendi la seguente pipeline:

```{r}
big_diamonds_db <- diamonds_db |> 
  filter(price > 15000) |> 
  select(carat:clarity, price)

big_diamonds_db
```

Puoi dire che questo oggetto rappresenta una query di database perché stampa il nome del DBMS in alto, e mentre ti dice il numero di colonne, tipicamente non conosce il numero di righe.
Questo è perché trovare il numero totale di righe richiede solitamente di eseguire la query completa, qualcosa che stiamo cercando di evitare.

Puoi vedere il codice SQL generato dalla funzione dplyr `show_query()`.
Se conosci dplyr, questo è un ottimo modo per imparare SQL!
Scrivi del codice dplyr, fai tradurre dbplyr in SQL, e poi prova a capire come i due linguaggi si corrispondono.

```{r}
big_diamonds_db |>
  show_query()
```

Per riportare tutti i dati in R, chiami `collect()`.
Dietro le quinte, questo genera l'SQL, chiama `dbGetQuery()` per ottenere i dati, poi trasforma il risultato in un tibble:

```{r}
big_diamonds <- big_diamonds_db |> 
  collect()
big_diamonds
```

Tipicamente, userai dbplyr per selezionare i dati che vuoi dal database, eseguendo filtraggio e aggregazione di base usando le traduzioni descritte sotto.
Poi, una volta che sei pronto ad analizzare i dati con funzioni uniche di R, farai `collect()` sui dati per ottenere un tibble in memoria, e continuerai il tuo lavoro con codice R puro.

## SQL

Il resto del capitolo ti insegnerà un po' di SQL attraverso la lente di dbplyr.
È un'introduzione piuttosto non tradizionale a SQL ma speriamo che ti porterà rapidamente al passo con le basi.
Fortunamente, se capisci dplyr sei in un'ottima posizione per imparare rapidamente SQL perché molti dei concetti sono gli stessi.

Esploreremo la relazione tra dplyr e SQL usando un paio di vecchi amici dal pacchetto nycflights13: `flights` e `planes`.
Questi dataset sono facili da inserire nel nostro database di apprendimento perché dbplyr viene con una funzione che copia le tabelle da nycflights13 al nostro database:

```{r}
dbplyr::copy_nycflights13(con)
flights <- tbl(con, "flights")
planes <- tbl(con, "planes")
```

```{r}
#| echo: false
options(dplyr.strict_sql = TRUE)
```

### Basi di SQL

I componenti di livello superiore di SQL sono chiamati **statement**.
Gli statement comuni includono `CREATE` per definire nuove tabelle, `INSERT` per aggiungere dati, e `SELECT` per recuperare dati.
Ci concentreremo sugli statement `SELECT`, chiamati anche **query**, perché sono quasi esclusivamente quello che userai come data scientist.

Una query è composta da **clausole**.
Ci sono cinque clausole importanti: `SELECT`, `FROM`, `WHERE`, `ORDER BY`, e `GROUP BY`. Ogni query deve avere le clausole `SELECT`[^databases-4] e `FROM`[^databases-5] e la query più semplice è `SELECT * FROM table`, che seleziona tutte le colonne dalla tabella specificata
. Questo è quello che dbplyr genera per una tabella non modificata
:

[^databases-4]: In modo confuso, a seconda del contesto, `SELECT` è sia uno statement che una clausola.
    Per evitare questa confusione, useremo generalmente query `SELECT` invece di statement `SELECT`.

[^databases-5]: Ok, tecnicamente, solo `SELECT` è richiesto, dato che puoi scrivere query come `SELECT 1+1` per eseguire calcoli di base.
    Ma se vuoi lavorare con i dati (come fai sempre!) avrai anche bisogno di una clausola `FROM`.

```{r}
flights |> show_query()
planes |> show_query()
```

`WHERE` e `ORDER BY` controllano quali righe sono incluse e come sono ordinate:

```{r}
flights |> 
  filter(dest == "IAH") |> 
  arrange(dep_delay) |>
  show_query()
```

`GROUP BY` converte la query in un riassunto, causando l'aggregazione:

```{r}
flights |> 
  group_by(dest) |> 
  summarize(dep_delay = mean(dep_delay, na.rm = TRUE)) |> 
  show_query()
```

Ci sono due differenze importanti tra i verbi dplyr e le clausole SELECT:

-   In SQL, il caso non importa: puoi scrivere `select`, `SELECT`, o anche `SeLeCt`. In questo libro ci atterremo alla convenzione comune di scrivere le parole chiave SQL in maiuscolo per distinguerle dai nomi di tabelle o variabili.
-   In SQL, l'ordine importa: devi sempre scrivere le clausole nell'ordine `SELECT`, `FROM`, `WHERE`, `GROUP BY`, `ORDER BY`. In modo confuso, questo ordine non corrisponde a come le clausole sono effettivamente valutate che è prima `FROM`, poi `WHERE`, `GROUP BY`, `SELECT`, e `ORDER BY`.

Le sezioni seguenti esplorano ogni clausola in più dettaglio.

::: callout-note
Nota che mentre SQL è uno standard, è estremamente complesso e nessun database lo segue esattamente.
Mentre i componenti principali su cui ci concentreremo in questo libro sono molto simili tra DBMS, ci sono molte variazioni minori.
Fortunamente, dbplyr è progettato per gestire questo problema e genera traduzioni diverse per database diversi.
Non è perfetto, ma migliora continuamente, e se incontri un problema puoi segnalare un issue [su GitHub](https://github.com/tidyverse/dbplyr/issues/) per aiutarci a fare meglio.
:::

### SELECT

La clausola `SELECT` è il cavallo da lavoro delle query e svolge lo stesso lavoro di `select()`, `mutate()`, `rename()`, `relocate()`, e, come imparerai nella prossima sezione, `summarize()`.

`select()`, `rename()`, e `relocate()` hanno traduzioni molto dirette in `SELECT` poiché influenzano solo dove appare una colonna (se appare) insieme al suo nome:

```{r}
planes |> 
  select(tailnum, type, manufacturer, model, year) |> 
  show_query()

planes |> 
  select(tailnum, type, manufacturer, model, year) |> 
  rename(year_built = year) |> 
  show_query()

planes |> 
  select(tailnum, type, manufacturer, model, year) |> 
  relocate(manufacturer, model, .before = type) |> 
  show_query()
```

Questo esempio ti mostra anche come SQL fa la ridenominazione.
Nella terminologia SQL la ridenominazione è chiamata **aliasing** e viene fatta con `AS`.
Nota che a differenza di `mutate()`, il vecchio nome è a sinistra e il nuovo nome è a destra.

::: callout-note
Negli esempi sopra nota che `"year"` e `"type"` sono racchiusi tra virgolette doppie.
Questo perché sono **parole riservate** in duckdb, quindi dbplyr le quota per evitare qualsiasi potenziale confusione tra nomi di colonne/tabelle e operatori SQL.

Quando lavori con altri database probabilmente vedrai ogni nome di variabile quotato perché solo una manciata di pacchetti client, come duckdb, sanno quali sono tutte le parole riservate, quindi quotano tutto per sicurezza.

``` sql
SELECT "tailnum", "type", "manufacturer", "model", "year"
FROM "planes"
```

Alcuni altri sistemi di database usano backtick invece di virgolette:

``` sql
SELECT `tailnum`, `type`, `manufacturer`, `model`, `year`
FROM `planes`
```
:::

Le traduzioni per `mutate()` sono similmente dirette: ogni variabile diventa una nuova espressione in `SELECT`:

```{r}
flights |> 
  mutate(
    speed = distance / (air_time / 60)
  ) |> 
  show_query()
```

Torneremo alla traduzione dei componenti individuali (come `/`) in @sec-sql-expressions.

### FROM

La clausola `FROM` definisce la fonte dei dati.
Sarà piuttosto poco interessante per un po', perché stiamo usando solo singole tabelle.
Vedrai esempi più complessi una volta che arriveremo alle funzioni di join.

### GROUP BY

`group_by()` è tradotto nella clausola `GROUP BY`[^databases-6] e `summarize()` è tradotto nella clausola `SELECT`:

[^databases-6]: Non è una coincidenza: il nome della funzione dplyr è stato ispirato dalla clausola SQL.

```{r}
diamonds_db |> 
  group_by(cut) |> 
  summarize(
    n = n(),
    avg_price = mean(price, na.rm = TRUE)
  ) |> 
  show_query()
```

Torneremo a cosa succede con la traduzione di `n()` e `mean()` in @sec-sql-expressions.

### WHERE

`filter()` è tradotto nella clausola `WHERE`:

```{r}
flights |> 
  filter(dest == "IAH" | dest == "HOU") |> 
  show_query()

flights |> 
  filter(arr_delay > 0 & arr_delay < 20) |> 
  show_query()
```

Ci sono alcuni dettagli importanti da notare qui:

-   `|` diventa `OR` e `&` diventa `AND`.
-   SQL usa `=` per il confronto, non `==`. SQL non ha assegnazione, quindi non c'è potenziale confusione.
-   SQL usa solo `''` per le stringhe, non `""`. In SQL, `""` è usato per identificare le variabili, come ``` `` ``` di R.

Un altro operatore SQL utile è `IN`, che è molto simile a `%in%` di R:

```{r}
flights |> 
  filter(dest %in% c("IAH", "HOU")) |> 
  show_query()
```

SQL usa `NULL` invece di `NA`.
I `NULL` si comportano in modo simile agli `NA`.
La differenza principale è che mentre sono "infettivi" nei confronti e nell'aritmetica, vengono silenziosamente eliminati quando si riassume.
dbplyr ti ricorderà questo comportamento la prima volta che lo incontri:

```{r}
flights |> 
  group_by(dest) |> 
  summarize(delay = mean(arr_delay))
```

Se vuoi imparare di più su come funzionano i `NULL`, potresti apprezzare "[The Three-Valued Logic of SQL](https://modern-sql.com/concept/three-valued-logic)" di Markus Winand.

In generale, puoi lavorare con i `NULL` usando le funzioni che useresti per gli `NA` in R:

```{r}
flights |> 
  filter(!is.na(dep_delay)) |> 
  show_query()
```

Questa query SQL illustra uno degli svantaggi di dbplyr: mentre l'SQL è corretto, non è semplice come potresti scrivere a mano.
In questo caso, potresti eliminare le parentesi e usare un operatore speciale che è più facile da leggere:

``` sql
WHERE "dep_delay" IS NOT NULL
```

Nota che se fai `filter()` su una variabile che hai creato usando summarize, dbplyr genererà una clausola `HAVING`, piuttosto che una clausola `WHERE`.
Questa è una delle idiosincrasie di SQL: `WHERE` è valutato prima di `SELECT` e `GROUP BY`, quindi SQL ha bisogno di un'altra clausola che viene valutata dopo.

```{r}
diamonds_db |> 
  group_by(cut) |> 
  summarize(n = n()) |> 
  filter(n > 100) |> 
  show_query()
```

### ORDER BY

Ordinare le righe comporta una traduzione diretta da `arrange()` alla clausola `ORDER BY`:

```{r}
flights |> 
  arrange(year, month, day, desc(dep_delay)) |> 
  show_query()
```

Nota come `desc()` è tradotto in `DESC`: questa è una delle molte funzioni dplyr il cui nome è stato direttamente ispirato da SQL.

### Subquery

A volte non è possibile tradurre una pipeline dplyr in un singolo statement `SELECT` e devi usare una subquery.
Una **subquery** è semplicemente una query usata come fonte di dati nella clausola `FROM`, invece della solita tabella.

dbplyr tipicamente usa subquery per aggirare le limitazioni di SQL.
Per esempio, le espressioni nella clausola `SELECT` non possono riferirsi a colonne che sono state appena create.
Questo significa che la seguente pipeline dplyr (sciocca) deve accadere in due passaggi: la prima query (interna) calcola `year1` e poi la seconda query (esterna) può calcolare `year2`.

```{r}
flights |> 
  mutate(
    year1 = year + 1,
    year2 = year1 + 1
  ) |> 
  show_query()
```

Vedrai anche questo se provi a fare `filter()` su una variabile che hai appena creato.
Ricorda, anche se `WHERE` è scritto dopo `SELECT`, viene valutato prima, quindi abbiamo bisogno di una subquery in questo esempio (sciocco):

```{r}
flights |> 
  mutate(year1 = year + 1) |> 
  filter(year1 == 2014) |> 
  show_query()
```

A volte dbplyr creerà una subquery dove non è necessaria perché non sa ancora come ottimizzare quella traduzione.
Mentre dbplyr migliora nel tempo, questi casi diventeranno più rari ma probabilmente non scompariranno mai.

### Joins

Se hai familiarità con i join di dplyr, i join SQL sono molto simili.
Ecco un esempio semplice:

```{r}
flights |> 
  left_join(planes |> rename(year_built = year), join_by(tailnum)) |> 
  show_query()
```

La cosa principale da notare qui è la sintassi: i join SQL usano sub-clausole della clausola `FROM` per portare tabelle aggiuntive, usando `ON` per definire come le tabelle sono correlate.

I nomi di dplyr per queste funzioni sono così strettamente connessi a SQL che puoi facilmente indovinare l'SQL equivalente per `inner_join()`, `right_join()`, e `full_join()`:

``` sql
SELECT flights.*, "type", manufacturer, model, engines, seats, speed
FROM flights
INNER JOIN planes ON (flights.tailnum = planes.tailnum)

SELECT flights.*, "type", manufacturer, model, engines, seats, speed
FROM flights
RIGHT JOIN planes ON (flights.tailnum = planes.tailnum)

SELECT flights.*, "type", manufacturer, model, engines, seats, speed
FROM flights
FULL JOIN planes ON (flights.tailnum = planes.tailnum)
```

Probabilmente avrai bisogno di molti join quando lavori con dati da un database.
Questo perché le tabelle di database sono spesso memorizzate in una forma altamente normalizzata, dove ogni "fatto" è memorizzato in un singolo posto e per mantenere un dataset completo per l'analisi devi navigare una rete complessa di tabelle connesse da chiavi primarie e straniere.
Se incontri questo scenario, il [pacchetto dm](https://cynkra.github.io/dm/), di Tobias Schieferdecker, Kirill Müller, e Darko Bergant, è una salvezza.
Può automaticamente determinare le connessioni tra tabelle usando i vincoli che i DBA spesso forniscono, visualizzare le connessioni così puoi vedere cosa sta succedendo, e generare i join di cui hai bisogno per connettere una tabella a un'altra.

### Altri verbi

dbplyr traduce anche altri verbi come `distinct()`, `slice_*()`, e `intersect()`, e una selezione crescente di funzioni tidyr come `pivot_longer()` e `pivot_wider()`.
Il modo più facile per vedere l'insieme completo di ciò che è attualmente disponibile è visitare il sito web di dbplyr: <https://dbplyr.tidyverse.org/reference/>.

### Esercizi

1.  A cosa viene tradotto `distinct()`?
    E `head()`?

2.  Spiega cosa fa ognuna delle seguenti query SQL e prova a ricrearle usando dbplyr.

    ``` sql
    SELECT * 
    FROM flights
    WHERE dep_delay < arr_delay

    SELECT *, distance / (air_time / 60) AS speed
    FROM flights
    ```

## Traduzioni di funzioni {#sec-sql-expressions}

Finora ci siamo concentrati sul quadro generale di come i verbi dplyr sono tradotti nelle clausole di una query.
Ora zoomeremo un po' e parleremo della traduzione delle funzioni R che lavorano con singole colonne, ad es., cosa succede quando usi `mean(x)` in un `summarize()`?

Per aiutare a vedere cosa sta succedendo, useremo un paio di piccole funzioni helper che eseguono un `summarize()` o `mutate()` e mostrano l'SQL generato.
Questo renderà un po' più facile esplorare alcune variazioni e vedere come i riassunti e le trasformazioni possono differire.

```{r}
summarize_query <- function(df, ...) {
  df |> 
    summarize(...) |> 
    show_query()
}
mutate_query <- function(df, ...) {
  df |> 
    mutate(..., .keep = "none") |> 
    show_query()
}
```

Immergiamoci con alcuni riassunti!
Guardando il codice sotto noterai che alcune funzioni di riassunto, come `mean()`, hanno una traduzione relativamente semplice mentre altre, come `median()`, sono molto più complesse.
La complessità è tipicamente più alta per operazioni che sono comuni nelle statistiche ma meno comuni nei database.

```{r}
flights |> 
  group_by(year, month, day) |>  
  summarize_query(
    mean = mean(arr_delay, na.rm = TRUE),
    median = median(arr_delay, na.rm = TRUE)
  )
```

La traduzione delle funzioni di riassunto diventa più complicata quando le usi dentro un `mutate()` perché devono trasformarsi in cosiddette funzioni **window**.
In SQL, trasformi una funzione di aggregazione ordinaria in una funzione window aggiungendo `OVER` dopo di essa:

```{r}
flights |> 
  group_by(year, month, day) |>  
  mutate_query(
    mean = mean(arr_delay, na.rm = TRUE),
  )
```

In SQL, la clausola `GROUP BY` è usata esclusivamente per i riassunti quindi qui puoi vedere che il raggruppamento si è spostato dalla clausola `GROUP BY` a `OVER`.

Le funzioni window includono tutte le funzioni che guardano avanti o indietro, come `lead()` e `lag()` che guardano rispettivamente il valore "precedente" o "successivo":

```{r}
flights |> 
  group_by(dest) |>  
  arrange(time_hour) |> 
  mutate_query(
    lead = lead(arr_delay),
    lag = lag(arr_delay)
  )
```

Qui è importante fare `arrange()` sui dati, perché le tabelle SQL non hanno un ordine intrinseco.
Infatti, se non usi `arrange()` potresti riavere le righe in un ordine diverso ogni volta!
Nota che per le funzioni window, l'informazione di ordinamento è ripetuta: la clausola `ORDER BY` della query principale non si applica automaticamente alle funzioni window.

Un'altra importante funzione SQL è `CASE WHEN`. È usata come traduzione di `if_else()` e `case_when()`, la funzione dplyr che ha ispirato direttamente.
Ecco un paio di esempi semplici:

```{r}
flights |> 
  mutate_query(
    description = if_else(arr_delay > 0, "delayed", "on-time")
  )
flights |> 
  mutate_query(
    description = 
      case_when(
        arr_delay < -5 ~ "early", 
        arr_delay < 5 ~ "on-time",
        arr_delay >= 5 ~ "late"
      )
  )
```

`CASE WHEN` è anche usato per alcune altre funzioni che non hanno una traduzione diretta da R a SQL.
Un buon esempio di questo è `cut()`:

```{r}
flights |> 
  mutate_query(
    description =  cut(
      arr_delay, 
      breaks = c(-Inf, -5, 5, Inf), 
      labels = c("early", "on-time", "late")
    )
  )
```

dbplyr traduce anche comuni funzioni di manipolazione di stringhe e date-ora, su cui puoi imparare in `vignette("translation-function", package = "dbplyr")`.
Le traduzioni di dbplyr non sono certamente perfette, e ci sono molte funzioni R che non sono ancora tradotte, ma dbplyr fa un lavoro sorprendentemente buono nel coprire le funzioni che userai la maggior parte del tempo.

## Riassunto

In questo capitolo hai imparato come accedere ai dati dai database.
Ci siamo concentrati su dbplyr, un "backend" di dplyr che ti permette di scrivere il codice dplyr che conosci, e farlo tradurre automaticamente in SQL.
Abbiamo usato quella traduzione per insegnarti un po' di SQL; è importante imparare un po' di SQL perché è *il* linguaggio più comunemente usato per lavorare con i dati e conoscerne un po' renderà più facile comunicare con altre persone che lavorano con i dati che non usano R.

Se hai finito questo capitolo e vorresti imparare di più su SQL, abbiamo due raccomandazioni:

-   [*SQL for Data Scientists*](https://sqlfordatascientists.com) di Renée M. P. Teate è un'introduzione a SQL progettata specificamente per le esigenze dei data scientist, e include esempi del tipo di dati altamente interconnessi che probabilmente incontrerai nelle organizzazioni reali.
-   [*Practical SQL*](https://www.practicalsql.com) di Anthony DeBarros è scritto dalla prospettiva di un data journalist (un data scientist specializzato nel raccontare storie convincenti) e va più nel dettaglio su come inserire i tuoi dati in un database e gestire il tuo DBMS.

Nel prossimo capitolo, impareremo un altro backend dplyr per lavorare con grandi dati: arrow.
Arrow è progettato per lavorare con file grandi su disco, ed è un complemento naturale ai database.