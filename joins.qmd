# Join {#sec-joins}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

È raro che un'analisi dei dati coinvolga solo un singolo data frame.
Tipicamente hai molti data frame, e devi **unirli** insieme per rispondere alle domande che ti interessano.
Questo capitolo ti introdurrà a due tipi importanti di join:

-   Join mutanti, che aggiungono nuove variabili a un data frame da osservazioni corrispondenti in un altro.
-   Join filtranti, che filtrano osservazioni da un data frame basandosi sul fatto che corrispondano o meno a un'osservazione in un altro.

Inizieremo discutendo le chiavi, le variabili usate per connettere una coppia di data frame in un join.
Cementeremo la teoria con un esame delle chiavi nei dataset del pacchetto nycflights13, poi useremo quella conoscenza per iniziare a unire data frame insieme.
Successivamente discuteremo come funzionano i join, concentrandoci sulla loro azione sulle righe.
Finiremo con una discussione sui join non-equi, una famiglia di join che fornisce un modo più flessibile di abbinare chiavi rispetto alla relazione di uguaglianza predefinita.

### Prerequisiti

In questo capitolo, esploreremo i cinque dataset correlati da nycflights13 usando le funzioni di join di dplyr.

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(nycflights13)
```

## Chiavi

Per comprendere i join, devi prima capire come due tabelle possono essere connesse attraverso una coppia di chiavi, all'interno di ogni tabella.
In questa sezione, imparerai i due tipi di chiave e vedrai esempi di entrambi nei dataset del pacchetto nycflights13.
Imparerai anche come verificare che le tue chiavi siano valide, e cosa fare se la tua tabella manca di una chiave.

### Chiavi primarie e straniere

Ogni join coinvolge una coppia di chiavi: una chiave primaria e una chiave straniera.
Una **chiave primaria** è una variabile o un insieme di variabili che identifica univocamente ogni osservazione.
Quando è necessaria più di una variabile, la chiave è chiamata **chiave composta.** Per esempio, in nycflights13:

-   `airlines` registra due pezzi di dati su ogni compagnia aerea: il suo codice vettore e il suo nome completo.
    Puoi identificare una compagnia aerea con il suo codice vettore di due lettere, rendendo `carrier` la chiave primaria.

    ```{r}
    airlines
    ```

-   `airports` registra dati su ogni aeroporto.
    Puoi identificare ogni aeroporto con il suo codice aeroportuale di tre lettere, rendendo `faa` la chiave primaria.

    ```{r}
    #| R.options:
    #|   width: 67
    airports
    ```

-   `planes` registra dati su ogni aereo.
    Puoi identificare un aereo con il suo numero di coda, rendendo `tailnum` la chiave primaria.

    ```{r}
    #| R.options:
    #|   width: 67
    planes
    ```

-   `weather` registra dati sul tempo negli aeroporti di origine.
    Puoi identificare ogni osservazione con la combinazione di posizione e tempo, rendendo `origin` e `time_hour` la chiave primaria composta.

    ```{r}
    #| R.options:
    #|   width: 67
    weather
    ```

Una **chiave straniera** è una variabile (o insieme di variabili) che corrisponde a una chiave primaria in un'altra tabella.
Per esempio:

-   `flights$tailnum` è una chiave straniera che corrisponde alla chiave primaria `planes$tailnum`.
-   `flights$carrier` è una chiave straniera che corrisponde alla chiave primaria `airlines$carrier`.
-   `flights$origin` è una chiave straniera che corrisponde alla chiave primaria `airports$faa`.
-   `flights$dest` è una chiave straniera che corrisponde alla chiave primaria `airports$faa`.
-   `flights$origin`-`flights$time_hour` è una chiave straniera composta che corrisponde alla chiave primaria composta `weather$origin`-`weather$time_hour`.

Queste relazioni sono riassunte visivamente in @fig-flights-relationships.

```{r}
#| label: fig-flights-relationships
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Connessioni tra tutti e cinque i data frame nel pacchetto nycflights13.
#|   Le variabili che formano una chiave primaria sono colorate di grigio, e sono connesse
#|   alle loro chiavi straniere corrispondenti con frecce.
#| fig-alt: |
#|   Le relazioni tra i dataset airports, planes, flights, weather, e
#|   airlines del pacchetto nycflights13. airports$faa è
#|   connesso a flights$origin e flights$dest. planes$tailnum
#|   è connesso a flights$tailnum. weather$time_hour e
#|   weather$origin sono congiuntamente connessi a flights$time_hour e 
#|   flights$origin. airlines$carrier è connesso a flights$carrier.
#|   Non ci sono connessioni dirette tra i data frame airports, planes, airlines, 
#|   e weather.
knitr::include_graphics("diagrams/relational.png", dpi = 270)
```

Noterai una bella caratteristica nel design di queste chiavi: le chiavi primarie e straniere hanno quasi sempre gli stessi nomi, il che, come vedrai tra poco, renderà la tua vita di join molto più facile.
Vale anche la pena notare la relazione opposta: quasi ogni nome di variabile usato in tabelle multiple ha lo stesso significato in ogni posto.
C'è solo un'eccezione: `year` significa anno di partenza in `flights` e anno di fabbricazione in `planes`.
Questo diventerà importante quando inizieremo effettivamente a unire le tabelle insieme.

### Verificare le chiavi primarie

Ora che abbiamo identificato le chiavi primarie in ogni tabella, è buona pratica verificare che identifichino effettivamente in modo univoco ogni osservazione.
Un modo per farlo è usare `count()` sulle chiavi primarie e cercare voci dove `n` è maggiore di uno.
Questo rivela che sia `planes` che `weather` sembrano buoni:

```{r}
planes |> 
  count(tailnum) |> 
  filter(n > 1)

weather |> 
  count(time_hour, origin) |> 
  filter(n > 1)
```

Dovresti anche controllare i valori mancanti nelle tue chiavi primarie --- se un valore manca allora non può identificare un'osservazione!

```{r}
planes |> 
  filter(is.na(tailnum))

weather |> 
  filter(is.na(time_hour) | is.na(origin))
```

### Chiavi surrogate

Finora non abbiamo parlato della chiave primaria per `flights`.
Non è super importante qui, perché non ci sono data frame che la usano come chiave straniera, ma è comunque utile considerarla perché è più facile lavorare con le osservazioni se abbiamo qualche modo per descriverle ad altri.

Dopo un po' di riflessione e sperimentazione, abbiamo determinato che ci sono tre variabili che insieme identificano univocamente ogni volo:

```{r}
flights |> 
  count(time_hour, carrier, flight) |> 
  filter(n > 1)
```

L'assenza di duplicati rende automaticamente `time_hour`-`carrier`-`flight` una chiave primaria?
È certamente un buon inizio, ma non lo garantisce.
Per esempio, sono altitudine e latitudine una buona chiave primaria per `airports`?

```{r}
airports |>
  count(alt, lat) |> 
  filter(n > 1)
```

Identificare un aeroporto per la sua altitudine e latitudine è chiaramente una cattiva idea, e in generale non è possibile sapere dai soli dati se una combinazione di variabili costituisce una buona chiave primaria.
Ma per i voli, la combinazione di `time_hour`, `carrier`, e `flight` sembra ragionevole perché sarebbe davvero confuso per una compagnia aerea e i suoi clienti se ci fossero voli multipli con lo stesso numero di volo in aria allo stesso tempo.

Detto questo, potremmo stare meglio introducendo una semplice chiave surrogate numerica usando il numero di riga:

```{r}
flights2 <- flights |> 
  mutate(id = row_number(), .before = 1)
flights2
```

Le chiavi surrogate possono essere particolarmente utili quando si comunica con altri umani: è molto più facile dire a qualcuno di dare un'occhiata al volo 2001 che dire guarda UA430 che è partito alle 9 del mattino del 2013-01-03.

### Esercizi

1.  Abbiamo dimenticato di disegnare la relazione tra `weather` e `airports` in @fig-flights-relationships.
    Qual è la relazione e come dovrebbe apparire nel diagramma?

2.  `weather` contiene solo informazioni per i tre aeroporti di origine di NYC.
    Se contenesse registrazioni meteorologiche per tutti gli aeroporti negli USA, quale connessione aggiuntiva farebbe a `flights`?

3.  Le variabili `year`, `month`, `day`, `hour`, e `origin` formano quasi una chiave composta per `weather`, ma c'è un'ora che ha osservazioni duplicate.
    Riesci a capire cosa c'è di speciale in quell'ora?

4.  Sappiamo che alcuni giorni dell'anno sono speciali e meno persone del solito volano in quei giorni (es., vigilia di Natale e giorno di Natale).
    Come potresti rappresentare quei dati come un data frame?
    Quale sarebbe la chiave primaria?
    Come si connetterebbe ai data frame esistenti?

5.  Disegna un diagramma che illustra le connessioni tra i data frame `Batting`, `People`, e `Salaries` nel pacchetto Lahman.
    Disegna un altro diagramma che mostra la relazione tra `People`, `Managers`, `AwardsManagers`.
    Come caratterizzeresti la relazione tra i data frame `Batting`, `Pitching`, e `Fielding`?

## Join di base {#sec-mutating-joins}

Ora che capisci come i data frame sono connessi tramite chiavi, possiamo iniziare a usare i join per capire meglio il dataset `flights`.
dplyr fornisce sei funzioni di join: `left_join()`, `inner_join()`, `right_join()`, `full_join()`, `semi_join()`, e `anti_join().` Hanno tutte la stessa interfaccia: prendono una coppia di data frame (`x` e `y`) e restituiscono un data frame.
L'ordine delle righe e colonne nell'output è determinato principalmente da `x`.

In questa sezione, imparerai come usare un join mutante, `left_join()`, e due join filtranti, `semi_join()` e `anti_join()`.
Nella sezione successiva, imparerai esattamente come funzionano queste funzioni, e sui rimanenti `inner_join()`, `right_join()` e `full_join()`.

### Join mutanti

Un **join mutante** ti permette di combinare variabili da due data frame: prima abbina le osservazioni tramite le loro chiavi, poi copia le variabili da un data frame all'altro.
Come `mutate()`, le funzioni di join aggiungono variabili a destra, quindi se il tuo dataset ha molte variabili, non vedrai quelle nuove.
Per questi esempi, renderemo più facile vedere cosa sta succedendo creando un dataset più stretto con solo sei variabili[^joins-1]:

[^joins-1]: Ricorda che in RStudio puoi anche usare `View()` per evitare questo problema.

```{r}
flights2 <- flights |> 
  select(year, time_hour, origin, dest, tailnum, carrier)
flights2
```

Ci sono quattro tipi di join mutante, ma ce n'è uno che userai quasi sempre: `left_join()`.
È speciale perché l'output avrà sempre le stesse righe di `x`, il data frame a cui ti stai unendo[^joins-2].
L'uso principale di `left_join()` è aggiungere metadati aggiuntivi.
Per esempio, possiamo usare `left_join()` per aggiungere il nome completo della compagnia aerea ai dati di `flights2`:

[^joins-2]: Non è vero al 100%, ma riceverai un avvertimento ogni volta che non lo è.

```{r}
flights2 |>
  left_join(airlines)
```

O potremmo scoprire la temperatura e la velocità del vento quando ogni aereo è partito:

```{r}
flights2 |> 
  left_join(weather |> select(origin, time_hour, temp, wind_speed))
```

O che taglia di aereo stava volando:

```{r}
flights2 |> 
  left_join(planes |> select(tailnum, type, engines, seats))
```

Quando `left_join()` non riesce a trovare una corrispondenza per una riga in `x`, riempie le nuove variabili con valori mancanti.
Per esempio, non ci sono informazioni sull'aereo con numero di coda `N3ALAA` quindi `type`, `engines`, e `seats` saranno mancanti:

```{r}
flights2 |> 
  filter(tailnum == "N3ALAA") |> 
  left_join(planes |> select(tailnum, type, engines, seats))
```

Torneremo su questo problema alcune volte nel resto del capitolo.

### Specificare le chiavi di join

Per default, `left_join()` userà tutte le variabili che appaiono in entrambi i data frame come chiave di join, il cosiddetto join **naturale**.
Questa è un'euristica utile, ma non funziona sempre.
Per esempio, cosa succede se proviamo a unire `flights2` con il dataset completo `planes`?

```{r}
flights2 |> 
  left_join(planes)
```

Otteniamo molte corrispondenze mancanti perché il nostro join sta cercando di usare `tailnum` e `year` come chiave composta.
Sia `flights` che `planes` hanno una colonna `year` ma significano cose diverse: `flights$year` è l'anno in cui è avvenuto il volo e `planes$year` è l'anno in cui l'aereo è stato costruito.
Vogliamo solo unire su `tailnum` quindi dobbiamo fornire una specifica esplicita con `join_by()`:

```{r}
flights2 |> 
  left_join(planes, join_by(tailnum))
```

Nota che le variabili `year` sono disambiguate nell'output con un suffisso (`year.x` e `year.y`), che ti dice se la variabile viene dall'argomento `x` o `y`.
Puoi sovrascrivere i suffissi predefiniti con l'argomento `suffix`.

`join_by(tailnum)` è abbreviazione per `join_by(tailnum == tailnum)`.
È importante conoscere questa forma più completa per due ragioni.
Primo, descrive la relazione tra le due tabelle: le chiavi devono essere uguali.
Ecco perché questo tipo di join è spesso chiamato **equi join**.
Imparerai sui join non-equi in @sec-non-equi-joins.

Secondo, è come specifichi chiavi di join diverse in ogni tabella.
Per esempio, ci sono due modi per unire la tabella `flight2` e `airports`: o per `dest` o per `origin`:

```{r}
flights2 |> 
  left_join(airports, join_by(dest == faa))

flights2 |> 
  left_join(airports, join_by(origin == faa))
```

Nel codice più vecchio potresti vedere un modo diverso di specificare le chiavi di join, usando un vettore di caratteri:

-   `by = "x"` corrisponde a `join_by(x)`.
-   `by = c("a" = "x")` corrisponde a `join_by(a == x)`.

Ora che esiste, preferiamo `join_by()` perché fornisce una specifica più chiara e flessibile.

`inner_join()`, `right_join()`, `full_join()` hanno la stessa interfaccia di `left_join()`.
La differenza è quali righe mantengono: left join mantiene tutte le righe in `x`, right join mantiene tutte le righe in `y`, full join mantiene tutte le righe in `x` o `y`, e inner join mantiene solo le righe che occorrono sia in `x` che in `y`.
Torneremo su questi più in dettaglio dopo.

### Join filtranti

Come potresti indovinare l'azione primaria di un **join filtrante** è filtrare le righe.
Ci sono due tipi: semi-join e anti-join.
I **Semi-join** mantengono tutte le righe in `x` che hanno una corrispondenza in `y`.
Per esempio, potremmo usare un semi-join per filtrare il dataset `airports` per mostrare solo gli aeroporti di origine:

```{r}
airports |> 
  semi_join(flights2, join_by(faa == origin))
```

O solo le destinazioni:

```{r}
airports |> 
  semi_join(flights2, join_by(faa == dest))
```

Gli **Anti-join** sono l'opposto: restituiscono tutte le righe in `x` che non hanno una corrispondenza in `y`.
Sono utili per trovare valori mancanti che sono **impliciti** nei dati, l'argomento di @sec-missing-implicit.
I valori implicitamente mancanti non appaiono come `NA` ma esistono solo come un'assenza.
Per esempio, possiamo trovare righe che mancano da `airports` cercando voli che non hanno un aeroporto di destinazione corrispondente:

```{r}
flights2 |> 
  anti_join(airports, join_by(dest == faa)) |> 
  distinct(dest)
```

O possiamo trovare quali `tailnum` mancano da `planes`:

```{r}
flights2 |>
  anti_join(planes, join_by(tailnum)) |> 
  distinct(tailnum)
```

### Esercizi

1.  Trova le 48 ore (durante tutto l'anno) che hanno i ritardi peggiori.
    Fai un riferimento incrociato con i dati `weather`.
    Riesci a vedere qualche pattern?

2.  Immagina di aver trovato le 10 destinazioni più popolari usando questo codice:

    ```{r}
    top_dest <- flights2 |>
      count(dest, sort = TRUE) |>
      head(10)
    ```

    Come puoi trovare tutti i voli verso quelle destinazioni?

3.  Ogni volo in partenza ha dati meteorologici corrispondenti per quell'ora?

4.  Cosa hanno in comune i numeri di coda che non hanno un record corrispondente in `planes`?
    (Suggerimento: una variabile spiega ~90% dei problemi.)

5.  Aggiungi una colonna a `planes` che elenca ogni `carrier` che ha volato con quell'aereo.
    Potresti aspettarti che ci sia una relazione implicita tra aereo e compagnia aerea, perché ogni aereo è volato da una singola compagnia aerea.
    Conferma o rigetta questa ipotesi usando gli strumenti che hai imparato nei capitoli precedenti.

6.  Aggiungi latitudine e longitudine dell'aeroporto di origine *e* destinazione a `flights`.
    È più facile rinominare le colonne prima o dopo il join?

7.  Calcola il ritardo medio per destinazione, poi unisci sul data frame `airports` così puoi mostrare la distribuzione spaziale dei ritardi.
    Ecco un modo facile per disegnare una mappa degli Stati Uniti:

    ```{r}
    #| eval: false
    airports |>
      semi_join(flights, join_by(faa == dest)) |>
      ggplot(aes(x = lon, y = lat)) +
        borders("state") +
        geom_point() +
        coord_quickmap()
    ```

    Potresti voler usare la `size` o il `color` dei punti per mostrare il ritardo medio per ogni aeroporto.

8.  Cosa è successo il 13 giugno 2013?
    Disegna una mappa dei ritardi, e poi usa Google per fare un riferimento incrociato con il tempo.

    ```{r}
    #| eval: false
    #| include: false
    worst <- filter(flights, !is.na(dep_time), month == 6, day == 13)
    worst |>
      group_by(dest) |>
      summarize(delay = mean(arr_delay), n = n()) |>
      filter(n > 5) |>
      inner_join(airports, join_by(dest == faa)) |>
      ggplot(aes(x = lon, y = lat)) +
        borders("state") +
        geom_point(aes(size = n, color = delay)) +
        coord_quickmap()
    ```

## Come funzionano i join?

Ora che hai usato i join alcune volte è tempo di imparare di più su come funzionano, concentrandoci su come ogni riga in `x` corrisponde alle righe in `y`.
Inizieremo introducendo una rappresentazione visuale dei join, usando i semplici tibble definiti sotto e mostrati in @fig-join-setup.
In questi esempi useremo una singola chiave chiamata `key` e una singola colonna valore (`val_x` e `val_y`), ma le idee si generalizzano tutte a chiavi multiple e valori multipli.

```{r}
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     3, "x3"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2",
     4, "y3"
)
```

```{r}
#| label: fig-join-setup
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Rappresentazione grafica di due tabelle semplici. Le colonne `key`
#|   colorate mappano il colore di sfondo al valore della chiave. Le colonne grigie rappresentano
#|   le colonne "valore" che vengono portate per il viaggio. 
#| fig-alt: |
#|   x e y sono due data frame con 2 colonne e 3 righe, con contenuti
#|   come descritto nel testo. I valori delle chiavi sono colorati:
#|   1 è verde, 2 è viola, 3 è arancione, e 4 è giallo.
knitr::include_graphics("diagrams/join/setup.png", dpi = 270)
```

@fig-join-setup2 introduce le fondamenta per la nostra rappresentazione visuale.
Mostra tutte le corrispondenze potenziali tra `x` e `y` come l'intersezione tra linee disegnate da ogni riga di `x` e ogni riga di `y`.
Le righe e colonne nell'output sono determinate principalmente da `x`, quindi la tabella `x` è orizzontale e si allinea con l'output.

```{r}
#| label: fig-join-setup2
#| echo: false
#| out-width: ~
#| fig-cap: | 
#|   Per capire come funzionano i join, è utile pensare a ogni possibile
#|   corrispondenza. Qui lo mostriamo con una griglia di linee di connessione.
#| fig-alt: |
#|   x e y sono posizionati ad angoli retti, con linee orizzontali che si estendono 
#|   da x e linee verticali che si estendono da y. Ci sono 3 righe in x e 
#|   3 righe in y, il che porta a nove intersezioni che rappresentano nove
#|   corrispondenze potenziali.
knitr::include_graphics("diagrams/join/setup2.png", dpi = 270)
```

Per descrivere un tipo specifico di join, indichiamo le corrispondenze con punti.
Le corrispondenze determinano le righe nell'output, un nuovo data frame che contiene la chiave, i valori x, e i valori y.
Per esempio, @fig-join-inner mostra un inner join, dove le righe sono mantenute se e solo se le chiavi sono uguali.

```{r}
#| label: fig-join-inner
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Un inner join abbina ogni riga in `x` alla riga in `y` che ha lo
#|   stesso valore di `key`. Ogni corrispondenza diventa una riga nell'output.
#| fig-alt: |
#|   x e y sono posizionati ad angoli retti con linee che formano una griglia di
#|   corrispondenze potenziali. Le chiavi 1 e 2 appaiono sia in x che in y, quindi otteniamo
#|   una corrispondenza, indicata da un punto. Ogni punto corrisponde a una riga
#|   nell'output, quindi il data frame unito risultante ha due righe.
knitr::include_graphics("diagrams/join/inner.png", dpi = 270)
```

Possiamo applicare gli stessi principi per spiegare gli **outer join**, che mantengono osservazioni che appaiono in almeno uno dei data frame.
Questi join funzionano aggiungendo un'osservazione "virtuale" aggiuntiva a ogni data frame.
Questa osservazione ha una chiave che corrisponde se nessun'altra chiave corrisponde, e valori riempiti con `NA`.
Ci sono tre tipi di outer join:

-   Un **left join** mantiene tutte le osservazioni in `x`, @fig-join-left.
    Ogni riga di `x` è preservata nell'output perché può ripiegare sull'abbinamento con una riga di `NA` in `y`.

    ```{r}
    #| label: fig-join-left
    #| echo: false
    #| out-width: ~
    #| fig-cap: | 
    #|   Una rappresentazione visuale del left join dove ogni riga in `x`
    #|   appare nell'output.
    #| fig-alt: |
    #|   Confrontato al diagramma precedente che mostra un inner join, la tabella y
    #|   ottiene una nuova riga virtuale contenente NA che abbinerà qualsiasi riga in x
    #|   che non corrispondeva altrimenti. Questo significa che l'output ora ha
    #|   tre righe. Per key = 3, che corrisponde a questa riga virtuale, val_y prende
    #|   valore NA.
    knitr::include_graphics("diagrams/join/left.png", dpi = 270)
    ```

-   Un **right join** mantiene tutte le osservazioni in `y`, @fig-join-right.
    Ogni riga di `y` è preservata nell'output perché può ripiegare sull'abbinamento con una riga di `NA` in `x`.
    L'output corrisponde ancora a `x` il più possibile; eventuali righe extra da `y` sono aggiunte alla fine.

    ```{r}
    #| label: fig-join-right
    #| echo: false
    #| out-width: ~
    #| fig-cap: | 
    #|   Una rappresentazione visuale del right join dove ogni riga di `y` 
    #|   appare nell'output. 
    #| fig-alt: |
    #|   Confrontato al diagramma precedente che mostra un left join, la tabella x
    #|   ora ottiene una riga virtuale così che ogni riga in y ottiene una corrispondenza in x.
    #|   val_x contiene NA per la riga in y che non corrispondeva a x.
    knitr::include_graphics("diagrams/join/right.png", dpi = 270)
    ```

-   Un **full join** mantiene tutte le osservazioni che appaiono in `x` o `y`, @fig-join-full.
    Ogni riga di `x` e `y` è inclusa nell'output perché sia `x` che `y` hanno una riga di riserva di `NA`.
    Ancora, l'output inizia con tutte le righe da `x`, seguite dalle righe `y` rimanenti non abbinate.

    ```{r}
    #| label: fig-join-full
    #| echo: false
    #| out-width: ~
    #| fig-cap: | 
    #|   Una rappresentazione visuale del full join dove ogni riga in `x`
    #|   e `y` appare nell'output.
    #| fig-alt: |
    #|   Ora sia x che y hanno una riga virtuale che corrisponde sempre.
    #|   Il risultato ha 4 righe: chiavi 1, 2, 3, e 4 con tutti i valori 
    #|   da val_x e val_y, tuttavia chiave 2, val_y e chiave 4, val_x sono NA
    #|   perché quelle chiavi non hanno una corrispondenza negli altri data frame.
    knitr::include_graphics("diagrams/join/full.png", dpi = 270)
    ```

Un altro modo per mostrare come differiscono i tipi di outer join è con un diagramma di Venn, come in @fig-join-venn.
Tuttavia, questa non è una grande rappresentazione perché mentre potrebbe rinfrescare la vostra memoria su quali righe sono preservate, fallisce nell'illustrare cosa sta succedendo con le colonne.

```{r}
#| label: fig-join-venn
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Diagrammi di Venn che mostrano la differenza tra inner, left, right, e
#|   full join.
#| fig-alt: |
#|   Diagrammi di Venn per inner, full, left, e right join. Ogni join
#|   rappresentato con due cerchi intersecanti che rappresentano data frame x
#|   e y, con x a destra e y a sinistra. L'ombreggiatura indica il
#|   risultato del join. 
#|
#|   Inner join: l'intersezione è ombreggiata. 
#|   Full join: Tutto è ombreggiato. 
#|   Left join: Tutto di x è ombreggiato.
#|   Right join: Tutto di y è ombreggiato.
knitr::include_graphics("diagrams/join/venn.png", dpi = 270)
```

I join mostrati qui sono i cosiddetti **equi** **join**, dove le righe corrispondono se le chiavi sono uguali.
Gli equi join sono il tipo più comune di join, quindi tipicamente ometteremo il prefisso equi, e diremo solo "inner join" piuttosto che "equi inner join".
Torneremo sui join non-equi in @sec-non-equi-joins.

### Abbinamento di righe

Finora abbiamo esplorato cosa succede se una riga in `x` corrisponde a zero o una riga in `y`.
Cosa succede se corrisponde a più di una riga?
Per capire cosa sta succedendo restringiamo prima il nostro focus su `inner_join()` e poi disegniamo un'immagine, @fig-join-match-types.

```{r}
#| label: fig-join-match-types
#| echo: false
#| out-width: ~
#| fig-cap: | 
#|   I tre modi in cui una riga in `x` può corrispondere. `x1` corrisponde
#|   a una riga in `y`, `x2` corrisponde a due righe in `y`, `x3` corrisponde
#|   a zero righe in y. Nota che mentre ci sono tre righe in
#|   `x` e tre righe nell'output, non c'è una corrispondenza diretta
#|   tra le righe.
#| fig-alt: |
#|   Un diagramma di join dove x ha valori chiave 1, 2, e 3, e y ha
#|   valori chiave 1, 2, 2. L'output ha tre righe perché la chiave 1 corrisponde
#|   a una riga, la chiave 2 corrisponde a due righe, e la chiave 3 corrisponde a zero righe.
knitr::include_graphics("diagrams/join/match-types.png", dpi = 270)
```

Ci sono tre possibili risultati per una riga in `x`:

-   Se non corrisponde a niente, viene scartata.
-   Se corrisponde a 1 riga in `y`, viene preservata.
-   Se corrisponde a più di 1 riga in `y`, viene duplicata una volta per ogni corrispondenza.

In principio, questo significa che non c'è una corrispondenza garantita tra le righe nell'output e le righe in `x`, ma in pratica, questo raramente causa problemi.
C'è, tuttavia, un caso particolarmente pericoloso che può causare un'esplosione combinatoriale di righe.
Immaginate di unire le seguenti due tabelle:

```{r}
df1 <- tibble(key = c(1, 2, 2), val_x = c("x1", "x2", "x3"))
df2 <- tibble(key = c(1, 2, 2), val_y = c("y1", "y2", "y3"))
```

Mentre la prima riga in `df1` corrisponde solo a una riga in `df2`, la seconda e terza riga corrispondono entrambe a due righe.
Questo è talvolta chiamato un join `many-to-many`, e causerà l'emissione di un avvertimento da dplyr:

```{r}
df1 |> 
  inner_join(df2, join_by(key))
```

Se lo stai facendo deliberatamente, puoi impostare `relationship = "many-to-many"`, come suggerisce l'avvertimento.

### Join filtranti

Il numero di corrispondenze determina anche il comportamento dei join filtranti.
Il semi-join mantiene le righe in `x` che hanno una o più corrispondenze in `y`, come in @fig-join-semi.
L'anti-join mantiene le righe in `x` che corrispondono a zero righe in `y`, come in @fig-join-anti.
In entrambi i casi, solo l'esistenza di una corrispondenza è importante; non importa quante volte corrisponde.
Questo significa che i join filtranti non duplicano mai le righe come fanno i join mutanti.

```{r}
#| label: fig-join-semi
#| echo: false
#| out-width: null
#| fig-cap: |
#|   In un semi-join importa solo che ci sia una corrispondenza; altrimenti
#|   i valori in `y` non influenzano l'output.
#| fig-alt: |
#|   Un diagramma di join con i vecchi amici x e y. In un semi join, solo la 
#|   presenza di una corrispondenza importa quindi l'output contiene le stesse colonne
#|   di x.
knitr::include_graphics("diagrams/join/semi.png", dpi = 270)
```

```{r}
#| label: fig-join-anti
#| echo: false
#| out-width: null
#| fig-cap: |
#|   Un anti-join è l'inverso di un semi-join, scartando righe da `x`
#|   che hanno una corrispondenza in `y`.
#| fig-alt: |
#|   Un anti-join è l'inverso di un semi-join quindi le corrispondenze sono disegnate con
#|   linee rosse che indicano che saranno scartate dall'output.
knitr::include_graphics("diagrams/join/anti.png", dpi = 270)
```

## Join non-equi {#sec-non-equi-joins}

Finora hai visto solo equi join, join dove le righe corrispondono se la chiave `x` è uguale alla chiave `y`.
Ora rilasseremo quella restrizione e discuteremo altri modi per determinare se una coppia di righe corrisponde.

Ma prima di poterlo fare, dobbiamo rivisitare una semplificazione che abbiamo fatto sopra.
Negli equi join le chiavi `x` e `y` sono sempre uguali, quindi dobbiamo mostrarne solo una nell'output.
Possiamo richiedere che dplyr mantenga entrambe le chiavi con `keep = TRUE`, portando al codice sotto e al ridisegnato `inner_join()` in @fig-inner-both.

```{r}
x |> inner_join(y, join_by(key == key), keep = TRUE)
```

```{r}
#| label: fig-inner-both
#| fig-cap: |
#|   Un inner join che mostra sia le chiavi `x` che `y` nell'output.
#| fig-alt: |
#|   Un diagramma di join che mostra un inner join tra x e y. Il risultato
#|   ora include quattro colonne: key.x, val_x, key.y, e val_y. I
#|   valori di key.x e key.y sono identici, ecco perché di solito
#|   ne mostriamo solo uno.
#| echo: false
#| out-width: ~
knitr::include_graphics("diagrams/join/inner-both.png", dpi = 270)
```

Quando ci allontaniamo dagli equi join mostreremo sempre le chiavi, perché i valori delle chiavi saranno spesso diversi.
Per esempio, invece di corrispondere solo quando `x$key` e `y$key` sono uguali, potremmo corrispondere ogni volta che `x$key` è maggiore o uguale a `y$key`, portando a @fig-join-gte.
Le funzioni di join di dplyr capiscono questa distinzione tra equi e join non-equi quindi mostreranno sempre entrambe le chiavi quando esegui un join non-equi.

```{r}
#| label: fig-join-gte
#| echo: false
#| fig-cap: |
#|   Un join non-equi dove la chiave `x` deve essere maggiore o uguale alla 
#|   chiave `y`. Molte righe generano corrispondenze multiple.
#| fig-alt: |
#|   Un diagramma di join che illustra join_by(key >= key). La prima riga
#|   di x corrisponde a una riga di y e la seconda e terza riga corrispondono
#|   ognuna a due righe. Questo significa che l'output ha cinque righe contenenti ognuna delle 
#|   seguenti coppie (key.x, key.y): (1, 1), (2, 1), (2, 2), (3, 1),
#|   (3, 2).
knitr::include_graphics("diagrams/join/gte.png", dpi = 270)
```

Join non-equi non è un termine particolarmente utile perché ti dice solo cosa il join non è, non cosa è. dplyr aiuta identificando quattro tipi particolarmente utili di join non-equi:

-   I **Cross join** corrispondono a ogni coppia di righe.
-   I **Join di disuguaglianza** usano `<`, `<=`, `>`, e `>=` invece di `==`.
-   I **Rolling join** sono simili ai join di disuguaglianza ma trovano solo la corrispondenza più vicina.
-   I **Join di sovrapposizione** sono un tipo speciale di join di disuguaglianza progettato per lavorare con intervalli.

Ognuno di questi è descritto più in dettaglio nelle sezioni seguenti.

### Cross join

Un cross join corrisponde a tutto, come in @fig-join-cross, generando il prodotto cartesiano delle righe.
Questo significa che l'output avrà `nrow(x) * nrow(y)` righe.

```{r}
#| label: fig-join-cross
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Un cross join abbina ogni riga in `x` con ogni riga in `y`.
#| fig-alt: |
#|   Un diagramma di join che mostra un punto per ogni combinazione di x e y.
knitr::include_graphics("diagrams/join/cross.png", dpi = 270)
```

I cross join sono utili quando generi permutazioni.
Per esempio, il codice sotto genera ogni possibile coppia di nomi.
Dato che stiamo unendo `df` a se stesso, questo è talvolta chiamato **self-join**.
I cross join usano una funzione di join diversa perché non c'è distinzione tra inner/left/right/full quando abbini ogni riga.

```{r}
df <- tibble(name = c("John", "Simon", "Tracy", "Max"))
df |> cross_join(df)
```

### Join di disuguaglianza

I join di disuguaglianza usano `<`, `<=`, `>=`, o `>` per restringere l'insieme di possibili corrispondenze, come in @fig-join-gte e @fig-join-lt.

```{r}
#| label: fig-join-lt
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   Un join di disuguaglianza dove `x` è unito a `y` su righe dove la chiave 
#|   di `x` è minore della chiave di `y`. Questo forma una forma triangolare
#|   nell'angolo in alto a sinistra.
#| fig-alt: |
#|   Un diagramma che raffigura un join di disuguaglianza dove un data frame x è unito da 
#|   un data frame y dove la chiave di x è minore della chiave di y, risultando 
#|   in una forma triangolare nell'angolo in alto a sinistra.
knitr::include_graphics("diagrams/join/lt.png", dpi = 270)
```

I join di disuguaglianza sono estremamente generali, così generali che è difficile inventare casi d'uso specifici significativi.
Una piccola tecnica utile è usarli per restringere il cross join così che invece di generare tutte le permutazioni, generiamo tutte le combinazioni:

```{r}
df <- tibble(id = 1:4, name = c("John", "Simon", "Tracy", "Max"))

df |> inner_join(df, join_by(id < id))
```

### Rolling joins

I Rolling join sono un tipo speciale di join di disuguaglianza dove invece di ottenere *ogni* riga che soddisfa la disuguaglianza, ottieni solo la riga più vicina, come in @fig-join-closest.
Puoi trasformare qualsiasi join di disuguaglianza in un rolling join aggiungendo `closest()`.
Per esempio `join_by(closest(x <= y))` abbina il più piccolo `y` che è maggiore o uguale a x, e `join_by(closest(x > y))` abbina il più grande `y` che è minore di `x`.

```{r}
#| label: fig-join-closest
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   A rolling join is similar to a greater-than-or-equal inequality join
#|   but only matches the first value.
#| fig-alt: |
#|   A rolling join is a subset of an inequality join so some matches are
#|   grayed out indicating that they're not used because they're not the 
#|   "closest".
knitr::include_graphics("diagrams/join/closest.png", dpi = 270)
```

I Rolling join sono particolarmente utili quando hai due tabelle di date che non si allineano perfettamente e vuoi trovare (ad esempio) la data più vicina nella tabella 1 che viene prima (o dopo) una certa data nella tabella 2.

Per esempio, immagina di essere responsabile della commissione per l'organizzazione delle feste del tuo ufficio.
La tua azienda è piuttosto tirchia quindi invece di avere feste individuali, fai solo una festa una volta per trimestre.
Le regole per determinare quando si terrà una festa sono un po' complesse: le feste sono sempre di lunedì, salti la prima settimana di gennaio dato che molte persone sono in vacanza, e il primo lunedì del Q3 2022 è il 4 luglio, quindi quello deve essere rimandato di una settimana.
Questo porta ai seguenti giorni di festa:

```{r}
parties <- tibble(
  q = 1:4,
  party = ymd(c("2022-01-10", "2022-04-04", "2022-07-11", "2022-10-03"))
)
```

Ora immagina di avere una tabella dei compleanni dei dipendenti:

```{r}
set.seed(123)
employees <- tibble(
  name = sample(babynames::babynames$name, 100),
  birthday = ymd("2022-01-01") + (sample(365, 100, replace = TRUE) - 1)
)
employees
```

E per ogni dipendente vogliamo trovare l'ultima data di festa che viene prima (o nel) del loro compleanno.
Possiamo esprimere questo con un rolling join:

```{r}
employees |> 
  left_join(parties, join_by(closest(birthday >= party)))
```

C'è, tuttavia, un problema con questo approccio: le persone con compleanni prima del 10 gennaio non ottengono una festa:

```{r}
employees |> 
  anti_join(parties, join_by(closest(birthday >= party)))
```

Per risolvere quel problema dovremo affrontare il problema in modo diverso, con gli overlap join.

### Overlap joins

Gli Overlap join forniscono tre helper che usano join di disuguaglianza per rendere più facile lavorare con gli intervalli:

-   `between(x, y_lower, y_upper)` è una scorciatoia per `x >= y_lower, x <= y_upper`.
-   `within(x_lower, x_upper, y_lower, y_upper)` è una scorciatoia per `x_lower >= y_lower, x_upper <= y_upper`.
-   `overlaps(x_lower, x_upper, y_lower, y_upper)` è una scorciatoia per `x_lower <= y_upper, x_upper >= y_lower`.

Continuiamo l'esempio del compleanno per vedere come potresti usarli.
C'è un problema con la strategia che abbiamo usato sopra: non c'è nessuna festa che precede i compleanni dal 1-9 gennaio.
Quindi potrebbe essere meglio essere espliciti sui range di date che ogni festa copre, e fare un caso speciale per quei compleanni precoci:

```{r}
parties <- tibble(
  q = 1:4,
  party = ymd(c("2022-01-10", "2022-04-04", "2022-07-11", "2022-10-03")),
  start = ymd(c("2022-01-01", "2022-04-04", "2022-07-11", "2022-10-03")),
  end = ymd(c("2022-04-03", "2022-07-11", "2022-10-02", "2022-12-31"))
)
parties
```

Hadley è disperatamente scarso nell'inserimento dei dati quindi voleva anche verificare che i periodi delle feste non si sovrappongano.
Un modo per farlo è usare un self-join per verificare se qualche intervallo inizio-fine si sovrappone con un altro:

```{r}
parties |> 
  inner_join(parties, join_by(overlaps(start, end, start, end), q < q)) |> 
  select(start.x, end.x, start.y, end.y)
```

Ops, c'è una sovrapposizione, quindi sistemiamo quel problema e continuiamo:

```{r}
parties <- tibble(
  q = 1:4,
  party = ymd(c("2022-01-10", "2022-04-04", "2022-07-11", "2022-10-03")),
  start = ymd(c("2022-01-01", "2022-04-04", "2022-07-11", "2022-10-03")),
  end = ymd(c("2022-04-03", "2022-07-10", "2022-10-02", "2022-12-31"))
)
```

Ora possiamo abbinare ogni dipendente alla sua festa.
Questo è un buon posto per usare `unmatched = "error"` perché vogliamo scoprire rapidamente se qualche dipendente non è stato assegnato a una festa.

```{r}
employees |> 
  inner_join(parties, join_by(between(birthday, start, end)), unmatched = "error")
```

### Exercises

1.  Can you explain what's happening with the keys in this equi join?
    Why are they different?

    ```{r}
    x |> full_join(y, join_by(key == key))

    x |> full_join(y, join_by(key == key), keep = TRUE)
    ```

2.  When finding if any party period overlapped with another party period we used `q < q` in the `join_by()`?
    Why?
    What happens if you remove this inequality?

## Riassunto

In questo capitolo, hai imparato come usare join mutanti e filtranti per combinare dati da una coppia di data frame.
Lungo la strada hai imparato come identificare le chiavi, e la differenza tra chiavi primarie e straniere.
Capisci anche come funzionano i join e come capire quante righe avrà l'output.
Infine, hai avuto un assaggio della potenza dei join non-equi e visto alcuni casi d'uso interessanti.

Questo capitolo conclude la parte "Transform" del libro dove il focus era sugli strumenti che potresti usare con colonne individuali e tibble.
Hai imparato delle funzioni dplyr e base per lavorare con vettori logici, numeri e tabelle complete, funzioni stringr per lavorare con stringhe, funzioni lubridate per lavorare con date-orari, e funzioni forcats per lavorare con fattori.

Nella prossima parte del libro, imparerai di più su come portare vari tipi di dati in R in una forma ordinata.