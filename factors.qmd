# Factors {#sec-factors}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

I fattori sono usati per variabili categoriche, variabili che hanno un insieme fisso e noto di possibili valori.
Sono anche utili quando vuoi visualizzare vettori di caratteri in un ordine non alfabetico.

Iniziamo motivando perché i fattori sono necessari per l'analisi dei dati[^factors-1] e come puoi crearli con `factor()`. Poi ti introdurremo al dataset `gss_cat` che contiene un gruppo di variabili categoriche con cui sperimentare.
Userai poi quel dataset per praticare la modifica dell'ordine e dei valori dei fattori, prima di concludere con una discussione sui fattori ordinati.

[^factors-1]: Sono anche molto importanti per la modellazione.

### Prerequisiti

R base fornisce alcuni strumenti di base per creare e manipolare fattori.
Li integreremo con il package **forcats**, che fa parte del core tidyverse.
Fornisce strumenti per gestire variabili **cat**egoriche (ed è un anagramma di factors!) usando una vasta gamma di helper per lavorare con i fattori.

```{r}
#| label: setup
#| message: false
library(tidyverse)
```

## Basi dei fattori

Immagina di avere una variabile che registra il mese:

```{r}
x1 <- c("Dec", "Apr", "Jan", "Mar")
```

Usare una stringa per registrare questa variabile ha due problemi:

1.  Ci sono solo dodici mesi possibili, e niente ti salva dagli errori di battitura:

    ```{r}
    x2 <- c("Dec", "Apr", "Jam", "Mar")
    ```

2.  Non ordina in modo utile:

    ```{r}
    sort(x1)
    ```

Puoi risolvere entrambi questi problemi con un fattore.
Per creare un fattore devi iniziare creando una lista dei **livelli** validi:

```{r}
month_levels <- c(
  "Jan", "Feb", "Mar", "Apr", "May", "Jun",
  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
```

Ora puoi creare un fattore:

```{r}
y1 <- factor(x1, levels = month_levels)
y1

sort(y1)
```

E qualsiasi valore non presente nei livelli sarà silenziosamente convertito in NA:

```{r}
y2 <- factor(x2, levels = month_levels)
y2
```

Questo sembra rischioso, quindi potresti voler usare `forcats::fct()` invece:

```{r}
#| error: true
y2 <- fct(x2, levels = month_levels)
```

Se ometti i livelli, saranno presi dai dati in ordine alfabetico:

```{r}
factor(x1)
```

Ordinare alfabeticamente è leggermente rischioso perché non ogni computer ordinerà le stringhe nello stesso modo.
Quindi `forcats::fct()` ordina per prima apparizione:

```{r}
fct(x1)
```

Se mai hai bisogno di accedere direttamente all'insieme dei livelli validi, puoi farlo con `levels()`:

```{r}
levels(y2)
```

Puoi anche creare un fattore quando leggi i tuoi dati con readr usando `col_factor()`:

```{r}
csv <- "
month,value
Jan,12
Feb,56
Mar,12"

df <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))
df$month
```

## General Social Survey

Per il resto di questo capitolo useremo `forcats::gss_cat`.
È un campione di dati dal [General Social Survey](https://gss.norc.org), un sondaggio statunitense di lunga durata condotto dall'organizzazione di ricerca indipendente NORC all'Università di Chicago.
Il sondaggio ha migliaia di domande, quindi in `gss_cat` Hadley ha selezionato una manciata che illustrerà alcune sfide comuni che incontrerai quando lavori con i fattori.

```{r}
gss_cat
```

(Ricorda, dato che questo dataset è fornito da un package, puoi ottenere più informazioni sulle variabili con `?gss_cat`.)

Quando i fattori sono memorizzati in un tibble, non puoi vedere i loro livelli così facilmente.
Un modo per visualizzarli è con `count()`:

```{r}
gss_cat |>
  count(race)
```

Quando lavori con i fattori, le due operazioni più comuni sono cambiare l'ordine dei livelli e cambiare i valori dei livelli.
Queste operazioni sono descritte nelle sezioni sottostanti.

### Esercizi

1.  Esplora la distribuzione di `rincome` (reddito dichiarato).
    Cosa rende difficile da capire il grafico a barre predefinito?
    Come potresti migliorare il grafico?

2.  Qual è il `relig` più comune in questo sondaggio?
    Qual è il `partyid` più comune?

3.  A quale `relig` si applica `denom` (denominazione)?
    Come puoi scoprirlo con una tabella?
    Come puoi scoprirlo con una visualizzazione?

## Modificare l'ordine dei fattori {#sec-modifying-factor-order}

È spesso utile cambiare l'ordine dei livelli dei fattori in una visualizzazione.
Ad esempio, immagina di voler esplorare il numero medio di ore trascorse a guardare la TV al giorno tra le religioni:

```{r}
#| fig-alt: |
#|   Un grafico a dispersione con tvhours sull'asse x e religion sull'asse y.
#|   L'asse y è ordinato apparentemente in modo arbitrario rendendo difficile
#|   ottenere un senso del pattern generale.
relig_summary <- gss_cat |>
  group_by(relig) |>
  summarize(
    tvhours = mean(tvhours, na.rm = TRUE),
    n = n()
  )

ggplot(relig_summary, aes(x = tvhours, y = relig)) +
  geom_point()
```

È difficile leggere questo grafico perché non c'è un pattern generale.
Possiamo migliorarlo riordinando i livelli di `relig` usando `fct_reorder()`.
`fct_reorder()` prende tre argomenti:

-   `.f`, il fattore di cui vuoi modificare i livelli.
-   `.x`, un vettore numerico che vuoi usare per riordinare i livelli.
-   Opzionalmente, `.fun`, una funzione che è usata se ci sono valori multipli di `.x` per ogni valore di `.f`. Il valore predefinito è `median`.

```{r}
#| fig-alt: |
#|   Lo stesso grafico a dispersione di sopra, ma ora la religione è visualizzata in
#|   ordine crescente di tvhours. "Other eastern" ha il minor numero di tvhours
#|   sotto 2, e "Don't know" ha il più alto (oltre 5).
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
  geom_point()
```

Riordinare la religione rende molto più facile vedere che le persone nella categoria "Don't know" guardano molta più TV, e l'Induismo e altre religioni orientali ne guardano molta meno.

Mentre inizi a fare trasformazioni più complicate, raccomandiamo di spostarle fuori da `aes()` e in un passaggio `mutate()` separato.
Ad esempio, potresti riscrivere il grafico sopra come:

```{r}
#| eval: false
relig_summary |>
  mutate(
    relig = fct_reorder(relig, tvhours)
  ) |>
  ggplot(aes(x = tvhours, y = relig)) +
  geom_point()
```

E se creassimo un grafico simile guardando come l'età media varia tra i livelli di reddito dichiarato?

```{r}
#| fig-alt: |
#|   Un grafico a dispersione con age sull'asse x e income sull'asse y. Income
#|   è stato riordinato in ordine di età media, il che non ha molto
#|   senso. Una sezione dell'asse y va da $6000-6999, poi <$1000,
#|   poi $8000-9999.
rincome_summary <- gss_cat |>
  group_by(rincome) |>
  summarize(
    age = mean(age, na.rm = TRUE),
    n = n()
  )

ggplot(rincome_summary, aes(x = age, y = fct_reorder(rincome, age))) +
  geom_point()
```

Qui, riordinare arbitrariamente i livelli non è una buona idea!
Questo perché `rincome` ha già un ordine basato su un principio con cui non dovremmo interferire.
Riserva `fct_reorder()` per fattori i cui livelli sono ordinati arbitrariamente.

Tuttavia, ha senso portare "Not applicable" in primo piano con gli altri livelli speciali.
Puoi usare `fct_relevel()`.
Prende un fattore, `.f`, e poi qualsiasi numero di livelli che vuoi spostare all'inizio della lista.

```{r}
#| fig-alt: |
#|   Lo stesso grafico a dispersione ma ora "Not Applicable" è visualizzato in
#|   fondo all'asse y. In generale c'è un'associazione positiva
#|   tra reddito ed età, e la fascia di reddito con l'età media più alta
#|   è "Not applicable".
ggplot(rincome_summary, aes(x = age, y = fct_relevel(rincome, "Not applicable"))) +
  geom_point()
```

Perché pensi che l'età media per "Not applicable" sia così alta?

Un altro tipo di riordinamento è utile quando stai colorando le linee in un grafico.
`fct_reorder2(.f, .x, .y)` riordina il fattore `.f` secondo i valori `.y` associati ai più grandi valori `.x`.
Questo rende il grafico più facile da leggere perché i colori della linea all'estrema destra del grafico si allineeranno con la legenda.

```{r}
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|     Un grafico a linee con age sull'asse x e proportion sull'asse y.
#|     C'è una linea per ogni categoria di stato civile: no answer,
#|     never married, separated, divorced, widowed, e married. È
#|     un po' difficile leggere il grafico perché l'ordine della legenda è
#|     non correlato alle linee sul grafico. Riorganizzare la legenda rende
#|     il grafico più facile da leggere perché i colori della legenda ora corrispondono
#|     all'ordine delle linee all'estrema destra del grafico. Puoi vedere alcuni
#|     pattern non sorprendenti: la proporzione never married diminuisce con
#|     l'età, married forma una U capovolta, e widowed inizia
#|     basso ma aumenta ripidamente dopo i 60 anni.
by_age <- gss_cat |>
  filter(!is.na(age)) |>
  count(age, marital) |>
  group_by(age) |>
  mutate(
    prop = n / sum(n)
  )

ggplot(by_age, aes(x = age, y = prop, color = marital)) +
  geom_line(linewidth = 1) +
  scale_color_brewer(palette = "Set1")

ggplot(by_age, aes(x = age, y = prop, color = fct_reorder2(marital, age, prop))) +
  geom_line(linewidth = 1) +
  scale_color_brewer(palette = "Set1") +
  labs(color = "marital")
```

Infine, per i grafici a barre, puoi usare `fct_infreq()` per ordinare i livelli in frequenza decrescente: questo è il tipo più semplice di riordinamento perché non ha bisogno di variabili extra.
Combinalo con `fct_rev()` se li vuoi in frequenza crescente così che nel grafico a barre i valori più grandi siano a destra, non a sinistra.

```{r}
#| fig-alt: |
#|   Un grafico a barre dello stato civile ordinato dal meno al più comune:
#|   no answer (~0), separated (~1,000), widowed (~2,000), divorced
#|   (~3,000), never married (~5,000), married (~10,000).
gss_cat |>
  mutate(marital = marital |> fct_infreq() |> fct_rev()) |>
  ggplot(aes(x = marital)) +
  geom_bar()
```

### Esercizi

1.  Ci sono alcuni numeri sospettosamente alti in `tvhours`.
    La media è un buon riassunto?

2.  Per ogni fattore in `gss_cat` identifica se l'ordine dei livelli è arbitrario o basato su un principio.

3.  Perché spostare "Not applicable" all'inizio dei livelli lo ha spostato in fondo al grafico?

## Modificare i livelli dei fattori

Più potente del cambiare l'ordine dei livelli è cambiare i loro valori.
Questo ti permette di chiarire le etichette per la pubblicazione e ridurre i livelli per visualizzazioni di alto livello.
Lo strumento più generale e potente è `fct_recode()`.
Ti permette di ricodificare, o cambiare, il valore di ogni livello.
Ad esempio, prendi la variabile `partyid` dal data frame `gss_cat`:

```{r}
gss_cat |> count(partyid)
```

I livelli sono concisi e inconsistenti.
Modifichiamoli per essere più lunghi e usare una costruzione parallela.
Come la maggior parte delle funzioni di rinomina e ricodifica nel tidyverse, i nuovi valori vanno a sinistra e i vecchi valori a destra:

```{r}
gss_cat |>
  mutate(
    partyid = fct_recode(partyid,
      "Republican, strong"    = "Strong republican",
      "Republican, weak"      = "Not str republican",
      "Independent, near rep" = "Ind,near rep",
      "Independent, near dem" = "Ind,near dem",
      "Democrat, weak"        = "Not str democrat",
      "Democrat, strong"      = "Strong democrat"
    )
  ) |>
  count(partyid)
```

`fct_recode()` lascerà i livelli che non sono esplicitamente menzionati come sono, e ti avvertirà se accidentalmente fai riferimento a un livello che non esiste.

Per combinare gruppi, puoi assegnare più vecchi livelli allo stesso nuovo livello:

```{r}
#| results: false
gss_cat |>
  mutate(
    partyid = fct_recode(partyid,
      "Republican, strong"    = "Strong republican",
      "Republican, weak"      = "Not str republican",
      "Independent, near rep" = "Ind,near rep",
      "Independent, near dem" = "Ind,near dem",
      "Democrat, weak"        = "Not str democrat",
      "Democrat, strong"      = "Strong democrat",
      "Other"                 = "No answer",
      "Other"                 = "Don't know",
      "Other"                 = "Other party"
    )
  )
```

Usa questa tecnica con attenzione: se raggruppi insieme categorie che sono veramente diverse finirai con risultati fuorvianti.

Se vuoi ridurre molti livelli, `fct_collapse()` è una variante utile di `fct_recode()`.
Per ogni nuova variabile, puoi fornire un vettore di vecchi livelli:

```{r}
gss_cat |>
  mutate(
    partyid = fct_collapse(partyid,
      "other" = c("No answer", "Don't know", "Other party"),
      "rep" = c("Strong republican", "Not str republican"),
      "ind" = c("Ind,near rep", "Independent", "Ind,near dem"),
      "dem" = c("Not str democrat", "Strong democrat")
    )
  ) |>
  count(partyid)
```

A volte vuoi semplicemente raggruppare insieme i piccoli gruppi per rendere un grafico o una tabella più semplice.
Questo è il compito della famiglia di funzioni `fct_lump_*()`.
`fct_lump_lowfreq()` è un punto di partenza semplice che raggruppa progressivamente le categorie dei gruppi più piccoli in "Other", mantenendo sempre "Other" come la categoria più piccola.

```{r}
gss_cat |>
  mutate(relig = fct_lump_lowfreq(relig)) |>
  count(relig)
```

In questo caso non è molto utile: è vero che la maggioranza degli americani in questo sondaggio sono protestanti, ma probabilmente vorremmo vedere qualche dettaglio in più!
Invece, possiamo usare `fct_lump_n()` per specificare che vogliamo esattamente 10 gruppi:

```{r}
gss_cat |>
  mutate(relig = fct_lump_n(relig, n = 10)) |>
  count(relig, sort = TRUE)
```

Leggi la documentazione per imparare riguardo `fct_lump_min()` e `fct_lump_prop()` che sono utili in altri casi.

### Esercizi

1.  Come sono cambiate nel tempo le proporzioni di persone che si identificano come democratici, repubblicani e indipendenti?

2.  Come potresti ridurre `rincome` in un piccolo insieme di categorie?

3.  Nota che ci sono 9 gruppi (escludendo other) nell'esempio `fct_lump` sopra.
    Perché non 10?
    (Suggerimento: digita `?fct_lump`, e trova il default per l'argomento `other_level` che è "Other".)

## Fattori ordinati {#sec-ordered-factors}

Prima di continuare, è importante menzionare brevemente un tipo speciale di fattore: i fattori ordinati.
Creati con la funzione `ordered()`, i fattori ordinati implicano un ordinamento rigoroso tra i livelli, ma non specificano nulla riguardo alla grandezza delle differenze tra i livelli.
Usi i fattori ordinati quando sai che i livelli sono classificati, ma non c'è una graduatoria numerica precisa.

Puoi identificare un fattore ordinato quando viene stampato perché usa simboli `<` tra i livelli del fattore:

```{r}
ordered(c("a", "b", "c"))
```

Sia in R base che nel tidyverse, i fattori ordinati si comportano molto similarmente ai fattori regolari.
Ci sono solo due posti dove potresti notare un comportamento diverso:

-   Se mappi un fattore ordinato al colore o riempimento in ggplot2, userà per default `scale_color_viridis()`/`scale_fill_viridis()`, una scala di colori che implica una graduatoria.
-   Se usi un predittore ordinato in un modello lineare, userà "contrasti polinomiali". Questi sono moderatamente utili, ma è improbabile che tu ne abbia sentito parlare a meno che tu non abbia un PhD in Statistica, e anche allora probabilmente non li interpreti di routine. Se vuoi imparare di più, raccomandiamo `vignette("contrasts", package = "faux")` di Lisa DeBruine.

Per gli scopi di questo libro, distinguere correttamente tra fattori regolari e ordinati non è particolarmente importante.
Più in generale, tuttavia, certi campi (particolarmente le scienze sociali) usano estensivamente i fattori ordinati.
In questi contesti, è importante identificarli correttamente così che altri package di analisi possano offrire il comportamento appropriato.

## Riepilogo

Questo capitolo ti ha introdotto al comodo package forcats per lavorare con i fattori, introducendoti alle funzioni più comunemente usate.
forcats contiene una vasta gamma di altri helper di cui non abbiamo avuto spazio per discutere qui, quindi ogni volta che affronti una sfida di analisi dei fattori che non hai mai incontrato prima, raccomando vivamente di dare un'occhiata al [reference index](https://forcats.tidyverse.org/reference/index.html) per vedere se c'è una funzione pronta che può aiutare a risolvere il tuo problema.

Se vuoi imparare di più sui fattori dopo aver letto questo capitolo, raccomandiamo di leggere il paper di Amelia McNamara e Nicholas Horton, [*Wrangling categorical data in R*](https://peerj.com/preprints/3163/).
Questo paper espone parte della storia discussa in [*stringsAsFactors: An unauthorized biography*](https://simplystatistics.org/posts/2015-07-24-stringsasfactors-an-unauthorized-biography/) e [*stringsAsFactors = \<sigh\>*](https://notstatschat.tumblr.com/post/124987394001/stringsasfactors-sigh), e confronta gli approcci tidy ai dati categorici delineati in questo libro con i metodi di R base.
Una versione iniziale del paper ha aiutato a motivare e definire l'ambito del package forcats; grazie Amelia & Nick!

Nel prossimo capitolo cambieremo marcia per iniziare a imparare su date e orari in R.
Date e orari sembrano ingannevolmente semplici, ma come vedrai presto, più impari su di loro, più complessi sembrano diventare!