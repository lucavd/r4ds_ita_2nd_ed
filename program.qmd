# Programmare {#sec-program-intro .unnumbered}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
```

In questa parte del libro, migliorerai le tue competenze di programmazione.
La programmazione è una competenza trasversale necessaria per tutto il lavoro di data science: devi usare un computer per fare data science; non puoi farlo nella tua testa, o con carta e penna.

```{r}
#| label: fig-ds-program
#| echo: false
#| out.width: ~
#| fig-cap: |
#|   La programmazione è l'acqua in cui nuotano tutti gli altri componenti.
#| fig-alt: |
#|   Il nostro modello del processo di data science con programmare (importare, ordinare,
#|   trasformare, visualizzare, modellare, e comunicare, cioè tutto) 
#|   evidenziato in blu.
knitr::include_graphics("diagrams/data-science/program.png", dpi = 270)
```

La programmazione produce codice, e il codice è uno strumento di comunicazione.
Ovviamente il codice dice al computer cosa vuoi che faccia.
Ma comunica anche significato ad altri esseri umani.
Pensare al codice come un veicolo per la comunicazione è importante perché ogni progetto che fai è fondamentalmente collaborativo.
Anche se non stai lavorando con altre persone, lavorerai sicuramente con il te-del-futuro!
Scrivere codice chiaro è importante così che altri (come il te-del-futuro) possano capire perché hai affrontato un'analisi nel modo in cui l'hai fatto.
Questo significa che migliorare nella programmazione comporta anche migliorare nella comunicazione.
Nel tempo, vuoi che il tuo codice diventi non solo più facile da scrivere, ma più facile da leggere per altri.

Nei seguenti tre capitoli, imparerai competenze per migliorare le tue abilità di programmazione:

1.  Copia-e-incolla è uno strumento potente, ma dovresti evitare di farlo più di due volte.
    Ripetersi nel codice è pericoloso perché può facilmente portare a errori e inconsistenze.
    Invece, nel @sec-functions, imparerai come scrivere **funzioni** che ti permettono di estrarre codice tidyverse ripetuto così che possa essere facilmente riutilizzato.

2.  Le funzioni estraggono codice ripetuto, ma spesso hai bisogno di ripetere le stesse azioni su input diversi.
    Hai bisogno di strumenti per l'**iterazione** che ti permettano di fare cose simili ancora e ancora.
    Questi strumenti includono loop for e programmazione funzionale, che imparerai nel @sec-iteration.

3.  Mentre leggi più codice scritto da altri, vedrai più codice che non usa il tidyverse.
    Nel @sec-base-r, imparerai alcune delle funzioni base R più importanti che vedrai in natura.

L'obiettivo di questi capitoli è insegnarti il minimo sulla programmazione di cui hai bisogno per la data science.
Una volta che hai padroneggiato il materiale qui, raccomandiamo fortemente che continui a investire nelle tue competenze di programmazione.
Abbiamo scritto due libri che potresti trovare utili.
[*Hands on Programming with R*](https://rstudio-education.github.io/hopr/), di Garrett Grolemund, è un'introduzione a R come linguaggio di programmazione ed è un ottimo posto per iniziare se R è il tuo primo linguaggio di programmazione.
[*Advanced R*](https://adv-r.hadley.nz/) di Hadley Wickham si immerge nei dettagli di R il linguaggio di programmazione; è un ottimo posto per iniziare se hai esperienza di programmazione esistente e un ottimo passo successivo una volta che hai interiorizzato le idee in questi capitoli.