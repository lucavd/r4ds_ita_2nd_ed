# Ordinare i dati {#sec-data-tidy}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

> "Le famiglie felici sono tutte uguali; ogni famiglia infelice è infelice a modo suo."\
> --- Leo Tolstoy

> "I dataset ordinati sono tutti uguali, ma ogni dataset disordinato è disordinato a modo suo."\
> --- Hadley Wickham

In questo capitolo, imparerai un modo consistente per organizzare i tuoi dati in R usando un sistema chiamato **dati ordinati**.
Portare i tuoi dati in questo formato richiede un po' di lavoro iniziale, ma quel lavoro ripaga nel lungo termine.
Una volta che hai dati ordinati e gli strumenti ordinati forniti dai pacchetti nel tidyverse, spenderai molto meno tempo a manipolare dati da una rappresentazione all'altra, permettendoti di spendere più tempo sulle domande sui dati che ti interessano.

In questo capitolo, prima imparerai la definizione di dati ordinati e la vedrai applicata a un semplice dataset di esempio.
Poi ci immergeremo nello strumento principale che userai per ordinare i dati: il pivoting.
Il pivoting ti permette di cambiare la forma dei tuoi dati senza cambiare nessuno dei valori.

### Prerequisiti

In questo capitolo, ci concentreremo su tidyr, un pacchetto che fornisce un gruppo di strumenti per aiutare a ordinare i tuoi dataset disordinati.
tidyr è un membro del tidyverse principale.

```{r}
#| label: setup
#| message: false
library(tidyverse)
```

Da questo capitolo in poi, sopprimeremo il messaggio di caricamento da `library(tidyverse)`.

## Dati ordinati {#sec-tidy-data}

Puoi rappresentare gli stessi dati sottostanti in modi multipli.
L'esempio sotto mostra gli stessi dati organizzati in tre modi diversi.
Ogni dataset mostra gli stessi valori di quattro variabili: *paese*, *anno*, *popolazione*, e numero di *casi* documentati di TB (tubercolosi), ma ogni dataset organizza i valori in modo diverso.

```{r}
table1

table2

table3
```

Queste sono tutte rappresentazioni degli stessi dati sottostanti, ma non sono ugualmente facili da usare.
Una di esse, `table1`, sarà molto più facile da lavorare dentro il tidyverse perché è **ordinata**.

Ci sono tre regole interconnesse che rendono un dataset ordinato:

1.  Ogni variabile è una colonna; ogni colonna è una variabile.
2.  Ogni osservazione è una riga; ogni riga è un'osservazione.
3.  Ogni valore è una cella; ogni cella è un singolo valore.

@fig-tidy-structure mostra le regole visivamente.

```{r}
#| label: fig-tidy-structure
#| echo: false
#| fig-cap: | 
#|   Le seguenti tre regole rendono un dataset ordinato: le variabili sono colonne,
#|   le osservazioni sono righe, e i valori sono celle.
#| fig-alt: | 
#|   Tre pannelli, ognuno che rappresenta un data frame ordinato. Il primo pannello
#|   mostra che ogni variabile è una colonna. Il secondo pannello mostra che ogni
#|   osservazione è una riga. Il terzo pannello mostra che ogni valore è
#|   una cella.
knitr::include_graphics("images/tidy-1.png", dpi = 270)
```

Perché assicurarsi che i tuoi dati siano ordinati?
Ci sono due vantaggi principali:

1.  C'è un vantaggio generale nel scegliere un modo consistente di memorizzare dati.
    Se hai una struttura dati consistente, è più facile imparare gli strumenti che lavorano con essa perché hanno un'uniformità sottostante.

2.  C'è un vantaggio specifico nel posizionare variabili in colonne perché permette alla natura vettorizzata di R di brillare.
    Come hai imparato in @sec-mutate e @sec-summarize, la maggior parte delle funzioni R integrate lavorano con vettori di valori.
    Questo rende la trasformazione di dati ordinati particolarmente naturale.

dplyr, ggplot2, e tutti gli altri pacchetti nel tidyverse sono progettati per lavorare con dati ordinati.
Ecco alcuni piccoli esempi che mostrano come potresti lavorare con `table1`.

```{r}
#| fig-width: 5
#| fig-alt: |
#|   Questa figura mostra il numero di casi nel 1999 e 2000 per 
#|   Afghanistan, Brasile, e Cina, con l'anno sull'asse x e il numero 
#|   di casi sull'asse y. Ogni punto sul grafico rappresenta il numero 
#|   di casi in un dato paese in un dato anno. I punti per ogni
#|   paese sono differenziati dagli altri per colore e forma e collegati
#|   con una linea, risultando in tre linee non parallele e non intersecanti.
#|   I numeri di casi in Cina sono i più alti sia per il 1999 che per il 2000, con
#|   valori sopra i 200.000 per entrambi gli anni. Il numero di casi in Brasile è
#|   circa 40.000 nel 1999 e circa 75.000 nel 2000. I
#|   numeri di casi in Afghanistan sono i più bassi sia per il 1999 che per il 2000, con
#|   valori che appaiono molto vicini a 0 su questa scala.
# Calcola tasso per 10.000
table1 |>
  mutate(rate = cases / population * 10000)

# Calcola casi totali per anno
table1 |> 
  group_by(year) |> 
  summarize(total_cases = sum(cases))

# Visualizza cambiamenti nel tempo
ggplot(table1, aes(x = year, y = cases)) +
  geom_line(aes(group = country), color = "grey50") +
  geom_point(aes(color = country, shape = country)) +
  scale_x_continuous(breaks = c(1999, 2000)) # interruzioni asse x a 1999 e 2000
```

### Esercizi

1.  Per ognuna delle tabelle di esempio, descrivi cosa rappresenta ogni osservazione e ogni colonna.

2.  Abbozza il processo che useresti per calcolare il `rate` per `table2` e `table3`.
    Dovrai eseguire quattro operazioni:

    a.  Estrarre il numero di casi TB per paese per anno.
    b.  Estrarre la popolazione corrispondente per paese per anno.
    c.  Dividere i casi per la popolazione, e moltiplicare per 10000.
    d.  Memorizzare nel posto appropriato.

    Non hai ancora imparato tutte le funzioni di cui avresti bisogno per eseguire effettivamente queste operazioni, ma dovresti essere ancora in grado di pensare alle trasformazioni di cui avresti bisogno.

## Allungare i dati {#sec-pivoting}

I principi dei dati ordinati potrebbero sembrare così ovvi che ti chiedi se incontrerai mai un dataset che non è ordinato.
Sfortunatamente, tuttavia, la maggior parte dei dati reali non è ordinata.
Ci sono due ragioni principali:

1.  I dati sono spesso organizzati per facilitare qualche obiettivo diverso dall'analisi.
    Per esempio, è comune che i dati siano strutturati per rendere facile l'inserimento dei dati, non l'analisi.

2.  La maggior parte delle persone non è familiare con i principi dei dati ordinati, ed è difficile derivarli da soli a meno che tu non spenda molto tempo lavorando con i dati.

Questo significa che la maggior parte delle analisi reali richiederà almeno un po' di ordinamento.
Inizirai capendo quali sono le variabili e osservazioni sottostanti.
A volte questo è facile; altre volte dovrai consultare le persone che hanno originariamente generato i dati.
Successivamente, farai il **pivot** dei tuoi dati in una forma ordinata, con variabili nelle colonne e osservazioni nelle righe.

tidyr fornisce due funzioni per il pivot dei dati: `pivot_longer()` e `pivot_wider()`.
Iniziamo prima con `pivot_longer()` perché è il caso più comune.
Immergiamoci in alcuni esempi.

### Dati nei nomi delle colonne {#sec-billboard}

Il dataset `billboard` registra la classifica billboard delle canzoni nell'anno 2000:

```{r}
billboard
```

In questo dataset, ogni osservazione è una canzone.
Le prime tre colonne (`artist`, `track` e `date.entered`) sono variabili che descrivono la canzone.
Poi abbiamo 76 colonne (`wk1`-`wk76`) che descrivono la classifica della canzone in ogni settimana[^data-tidy-1].
Qui, i nomi delle colonne sono una variabile (la `week`) e i valori delle celle sono un'altra (il `rank`).

[^data-tidy-1]: La canzone sarà inclusa finché era nella top 100 a un certo punto nel 2000, ed è tracciata per fino a 72 settimane dopo che appare.

Per ordinare questi dati, useremo `pivot_longer()`:

```{r, R.options=list(pillar.print_min = 10)}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  )
```

Dopo i dati, ci sono tre argomenti chiave:

-   `cols` specifica quali colonne devono essere ruotate, cioè quali colonne non sono variabili. Questo argomento usa la stessa sintassi di `select()` quindi qui potremmo usare `!c(artist, track, date.entered)` o `starts_with("wk")`.
-   `names_to` nomina la variabile memorizzata nei nomi delle colonne, abbiamo nominato quella variabile `week`.
-   `values_to` nomina la variabile memorizzata nei valori delle celle, abbiamo nominato quella variabile `rank`.

Nota che nel codice `"week"` e `"rank"` sono tra virgolette perché sono nuove variabili che stiamo creando, non esistono ancora nei dati quando eseguiamo la chiamata `pivot_longer()`.

Ora rivolgiamo la nostra attenzione al data frame risultante, più lungo.
Cosa succede se una canzone è nella top 100 per meno di 76 settimane?
Prendi "Baby Don't Cry" di 2Pac, per esempio.
L'output sopra suggerisce che era nella top 100 solo per 7 settimane, e tutte le settimane rimanenti sono riempite con valori mancanti.
Questi `NA` non rappresentano realmente osservazioni sconosciute; sono stati forzati ad esistere dalla struttura del dataset[^data-tidy-2], quindi possiamo chiedere a `pivot_longer()` di liberarsene impostando `values_drop_na = TRUE`:

[^data-tidy-2]: Torneremo su questa idea in @sec-missing-values.

```{r}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  )
```

Il numero di righe è ora molto più basso, indicando che molte righe con `NA` sono state eliminate.

Potresti anche chiederti cosa succede se una canzone è nella top 100 per più di 76 settimane?
Non possiamo dirlo da questi dati, ma potresti immaginare che colonne aggiuntive `wk77`, `wk78`, ...
verrebbero aggiunte al dataset.

Questi dati sono ora ordinati, ma potremmo rendere i calcoli futuri un po' più facili convertendo i valori di `week` da stringhe di caratteri a numeri usando `mutate()` e `readr::parse_number()`.
`parse_number()` è una funzione utile che estrarrà il primo numero da una stringa, ignorando tutto l'altro testo.

```{r}
billboard_longer <- billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  ) |> 
  mutate(
    week = parse_number(week)
  )
billboard_longer
```

Ora che abbiamo tutti i numeri delle settimane in una variabile e tutti i valori di classifica in un'altra, siamo in una buona posizione per visualizzare come le classifiche delle canzoni variano nel tempo.
Il codice è mostrato sotto e il risultato è in @fig-billboard-ranks.
Possiamo vedere che molto poche canzoni rimangono nella top 100 per più di 20 settimane.

```{r}
#| label: fig-billboard-ranks
#| fig-cap: |
#|   A line plot showing how the rank of a song changes over time.
#| fig-alt: |
#|   A line plot with week on the x-axis and rank on the y-axis, where
#|   each line represents a song. Most songs appear to start at a high rank,
#|   rapidly accelerate to a low rank, and then decay again. There are
#|   surprisingly few tracks in the region when week is >20 and rank is
#|   >50.
billboard_longer |> 
  ggplot(aes(x = week, y = rank, group = track)) + 
  geom_line(alpha = 0.25) + 
  scale_y_reverse()
```

### Come funziona il pivoting?

Ora che hai visto come possiamo usare il pivoting per rimodellare i nostri dati, prendiamo un po' di tempo per acquisire un'intuizione su cosa fa il pivoting ai dati.
Iniziamo con un dataset molto semplice per rendere più facile vedere cosa sta succedendo.
Supponi di avere tre pazienti con `id` A, B, e C, e prendiamo due misurazioni della pressione sanguigna su ogni paziente.
Creeremo i dati con `tribble()`, una funzione pratica per costruire piccoli tibble a mano:

```{r}
df <- tribble(
  ~id,  ~bp1, ~bp2,
   "A",  100,  120,
   "B",  140,  115,
   "C",  120,  125
)
```

Vogliamo che il nostro nuovo dataset abbia tre variabili: `id` (esiste già), `measurement` (i nomi delle colonne), e `value` (i valori delle celle).
Per ottenere questo, dobbiamo fare il pivot di `df` più lungo:

```{r}
df |> 
  pivot_longer(
    cols = bp1:bp2,
    names_to = "measurement",
    values_to = "value"
  )
```

Come funziona il rimodellamento?
È più facile da vedere se ci pensiamo colonna per colonna.
Come mostrato in @fig-pivot-variables, i valori in una colonna che era già una variabile nel dataset originale (`id`) devono essere ripetuti, una volta per ogni colonna che viene ruotata.

```{r}
#| label: fig-pivot-variables
#| echo: false
#| fig-cap: | 
#|   Le colonne che sono già variabili devono essere ripetute, una volta per
#|   ogni colonna che viene ruotata.
#| fig-alt: | 
#|   Un diagramma che mostra come `pivot_longer()` trasforma un semplice
#|   dataset, usando il colore per evidenziare come i valori nella colonna `id`
#|   ("A", "B", "C") sono ognuno ripetuti due volte nell'output perché ci sono
#|   due colonne che vengono ruotate ("bp1" e "bp2").
knitr::include_graphics("diagrams/tidy-data/variables.png", dpi = 270)
```

I nomi delle colonne diventano valori in una nuova variabile, il cui nome è definito da `names_to`, come mostrato in @fig-pivot-names.
Devono essere ripetuti una volta per ogni riga nel dataset originale.

```{r}
#| label: fig-pivot-names
#| echo: false
#| fig-cap: |
#|   The column names of pivoted columns become values in a new column. The 
#|   values need to be repeated once for each row of the original dataset.
#| fig-alt: | 
#|   A diagram showing how `pivot_longer()` transforms a simple
#|   data set, using color to highlight how column names ("bp1" and 
#|   "bp2") become the values in a new `measurement` column. They are repeated
#|   three times because there were three rows in the input.
knitr::include_graphics("diagrams/tidy-data/column-names.png", dpi = 270)
```

I valori delle celle diventano anche valori in una nuova variabile, con un nome definito da `values_to`.
Vengono srotolati riga per riga.
@fig-pivot-values illustra il processo.

```{r}
#| label: fig-pivot-values
#| echo: false
#| fig-cap: |
#|   The number of values is preserved (not repeated), but unwound
#|   row-by-row.
#| fig-alt: | 
#|   A diagram showing how `pivot_longer()` transforms data,
#|   using color to highlight how the cell values (blood pressure measurements)
#|   become the values in a new `value` column. They are unwound row-by-row,
#|   so the original rows (100,120), then (140,115), then (120,125), become 
#|   a column running from 100 to 125.
knitr::include_graphics("diagrams/tidy-data/cell-values.png", dpi = 270)
```

### Molte variabili nei nomi delle colonne

Una situazione più impegnativa si verifica quando hai molteplici pezzi di informazione compressi nei nomi delle colonne, e vorresti memorizzare questi in nuove variabili separate.
Per esempio, prendi il dataset `who2`, la fonte di `table1` e amici che hai visto sopra:

```{r}
who2
```

Questo dataset, raccolto dall'Organizzazione Mondiale della Sanità, registra informazioni sulle diagnosi di tubercolosi.
Ci sono due colonne che sono già variabili e sono facili da interpretare: `country` e `year`.
Sono seguite da 56 colonne come `sp_m_014`, `ep_m_4554`, e `rel_m_3544`.
Se fissi queste colonne abbastanza a lungo, noterai che c'è un pattern.
Ogni nome di colonna è composto da tre pezzi separati da `_`.
Il primo pezzo, `sp`/`rel`/`ep`, descrive il metodo usato per la diagnosi, il secondo pezzo, `m`/`f` è il `gender` (codificato come variabile binaria in questo dataset), e il terzo pezzo, `014`/`1524`/`2534`/`3544`/`4554`/`5564`/`65` è l'intervallo di `age` (`014` rappresenta 0-14, per esempio).

Quindi in questo caso abbiamo sei pezzi di informazione registrati in `who2`: il paese e l'anno (già colonne); il metodo di diagnosi, la categoria di genere, e la categoria di intervallo di età (contenuti negli altri nomi di colonna); e il conteggio di pazienti in quella categoria (valori delle celle).
Per organizzare questi sei pezzi di informazione in sei colonne separate, usiamo `pivot_longer()` con un vettore di nomi di colonna per `names_to` e istruzioni per dividere i nomi di variabile originali in pezzi per `names_sep` così come un nome di colonna per `values_to`:

```{r}
who2 |> 
  pivot_longer(
    cols = !(country:year),
    names_to = c("diagnosis", "gender", "age"), 
    names_sep = "_",
    values_to = "count"
  )
```

Un'alternativa a `names_sep` è `names_pattern`, che puoi usare per estrarre variabili da scenari di denominazione più complicati, una volta che hai imparato sulle espressioni regolari in @sec-regular-expressions.

Concettualmente, questa è solo una variazione minore del caso più semplice che hai già visto.
@fig-pivot-multiple-names mostra l'idea di base: ora, invece che i nomi delle colonne ruotino in una singola colonna, ruotano in molteplici colonne.
Puoi immaginare che questo accada in due passi (prima ruotando e poi separando) ma sotto il cofano accade in un singolo passo perché è più veloce.

```{r}
#| label: fig-pivot-multiple-names
#| echo: false
#| fig-cap: |
#|   Pivoting columns with multiple pieces of information in the names 
#|   means that each column name now fills in values in multiple output 
#|   columns.
#| fig-alt: |
#|   A diagram that uses color to illustrate how supplying `names_sep` 
#|   and multiple `names_to` creates multiple variables in the output.
#|   The input has variable names "x_1" and "y_2" which are split up
#|   by "_" to create name and number columns in the output. This is
#|   is similar case with a single `names_to`, but what would have been a
#|   single output variable is now separated into multiple variables.
knitr::include_graphics("diagrams/tidy-data/multiple-names.png", dpi = 270)
```

### Dati e nomi di variabili nelle intestazioni delle colonne

Il prossimo passo in complessità è quando i nomi delle colonne includono un mix di valori di variabili e nomi di variabili.
Per esempio, prendi il dataset `household`:

```{r}
household
```

Questo dataset contiene dati su cinque famiglie, con i nomi e le date di nascita di fino a due bambini.
La nuova sfida in questo dataset è che i nomi delle colonne contengono i nomi di due variabili (`dob`, `name`) e i valori di un'altra (`child`, con valori 1 o 2).
Per risolvere questo problema dobbiamo di nuovo fornire un vettore a `names_to` ma questa volta usiamo la sentinella speciale `".value"`; questo non è il nome di una variabile ma un valore unico che dice a `pivot_longer()` di fare qualcosa di diverso.
Questo sovrascrive il solito argomento `values_to` per usare il primo componente del nome della colonna ruotata come nome di variabile nell'output.

```{r}
household |> 
  pivot_longer(
    cols = !family, 
    names_to = c(".value", "child"), 
    names_sep = "_", 
    values_drop_na = TRUE
  )
```

Usiamo di nuovo `values_drop_na = TRUE`, dato che la forma dell'input forza la creazione di variabili mancanti esplicite (es., per famiglie con solo un bambino).

@fig-pivot-names-and-values illustra l'idea di base con un esempio più semplice.
Quando usi `".value"` in `names_to`, i nomi delle colonne nell'input contribuiscono sia ai valori che ai nomi delle variabili nell'output.

```{r}
#| label: fig-pivot-names-and-values
#| echo: false
#| fig-cap: |
#|   Pivoting with `names_to = c(".value", "num")` splits the column names
#|   into two components: the first part determines the output column
#|   name (`x` or `y`), and the second part determines the value of the
#|   `num` column.
#| fig-alt: |
#|   A diagram that uses color to illustrate how the special ".value"
#|   sentinel works. The input has names "x_1", "x_2", "y_1", and "y_2",
#|   and we want to use the first component ("x", "y") as a variable name
#|   and the second ("1", "2") as the value for a new "num" column.
knitr::include_graphics("diagrams/tidy-data/names-and-values.png", dpi = 270)
```

## Allargare i dati

Finora abbiamo usato `pivot_longer()` per risolvere la classe comune di problemi dove i valori sono finiti nei nomi delle colonne.
Successivamente ruoteremo (AH AH) a `pivot_wider()`, che rende i dataset **più larghi** aumentando le colonne e riducendo le righe e aiuta quando un'osservazione è distribuita su più righe.
Questo sembra emergere meno comunemente in natura, ma sembra comparire molto quando si ha a che fare con dati governativi.

Inizieremo guardando `cms_patient_experience`, un dataset dai Centers of Medicare and Medicaid services che raccoglie dati sulle esperienze dei pazienti:

```{r}
cms_patient_experience
```

L'unità principale studiata è un'organizzazione, ma ogni organizzazione è distribuita su sei righe, con una riga per ogni misurazione presa nell'organizzazione del sondaggio.
Possiamo vedere l'insieme completo di valori per `measure_cd` e `measure_title` usando `distinct()`:

```{r}
cms_patient_experience |> 
  distinct(measure_cd, measure_title)
```

Nessuna di queste colonne farà nomi di variabile particolarmente ottimi: `measure_cd` non accenna al significato della variabile e `measure_title` è una lunga frase contenente spazi.
Useremo `measure_cd` come fonte per i nostri nuovi nomi di colonna per ora, ma in un'analisi reale potresti voler creare i tuoi nomi di variabile che sono sia corti che significativi.

`pivot_wider()` ha l'interfaccia opposta a `pivot_longer()`: invece di scegliere nuovi nomi di colonna, dobbiamo fornire le colonne esistenti che definiscono i valori (`values_from`) e il nome della colonna (`names_from`):

```{r}
cms_patient_experience |> 
  pivot_wider(
    names_from = measure_cd,
    values_from = prf_rate
  )
```

L'output non sembra del tutto giusto; sembra che abbiamo ancora righe multiple per ogni organizzazione.
Questo perché, dobbiamo anche dire a `pivot_wider()` quale colonna o colonne hanno valori che identificano univocamente ogni riga; in questo caso sono le variabili che iniziano con `"org"`:

```{r}
cms_patient_experience |> 
  pivot_wider(
    id_cols = starts_with("org"),
    names_from = measure_cd,
    values_from = prf_rate
  )
```

Questo ci dà l'output che stiamo cercando.

### Come funziona `pivot_wider()`?

Per capire come funziona `pivot_wider()`, iniziamo di nuovo con un dataset molto semplice.
Questa volta abbiamo due pazienti con `id` A e B, abbiamo tre misurazioni della pressione sanguigna sul paziente A e due sul paziente B:

```{r}
df <- tribble(
  ~id, ~measurement, ~value,
  "A",        "bp1",    100,
  "B",        "bp1",    140,
  "B",        "bp2",    115, 
  "A",        "bp2",    120,
  "A",        "bp3",    105
)
```

Prenderemo i valori dalla colonna `value` e i nomi dalla colonna `measurement`:

```{r}
df |> 
  pivot_wider(
    names_from = measurement,
    values_from = value
  )
```

Per iniziare il processo `pivot_wider()` deve prima capire cosa andrà nelle righe e nelle colonne.
I nuovi nomi delle colonne saranno i valori unici di `measurement`.

```{r}
df |> 
  distinct(measurement) |> 
  pull()
```

Per default, le righe nell'output sono determinate da tutte le variabili che non vanno nei nuovi nomi o valori.
Queste sono chiamate `id_cols`.
Qui c'è solo una colonna, ma in generale ce ne possono essere quante se ne vuole.

```{r}
df |> 
  select(-measurement, -value) |> 
  distinct()
```

`pivot_wider()` poi combina questi risultati per generare un data frame vuoto:

```{r}
df |> 
  select(-measurement, -value) |> 
  distinct() |> 
  mutate(x = NA, y = NA, z = NA)
```

Poi riempie tutti i valori mancanti usando i dati nell'input.
In questo caso, non ogni cella nell'output ha un valore corrispondente nell'input dato che non c'è una terza misurazione della pressione sanguigna per il paziente B, quindi quella cella rimane mancante.
Torneremo su questa idea che `pivot_wider()` può "creare" valori mancanti in @sec-missing-values.

Potresti anche chiederti cosa succede se ci sono righe multiple nell'input che corrispondono a una cella nell'output.
L'esempio sotto ha due righe che corrispondono a `id` "A" e `measurement` "bp1":

```{r}
df <- tribble(
  ~id, ~measurement, ~value,
  "A",        "bp1",    100,
  "A",        "bp1",    102,
  "A",        "bp2",    120,
  "B",        "bp1",    140, 
  "B",        "bp2",    115
)
```

Se tentiamo di ruotare questo otteniamo un output che contiene list-columns, delle quali imparerai di più in @sec-rectangling:

```{r}
df |>
  pivot_wider(
    names_from = measurement,
    values_from = value
  )
```

Dato che non sai ancora come lavorare con questo tipo di dati, vorrai seguire il suggerimento nell'avvertimento per capire dov'è il problema:

```{r}
df |> 
  group_by(id, measurement) |> 
  summarize(n = n(), .groups = "drop") |> 
  filter(n > 1)
```

Sta poi a te capire cosa è andato storto con i tuoi dati e o riparare il danno sottostante o usare le tue abilità di raggruppamento e riassunto per assicurarti che ogni combinazione di valori di riga e colonna abbia solo una singola riga.

## Riassunto

In questo capitolo hai imparato sui dati ordinati: dati che hanno variabili nelle colonne e osservazioni nelle righe.
I dati ordinati rendono il lavoro nel tidyverse più facile, perché è una struttura consistente capita dalla maggior parte delle funzioni, la sfida principale è trasformare i dati da qualsiasi struttura tu li riceva in un formato ordinato.
A tal fine, hai imparato su `pivot_longer()` e `pivot_wider()` che ti permettono di ordinare molti dataset disordinati.
Gli esempi che abbiamo presentato qui sono una selezione di quelli da `vignette("pivot", package = "tidyr")`, quindi se incontri un problema che questo capitolo non ti aiuta a risolvere, quella vignette è un buon posto da provare successivamente.

Un'altra sfida è che, per un dato dataset, può essere impossibile etichettare la versione più lunga o più larga come quella "ordinata".
Questo è in parte un riflesso della nostra definizione di dati ordinati, dove abbiamo detto che i dati ordinati hanno una variabile in ogni colonna, ma non abbiamo effettivamente definito cosa sia una variabile (ed è sorprendentemente difficile farlo).
È totalmente giusto essere pragmatici e dire che una variabile è qualsiasi cosa renda la tua analisi più facile.
Quindi se sei bloccato nel capire come fare qualche calcolo, considera di cambiare l'organizzazione dei tuoi dati; non aver paura di disordinare, trasformare, e riordinare secondo necessità!

Se ti è piaciuto questo capitolo e vuoi imparare di più sulla teoria sottostante, puoi imparare di più sulla storia e i fondamenti teorici nel paper [Tidy Data](https://www.jstatsoft.org/article/view/v059i10) pubblicato nel Journal of Statistical Software.

Ora che stai scrivendo una quantità sostanziale di codice R, è ora di imparare di più sull'organizzare il tuo codice in file e directory.
Nel prossimo capitolo, imparerai tutto sui vantaggi di script e progetti, e alcuni dei molti strumenti che forniscono per rendere la tua vita più facile.