# Vettori logici {#sec-logicals}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

In questo capitolo, imparerai gli strumenti per lavorare con i vettori logici.
I vettori logici sono il tipo più semplice di vettore perché ogni elemento può essere solo uno di tre possibili valori: `TRUE`, `FALSE`, e `NA`.
È relativamente raro trovare vettori logici nei tuoi dati grezzi, ma li creerai e manipolerai nel corso di quasi ogni analisi.

Inizieremo discutendo il modo più comune di creare vettori logici: con confronti numerici.
Poi imparerai come puoi usare l'algebra booleana per combinare diversi vettori logici, oltre ad alcuni riassunti utili.
Finiremo con `if_else()` e `case_when()`, due funzioni utili per fare cambiamenti condizionali alimentati da vettori logici.

### Prerequisiti

La maggior parte delle funzioni che imparerai in questo capitolo sono fornite da base R, quindi non abbiamo bisogno del tidyverse, ma lo caricheremo comunque così possiamo usare `mutate()`, `filter()`, e le funzioni correlate per lavorare con i data frame.
Continueremo anche a trarre esempi dal dataset `nycflights13::flights`.

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(nycflights13)
```

Tuttavia, mentre iniziamo a coprire più strumenti, non ci sarà sempre un esempio reale perfetto.
Quindi inizieremo a creare alcuni dati fittizi con `c()`:

```{r}
x <- c(1, 2, 3, 5, 7, 11, 13)
x * 2
```

Questo rende più facile spiegare le singole funzioni al costo di rendere più difficile vedere come potrebbe applicarsi ai tuoi problemi di dati.
Ricorda solo che qualsiasi manipolazione che facciamo a un vettore libero, puoi farla a una variabile all'interno di un data frame con `mutate()` e le funzioni correlate.

```{r}
df <- tibble(x)
df |> 
  mutate(y = x * 2)
```

## Confronti

Un modo molto comune per creare un vettore logico è tramite un confronto numerico con `<`, `<=`, `>`, `>=`, `!=`, e `==`.
Finora, abbiamo principalmente creato variabili logiche temporaneamente all'interno di `filter()` --- vengono calcolate, usate, e poi scartate.
Per esempio, il seguente filtro trova tutte le partenze diurne che arrivano circa in orario:

```{r}
flights |> 
  filter(dep_time > 600 & dep_time < 2000 & abs(arr_delay) < 20)
```

È utile sapere che questa è una scorciatoia e puoi creare esplicitamente le variabili logiche sottostanti con `mutate()`:

```{r}
flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
    .keep = "used"
  )
```

Questo è particolarmente utile per logica più complicata perché dare un nome ai passaggi intermedi rende più facile sia leggere il tuo codice che verificare che ogni passaggio sia stato calcolato correttamente.

In definitiva, il filtro iniziale è equivalente a:

```{r}
#| results: false
flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
  ) |> 
  filter(daytime & approx_ontime)
```

### Confronto a virgola mobile {#sec-fp-comparison}

Fai attenzione a usare `==` con i numeri.
Per esempio, sembra che questo vettore contenga i numeri 1 e 2:

```{r}
x <- c(1 / 49 * 49, sqrt(2) ^ 2)
x
```

Ma se li testi per l'uguaglianza, ottieni `FALSE`:

```{r}
x == c(1, 2)
```

Cosa sta succedendo?
I computer memorizzano i numeri con un numero fisso di posizioni decimali quindi non c'è modo di rappresentare esattamente 1/49 o `sqrt(2)` e i calcoli successivi saranno leggermente sbagliati.
Possiamo vedere i valori esatti chiamando `print()` con l'argomento `digits`[^logicals-1]:

[^logicals-1]: R normalmente chiama print per te (cioè `x` è una scorciatoia per `print(x)`), ma chiamarlo esplicitamente è utile se vuoi fornire altri argomenti.

```{r}
print(x, digits = 16)
```

Puoi vedere perché R per default arrotonda questi numeri; sono davvero molto vicini a quello che ti aspetti.

Ora che hai visto perché `==` sta fallendo, cosa puoi fare al riguardo?
Un'opzione è usare `dplyr::near()` che ignora piccole differenze:

```{r}
near(x, c(1, 2))
```

### Valori mancanti {#sec-na-comparison}

I valori mancanti rappresentano l'ignoto quindi sono "contagiosi": quasi ogni operazione che coinvolge un valore ignoto sarà anch'essa ignota:

```{r}
NA > 5
10 == NA
```

Il risultato più confuso è questo:

```{r}
NA == NA
```

È più facile capire perché questo è vero se forniamo artificialmente un po' più di contesto:

```{r}
# Non sappiamo quanti anni ha Mary
age_mary <- NA

# Non sappiamo quanti anni ha John
age_john <- NA

# Mary e John hanno la stessa età?
age_mary == age_john
# Non lo sappiamo!
```

Quindi se vuoi trovare tutti i voli dove `dep_time` è mancante, il seguente codice non funziona perché `dep_time == NA` produrrà `NA` per ogni singola riga, e `filter()` automaticamente elimina i valori mancanti:

```{r}
flights |> 
  filter(dep_time == NA)
```

Invece avremo bisogno di un nuovo strumento: `is.na()`.

### `is.na()`

`is.na(x)` funziona con qualsiasi tipo di vettore e restituisce `TRUE` per i valori mancanti e `FALSE` per tutto il resto:

```{r}
is.na(c(TRUE, NA, FALSE))
is.na(c(1, NA, 3))
is.na(c("a", NA, "b"))
```

Possiamo usare `is.na()` per trovare tutte le righe con un `dep_time` mancante:

```{r}
flights |> 
  filter(is.na(dep_time))
```

`is.na()` può anche essere utile in `arrange()`.
`arrange()` di solito mette tutti i valori mancanti alla fine ma puoi sovrascrivere questo default ordinando prima per `is.na()`:

```{r}
flights |> 
  filter(month == 1, day == 1) |> 
  arrange(dep_time)

flights |> 
  filter(month == 1, day == 1) |> 
  arrange(desc(is.na(dep_time)), dep_time)
```

Torneremo a coprire i valori mancanti più in profondità in @sec-missing-values.

### Esercizi

1.  Come funziona `dplyr::near()`? Digita `near` per vedere il codice sorgente. `sqrt(2)^2` è vicino a 2?
2.  Usa `mutate()`, `is.na()`, e `count()` insieme per descrivere come i valori mancanti in `dep_time`, `sched_dep_time` e `dep_delay` sono collegati.

## Algebra booleana

Una volta che hai vettori logici multipli, puoi combinarli insieme usando l'algebra booleana.
In R, `&` è "e", `|` è "o", `!` è "non", e `xor()` è o esclusivo[^logicals-2].
Per esempio, `df |> filter(!is.na(x))` trova tutte le righe dove `x` non è mancante e `df |> filter(x < -10 | x > 0)` trova tutte le righe dove `x` è più piccolo di -10 o più grande di 0.
@fig-bool-ops mostra l'insieme completo delle operazioni booleane e come funzionano.

[^logicals-2]: Cioè, `xor(x, y)` è vero se x è vero, o y è vero, ma non entrambi.
    Questo è come usiamo di solito "o" in italiano.
    "Entrambi" non è di solito una risposta accettabile alla domanda "vorresti gelato o torta?".

```{r}
#| label: fig-bool-ops
#| echo: false
#| out-width: NULL
#| fig-cap: | 
#|    The complete set of Boolean operations. `x` is the left-hand
#|    circle, `y` is the right-hand circle, and the shaded regions show 
#|    which parts each operator selects.
#| fig-alt: |
#|    Seven Venn diagrams, each explaining a given logical operator. The
#|    circles (sets) in each of the Venn diagrams represent x and y. x &
#|    !y is x but none of y; x & y is the intersection of x and y; !x & y is
#|    y but none of x; x is all of x; xor(x, y) is everything
#|    except the intersection of x and y; y is all of y; and 
#|    x | y is everything.
knitr::include_graphics("diagrams/transform.png", dpi = 270)
```

Oltre a `&` e `|`, R ha anche `&&` e `||`.
Non usarli nelle funzioni dplyr!
Questi sono chiamati operatori di corto circuito e restituiscono solo un singolo `TRUE` o `FALSE`.
Sono importanti per la programmazione, non per la data science.

### Valori mancanti {#sec-na-boolean}

Le regole per i valori mancanti nell'algebra booleana sono un po' difficili da spiegare perché sembrano incoerenti a prima vista:

```{r}
df <- tibble(x = c(TRUE, FALSE, NA))

df |> 
  mutate(
    and = x & NA,
    or = x | NA
  )
```

Per capire cosa sta succedendo, pensa a `NA | TRUE` (`NA` o `TRUE`).
Un valore mancante in un vettore logico significa che il valore potrebbe essere sia `TRUE` che `FALSE`.
`TRUE | TRUE` e `FALSE | TRUE` sono entrambi `TRUE` perché almeno uno di essi è `TRUE`.
`NA | TRUE` deve anche essere `TRUE` perché `NA` può essere sia `TRUE` che `FALSE`.
Tuttavia, `NA | FALSE` è `NA` perché non sappiamo se `NA` è `TRUE` o `FALSE`.
Un ragionamento simile si applica per `&` considerando che entrambe le condizioni devono essere soddisfatte.
Quindi `NA & TRUE` è `NA` perché `NA` può essere sia `TRUE` che `FALSE` e `NA & FALSE` è `FALSE` perché almeno una delle condizioni è `FALSE`.

### Ordine delle operazioni {#sec-order-operations-boolean}

Nota che l'ordine delle operazioni non funziona come in italiano.
Prendi il seguente codice che trova tutti i voli partiti a novembre o dicembre:

```{r}
#| eval: false
flights |> 
   filter(month == 11 | month == 12)
```

Potresti essere tentato di scriverlo come diresti in italiano: "Trova tutti i voli partiti a novembre o dicembre.":

```{r}
flights |> 
   filter(month == 11 | 12)
```

Questo codice non dà errore ma non sembra aver funzionato.
Cosa sta succedendo?
Qui, R prima valuta `month == 11` creando un vettore logico, che chiamiamo `nov`.
Calcola `nov | 12`.
Quando usi un numero con un operatore logico converte tutto tranne 0 in `TRUE`, quindi questo è equivalente a `nov | TRUE` che sarà sempre `TRUE`, quindi ogni riga sarà selezionata:

```{r}
flights |> 
  mutate(
    nov = month == 11,
    final = nov | 12,
    .keep = "used"
  )
```

### `%in%`

Un modo facile per evitare il problema di mettere i tuoi `==` e `|` nell'ordine giusto è usare `%in%`.
`x %in% y` restituisce un vettore logico della stessa lunghezza di `x` che è `TRUE` ogni volta che un valore in `x` è presente in `y`.

```{r}
1:12 %in% c(1, 5, 11)
letters[1:10] %in% c("a", "e", "i", "o", "u")
```

Quindi per trovare tutti i voli a novembre e dicembre potremmo scrivere:

```{r}
#| eval: false
flights |> 
  filter(month %in% c(11, 12))
```

Nota che `%in%` obbedisce a regole diverse per `NA` rispetto a `==`, dato che `NA %in% NA` è `TRUE`.

```{r}
c(1, 2, NA) == NA
c(1, 2, NA) %in% NA
```

Questo può costituire una scorciatoia utile:

```{r}
flights |> 
  filter(dep_time %in% c(NA, 0800))
```

### Esercizi

1.  Trova tutti i voli dove `arr_delay` è mancante ma `dep_delay` non lo è. Trova tutti i voli dove né `arr_time` né `sched_arr_time` sono mancanti, ma `arr_delay` sì.
2.  Quanti voli hanno un `dep_time` mancante? Quali altre variabili sono mancanti in queste righe? Cosa potrebbero rappresentare queste righe?
3.  Assumendo che un `dep_time` mancante implichi che un volo è cancellato, guarda il numero di voli cancellati per giorno. C'è un pattern? C'è una connessione tra la proporzione di voli cancellati e il ritardo medio dei voli non cancellati?

## Riassunti {#sec-logical-summaries}

Le seguenti sezioni descrivono alcune tecniche utili per riassumere i vettori logici.
Oltre alle funzioni che funzionano specificamente solo con i vettori logici, puoi anche usare funzioni che funzionano con i vettori numerici.

### Riassunti logici

Ci sono due riassunti logici principali: `any()` e `all()`.
`any(x)` è l'equivalente di `|`; restituirà `TRUE` se ci sono dei `TRUE` in `x`.
`all(x)` è l'equivalente di `&`; restituirà `TRUE` solo se tutti i valori di `x` sono `TRUE`.
Come la maggior parte delle funzioni di riassunto, puoi far sparire i valori mancanti con `na.rm = TRUE`.

Per esempio, potremmo usare `all()` e `any()` per scoprire se ogni volo era in ritardo alla partenza di al massimo un'ora o se alcuni voli erano in ritardo all'arrivo di cinque ore o più.
E usare `group_by()` ci permette di farlo per giorno:

```{r}
flights |> 
  group_by(year, month, day) |> 
  summarize(
    all_delayed = all(dep_delay <= 60, na.rm = TRUE),
    any_long_delay = any(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

Nella maggior parte dei casi, tuttavia, `any()` e `all()` sono un po' troppo grossolani, e sarebbe bello poter ottenere un po' più di dettagli su quanti valori sono `TRUE` o `FALSE`.
Questo ci porta ai riassunti numerici.

### Riassunti numerici di vettori logici {#sec-numeric-summaries-of-logicals}

Quando usi un vettore logico in un contesto numerico, `TRUE` diventa 1 e `FALSE` diventa 0.
Questo rende `sum()` e `mean()` molto utili con i vettori logici perché `sum(x)` dà il numero di `TRUE` e `mean(x)` dà la proporzione di `TRUE` (perché `mean()` è solo `sum()` diviso per `length()`).

Questo, per esempio, ci permette di vedere la proporzione di voli che erano in ritardo alla partenza di al massimo un'ora e il numero di voli che erano in ritardo all'arrivo di cinque ore o più:

```{r}
flights |> 
  group_by(year, month, day) |> 
  summarize(
    proportion_delayed = mean(dep_delay <= 60, na.rm = TRUE),
    count_long_delay = sum(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

### Sottoinsiemi logici

C'è un ultimo uso per i vettori logici nei riassunti: puoi usare un vettore logico per filtrare una singola variabile a un sottoinsieme di interesse.
Questo fa uso dell'operatore base `[` (pronunciato subset), di cui imparerai di più in @sec-subset-many.

Immagina che volessimo guardare il ritardo medio solo per i voli che erano effettivamente in ritardo.
Un modo per farlo sarebbe prima filtrare i voli e poi calcolare il ritardo medio:

```{r}
flights |> 
  filter(arr_delay > 0) |> 
  group_by(year, month, day) |> 
  summarize(
    behind = mean(arr_delay),
    n = n(),
    .groups = "drop"
  )
```

Questo funziona, ma cosa succede se volessimo anche calcolare il ritardo medio per i voli arrivati in anticipo?
Avremmo bisogno di eseguire un passaggio di filtro separato, e poi capire come combinare i due data frame insieme[^logicals-3].
Invece potresti usare `[` per eseguire un filtraggio inline: `arr_delay[arr_delay > 0]` produrrà solo i ritardi di arrivo positivi.

[^logicals-3]: Copriremo questo in @sec-joins.

Questo porta a:

```{r}
flights |> 
  group_by(year, month, day) |> 
  summarize(
    behind = mean(arr_delay[arr_delay > 0], na.rm = TRUE),
    ahead = mean(arr_delay[arr_delay < 0], na.rm = TRUE),
    n = n(),
    .groups = "drop"
  )
```

Nota anche la differenza nella dimensione del gruppo: nel primo blocco `n()` dà il numero di voli in ritardo per giorno; nel secondo, `n()` dà il numero totale di voli.

### Esercizi

1.  Cosa ti dirà `sum(is.na(x))`? E `mean(is.na(x))`?
2.  Cosa restituisce `prod()` quando applicato a un vettore logico? A quale funzione di riassunto logico è equivalente? Cosa restituisce `min()` quando applicato a un vettore logico? A quale funzione di riassunto logico è equivalente? Leggi la documentazione e fai alcuni esperimenti.

## Trasformazioni condizionali

Una delle caratteristiche più potenti dei vettori logici è il loro uso per trasformazioni condizionali, cioè fare una cosa per la condizione x, e qualcosa di diverso per la condizione y.
Ci sono due strumenti importanti per questo: `if_else()` e `case_when()`.

### `if_else()`

Se vuoi usare un valore quando una condizione è `TRUE` e un altro valore quando è `FALSE`, puoi usare `dplyr::if_else()`[^logicals-4].
Userai sempre i primi tre argomenti di `if_else()`. Il primo argomento, `condition`, è un vettore logico, il secondo, `true`, dà l'output quando la condizione è vera, e il terzo, `false`, dà l'output se la condizione è falsa.

[^logicals-4]: `if_else()` di dplyr è molto simile a `ifelse()` di base R.
    Ci sono due vantaggi principali di `if_else()` rispetto a `ifelse()`: puoi scegliere cosa dovrebbe succedere ai valori mancanti, e `if_else()` è molto più probabile che ti dia un errore significativo se le tue variabili hanno tipi incompatibili.

Iniziamo con un semplice esempio di etichettatura di un vettore numerico come "+ve" (positivo) o "-ve" (negativo):

```{r}
x <- c(-3:3, NA)
if_else(x > 0, "+ve", "-ve")
```

C'è un quarto argomento opzionale, `missing` che sarà usato se l'input è `NA`:

```{r}
if_else(x > 0, "+ve", "-ve", "???")
```

Puoi anche usare vettori per gli argomenti `true` e `false`.
Per esempio, questo ci permette di creare un'implementazione minimale di `abs()`:

```{r}
if_else(x < 0, -x, x)
```

Finora tutti gli argomenti hanno usato gli stessi vettori, ma puoi ovviamente mescolare e abbinare.
Per esempio, potresti implementare una versione semplice di `coalesce()` così:

```{r}
x1 <- c(NA, 1, 2, NA)
y1 <- c(3, NA, 4, 6)
if_else(is.na(x1), y1, x1)
```

Potresti aver notato una piccola imperfezione nel nostro esempio di etichettatura sopra: zero non è né positivo né negativo.
Potremmo risolvere questo aggiungendo un `if_else()` aggiuntivo:

```{r}
if_else(x == 0, "0", if_else(x < 0, "-ve", "+ve"), "???")
```

Questo è già un po' difficile da leggere, e puoi immaginare che diventerebbe solo più difficile se avessi più condizioni.
Invece, puoi passare a `dplyr::case_when()`.

### `case_when()`

`case_when()` di dplyr è ispirato dall'istruzione `CASE` di SQL e fornisce un modo flessibile di eseguire calcoli diversi per condizioni diverse.
Ha una sintassi speciale che purtroppo non assomiglia a nient'altro che userai nel tidyverse.
Prende coppie che sembrano `condition ~ output`.
`condition` deve essere un vettore logico; quando è `TRUE`, `output` sarà usato.

Questo significa che potremmo ricreare il nostro precedente `if_else()` annidato come segue:

```{r}
x <- c(-3:3, NA)
case_when(
  x == 0   ~ "0",
  x < 0    ~ "-ve", 
  x > 0    ~ "+ve",
  is.na(x) ~ "???"
)
```

Questo è più codice, ma è anche più esplicito.

Per spiegare come funziona `case_when()`, esploriamo alcuni casi più semplici.
Se nessuno dei casi corrisponde, l'output ottiene un `NA`:

```{r}
case_when(
  x < 0 ~ "-ve",
  x > 0 ~ "+ve"
)
```

Usa `.default` se vuoi creare un valore "default"/cattura-tutto:

```{r}
case_when(
  x < 0 ~ "-ve",
  x > 0 ~ "+ve",
  .default = "???"
)
```

E nota che se condizioni multiple corrispondono, solo la prima sarà usata:

```{r}
case_when(
  x > 0 ~ "+ve",
  x > 2 ~ "big"
)
```

Proprio come con `if_else()` puoi usare variabili su entrambi i lati del `~` e puoi mescolare e abbinare variabili come necessario per il tuo problema.
Per esempio, potremmo usare `case_when()` per fornire alcune etichette leggibili per il ritardo di arrivo:

```{r}
flights |> 
  mutate(
    status = case_when(
      is.na(arr_delay)      ~ "cancelled",
      arr_delay < -30       ~ "very early",
      arr_delay < -15       ~ "early",
      abs(arr_delay) <= 15  ~ "on time",
      arr_delay < 60        ~ "late",
      arr_delay < Inf       ~ "very late",
    ),
    .keep = "used"
  )
```

Fai attenzione quando scrivi questo tipo di istruzione `case_when()` complessa; i miei primi due tentativi hanno usato un mix di `<` e `>` e ho continuato a creare accidentalmente condizioni sovrapposte.

### Tipi compatibili

Nota che sia `if_else()` che `case_when()` richiedono tipi **compatibili** nell'output.
Se non sono compatibili, vedrai errori come questo:

```{r}
#| error: true
if_else(TRUE, "a", 1)

case_when(
  x < -1 ~ TRUE,  
  x > 0  ~ now()
)
```

In generale, relativamente pochi tipi sono compatibili, perché convertire automaticamente un tipo di vettore in un altro è una fonte comune di errori.
Ecco i casi più importanti che sono compatibili:

-   I vettori numerici e logici sono compatibili, come abbiamo discusso in @sec-numeric-summaries-of-logicals.
-   Stringhe e fattori (@sec-factors) sono compatibili, perché puoi pensare a un fattore come a una stringa con un insieme ristretto di valori.
-   Date e date-ora, che discuteremo in @sec-dates-and-times, sono compatibili perché puoi pensare a una data come a un caso speciale di data-ora.
-   `NA`, che è tecnicamente un vettore logico, è compatibile con tutto perché ogni vettore ha qualche modo di rappresentare un valore mancante.

Non ci aspettiamo che tu memorizzi queste regole, ma dovrebbero diventare una seconda natura nel tempo perché sono applicate coerentemente in tutto il tidyverse.

### Esercizi

1.  Un numero è pari se è divisibile per due, cosa che in R puoi scoprire con `x %% 2 == 0`.
    Usa questo fatto e `if_else()` per determinare se ogni numero tra 0 e 20 è pari o dispari.

2.  Dato un vettore di giorni come `x <- c("Monday", "Saturday", "Wednesday")`, usa un'istruzione `if_else()` per etichettarli come fine settimana o giorni feriali.

3.  Usa `if_else()` per calcolare il valore assoluto di un vettore numerico chiamato `x`.

4.  Scrivi un'istruzione `case_when()` che usa le colonne `month` e `day` da `flights` per etichettare una selezione di importanti festività americane (es., Capodanno, 4 luglio, Thanksgiving, e Natale).
    Prima crea una colonna logica che è o `TRUE` o `FALSE`, e poi crea una colonna di caratteri che o dà il nome della festività o è `NA`.

## Riassunto

La definizione di un vettore logico è semplice perché ogni valore deve essere o `TRUE`, `FALSE`, o `NA`.
Ma i vettori logici forniscono una quantità enorme di potenza.
In questo capitolo, hai imparato come creare vettori logici con `>`, `<`, `<=`, `>=`, `==`, `!=`, e `is.na()`, come combinarli con `!`, `&`, e `|`, e come riassumerli con `any()`, `all()`, `sum()`, e `mean()`.
Hai anche imparato le potenti funzioni `if_else()` e `case_when()` che ti permettono di restituire valori a seconda del valore di un vettore logico.

Vedremo i vettori logici ancora e ancora nei capitoli seguenti.
Per esempio in @sec-strings imparerai `str_detect(x, pattern)` che restituisce un vettore logico che è `TRUE` per gli elementi di `x` che corrispondono al `pattern`, e in @sec-dates-and-times creerai vettori logici dal confronto di date e orari.
Ma per ora, passeremo al prossimo tipo più importante di vettore: i vettori numerici.