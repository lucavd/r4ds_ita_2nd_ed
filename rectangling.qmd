# Dati gerarchici {#sec-rectangling}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

In questo capitolo, imparerai l'arte del **rectangling** dei dati: prendere dati che sono fondamentalmente gerarchici, o ad albero, e convertirli in un data frame rettangolare composto da righe e colonne.
Questo è importante perché i dati gerarchici sono sorprendentemente comuni, specialmente quando si lavora con dati che provengono dal web.

Per imparare il rectangling, dovrai prima imparare le liste, la struttura dati che rende possibili i dati gerarchici.
Poi imparerai due funzioni tidyr cruciali: `tidyr::unnest_longer()` e `tidyr::unnest_wider()`.
Poi ti mostreremo alcuni casi di studio, applicando queste funzioni semplici ancora e ancora per risolvere problemi reali.
Finiremo parlando di JSON, la fonte più frequente di dataset gerarchici e un formato comune per lo scambio di dati sul web.

### Prerequisiti

In questo capitolo, useremo molte funzioni da tidyr, un membro centrale del tidyverse.
Useremo anche repurrrsive per fornire alcuni dataset interessanti per la pratica del rectangling, e finiremo usando jsonlite per leggere file JSON in liste R.

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(repurrrsive)
library(jsonlite)
```

## Liste

Finora hai lavorato con data frame che contengono vettori semplici come interi, numeri, caratteri, date-ora e fattori.
Questi vettori sono semplici perché sono omogenei: ogni elemento è dello stesso tipo di dato.
Se vuoi memorizzare elementi di tipi diversi nello stesso vettore, avrai bisogno di una **lista**, che crei con `list()`:

```{r}
x1 <- list(1:4, "a", TRUE)
x1
```

È spesso conveniente nominare i componenti, o **figli**, di una lista, cosa che puoi fare nello stesso modo in cui nomini le colonne di un tibble:

```{r}
x2 <- list(a = 1:2, b = 1:3, c = 1:4)
x2
```

Anche per queste liste molto semplici, la stampa occupa parecchio spazio.
Un'alternativa utile è `str()`, che genera una visualizzazione compatta della **str**uttura, de-enfatizzando i contenuti:

```{r}
str(x1)
str(x2)
```

Come puoi vedere, `str()` visualizza ogni figlio della lista sulla propria riga.
Visualizza il nome, se presente, poi un'abbreviazione del tipo, poi i primi valori.

### Gerarchia

Le liste possono contenere qualsiasi tipo di oggetto, incluse altre liste.
Questo le rende adatte per rappresentare strutture gerarchiche (ad albero):

```{r}
x3 <- list(list(1, 2), list(3, 4))
str(x3)
```

Questo è notevolmente diverso da `c()`, che genera un vettore piatto:

```{r}
c(c(1, 2), c(3, 4))

x4 <- c(list(1, 2), list(3, 4))
str(x4)
```

Man mano che le liste diventano più complesse, `str()` diventa più utile, poiché ti permette di vedere la gerarchia a colpo d'occhio:

```{r}
x5 <- list(1, list(2, list(3, list(4, list(5)))))
str(x5)
```

Man mano che le liste diventano ancora più grandi e complesse, `str()` alla fine inizia a fallire, e dovrai passare a `View()`[^rectangling-1].
@fig-view-collapsed mostra il risultato della chiamata `View(x5)`. Il visualizzatore inizia mostrando solo il livello superiore della lista, ma puoi espandere interattivamente qualsiasi componente per vedere di più, come in @fig-view-expand-1. RStudio ti mostrerà anche il codice di cui hai bisogno per accedere a quell'elemento, come in @fig-view-expand-2. Torneremo su come funziona questo codice in @sec-subset-one.

[^rectangling-1]: Questa è una funzionalità di RStudio.

```{r}
#| label: fig-view-collapsed
#| fig.cap: >
#|   La vista di RStudio ti permette di esplorare interattivamente una lista complessa.  
#|   Il visualizzatore si apre mostrando solo il livello superiore della lista.
#| fig.alt: >
#|   Una screenshot di RStudio che mostra il visualizzatore di liste. Mostra i
#|   due figli di x5: il primo figlio è un vettore double e il
#|   secondo figlio è una lista. Un triangolo rivolto a destra indica che il
#|   secondo figlio ha a sua volta dei figli ma non puoi vederli.
#| echo: false
#| out-width: NULL
knitr::include_graphics("screenshots/View-1.png", dpi = 220)
```

```{r}
#| label: fig-view-expand-1
#| fig.cap: >
#|   Cliccando sul triangolo rivolto a destra espandi quel componente
#|   della lista così puoi anche vedere i suoi figli.
#| fig.alt: >
#|   Un'altra screenshot del visualizzatore di liste avendo espanso il secondo
#|   figlio di x5. Ha anche due figli, un vettore double e un'altra
#|   lista.
#| echo: false
#| out-width: NULL
knitr::include_graphics("screenshots/View-2.png", dpi = 220)
```

```{r}
#| label: fig-view-expand-2
#| fig.cap: >
#|   Puoi ripetere questa operazione tutte le volte necessarie per arrivare ai 
#|   dati che ti interessano. Nota l'angolo in basso a sinistra: se clicchi
#|   un elemento della lista, RStudio ti darà il codice di subsetting
#|   necessario per accedervi, in questo caso `x5[[2]][[2]][[2]]`.
#| fig.alt: >
#|   Un'altra screenshot, avendo espanso il nipote di x5 per vedere i suoi
#|   due figli, di nuovo un vettore double e una lista.
#| echo: false
#| out-width: NULL
knitr::include_graphics("screenshots/View-3.png", dpi = 220)
```

### Colonne-lista

Le liste possono anche vivere dentro un tibble, dove le chiamiamo colonne-lista.
Le colonne-lista sono utili perché ti permettono di mettere oggetti in un tibble che di solito non ci apparterebbero.
In particolare, le colonne-lista sono usate molto nell'ecosistema [tidymodels](https://www.tidymodels.org), perché ti permettono di memorizzare cose come output di modelli o ricampionamenti in un data frame.

Ecco un esempio semplice di una colonna-lista:

```{r}
df <- tibble(
  x = 1:2, 
  y = c("a", "b"),
  z = list(list(1, 2), list(3, 4, 5))
)
df
```

Non c'è niente di speciale nelle liste in un tibble; si comportano come qualsiasi altra colonna:

```{r}
df |> 
  filter(x == 1)
```

Calcolare con le colonne-lista è più difficile, ma questo perché calcolare con le liste è più difficile in generale; torneremo su questo in @sec-iteration.
In questo capitolo, ci concentreremo sul disinnestare le colonne-lista in variabili regolari così puoi usare i tuoi strumenti esistenti su di esse.

Il metodo di stampa predefinito visualizza solo un riassunto approssimativo dei contenuti.
La colonna lista potrebbe essere arbitrariamente complessa, quindi non c'è un buon modo per stamparla.
Se vuoi vederla, dovrai estrarre solo quella colonna-lista e applicare una delle tecniche che hai imparato sopra, come `df |> pull(z) |> str()` o `df |> pull(z) |> View()`.

::: callout-note
## R base

È possibile mettere una lista in una colonna di un `data.frame`, ma è molto più complicato perché `data.frame()` tratta una lista come una lista di colonne:

```{r}
data.frame(x = list(1:3, 3:5))
```

Puoi forzare `data.frame()` a trattare una lista come una lista di righe avvolgendola in `I()`, ma il risultato non si stampa particolarmente bene:

```{r}
data.frame(
  x = I(list(1:2, 3:5)), 
  y = c("1, 2", "3, 4, 5")
)
```

È più facile usare colonne-lista con i tibble perché `tibble()` tratta le liste come vettori e il metodo di stampa è stato progettato pensando alle liste.
:::

## Disinnestare

Ora che hai imparato le basi delle liste e delle colonne-lista, esploriamo come puoi trasformarle di nuovo in righe e colonne regolari.
Qui useremo dati di esempio molto semplici così puoi avere l'idea di base; nella prossima sezione passeremo a dati reali.

Le colonne-lista tendono a venire in due forme di base: nominate e non nominate.
Quando i figli sono **nominati**, tendono ad avere gli stessi nomi in ogni riga.
Per esempio, in `df1`, ogni elemento della colonna-lista `y` ha due elementi nominati `a` e `b`.
Le colonne-lista nominate si disinnestano naturalmente in colonne: ogni elemento nominato diventa una nuova colonna nominata.

```{r}
df1 <- tribble(
  ~x, ~y,
  1, list(a = 11, b = 12),
  2, list(a = 21, b = 22),
  3, list(a = 31, b = 32),
)
```

Quando i figli sono **non nominati**, il numero di elementi tende a variare da riga a riga.
Per esempio, in `df2`, gli elementi della colonna-lista `y` sono non nominati e variano in lunghezza da uno a tre.
Le colonne-lista non nominate si disinnestano naturalmente in righe: otterrai una riga per ogni figlio.

```{r}
df2 <- tribble(
  ~x, ~y,
  1, list(11, 12, 13),
  2, list(21),
  3, list(31, 32),
)
```

tidyr fornisce due funzioni per questi due casi: `unnest_wider()` e `unnest_longer()`.
Le sezioni seguenti spiegano come funzionano.

### `unnest_wider()`

Quando ogni riga ha lo stesso numero di elementi con gli stessi nomi, come `df1`, è naturale mettere ogni componente nella propria colonna con `unnest_wider()`:

```{r}
df1 |> 
  unnest_wider(y)
```

Per impostazione predefinita, i nomi delle nuove colonne vengono esclusivamente dai nomi degli elementi della lista, ma puoi usare l'argomento `names_sep` per richiedere che combinino il nome della colonna e il nome dell'elemento.
Questo è utile per disambiguare nomi ripetuti.

```{r}
df1 |> 
  unnest_wider(y, names_sep = "_")
```

### `unnest_longer()`

Quando ogni riga contiene una lista non nominata, è più naturale mettere ogni elemento nella propria riga con `unnest_longer()`:

```{r}
df2 |> 
  unnest_longer(y)
```

Nota come `x` è duplicato per ogni elemento dentro `y`: otteniamo una riga di output per ogni elemento dentro la colonna-lista.
Ma cosa succede se uno degli elementi è vuoto, come nel seguente esempio?

```{r}
df6 <- tribble(
  ~x, ~y,
  "a", list(1, 2),
  "b", list(3),
  "c", list()
)
df6 |> unnest_longer(y)
```

Otteniamo zero righe nell'output, quindi la riga scompare effettivamente.
Se vuoi preservare quella riga, aggiungendo `NA` in `y`, imposta `keep_empty = TRUE`.

### Tipi inconsistenti

Cosa succede se disinesti una colonna-lista che contiene tipi diversi di vettore?
Per esempio, prendi il seguente dataset dove la colonna-lista `y` contiene due numeri, un carattere e un logico, che normalmente non possono essere mescolati in una singola colonna.

```{r}
df4 <- tribble(
  ~x, ~y,
  "a", list(1),
  "b", list("a", TRUE, 5)
)
```

`unnest_longer()` mantiene sempre l'insieme di colonne invariato, mentre cambia il numero di righe.
Quindi cosa succede?
Come fa `unnest_longer()` a produrre cinque righe mantenendo tutto in `y`?

```{r}
df4 |> 
  unnest_longer(y)
```

Come puoi vedere, l'output contiene una colonna-lista, ma ogni elemento della colonna-lista contiene un singolo elemento.
Poiché `unnest_longer()` non riesce a trovare un tipo comune di vettore, mantiene i tipi originali in una colonna-lista.
Potresti chiederti se questo rompe il comandamento che ogni elemento di una colonna deve essere dello stesso tipo.
Non lo fa: ogni elemento è una lista, anche se i contenuti sono di tipi diversi.

Gestire tipi inconsistenti è impegnativo e i dettagli dipendono dalla natura precisa del problema e dai tuoi obiettivi, ma molto probabilmente avrai bisogno di strumenti da @sec-iteration.

### Altre funzioni

tidyr ha alcune altre funzioni utili di rectangling che non copriremo in questo libro:

-   `unnest_auto()` sceglie automaticamente tra `unnest_longer()` e `unnest_wider()` basandosi sulla struttura della colonna-lista. È ottima per l'esplorazione rapida, ma alla fine è una cattiva idea perché non ti costringe a capire come sono strutturati i tuoi dati, e rende il tuo codice più difficile da capire.
-   `unnest()` espande sia righe che colonne. È utile quando hai una colonna-lista che contiene una struttura 2d come un data frame, che non vedi in questo libro, ma potresti incontrare se usi l'ecosistema [tidymodels](https://www.tmwr.org/base-r.html#combining-base-r-models-and-the-tidyverse).

Queste funzioni è bene conoscerle poiché potresti incontrarle quando leggi il codice di altre persone o affronti sfide di rectangling più rare da solo.

### Esercizi

1.  Cosa succede quando usi `unnest_wider()` con colonne-lista non nominate come `df2`?
    Quale argomento è ora necessario?
    Cosa succede ai valori mancanti?

2.  Cosa succede quando usi `unnest_longer()` con colonne-lista nominate come `df1`?
    Che informazioni aggiuntive ottieni nell'output?
    Come puoi sopprimere quel dettaglio extra?

3.  Di tanto in tanto incontri data frame con più colonne-lista con valori allineati.
    Per esempio, nel seguente data frame, i valori di `y` e `z` sono allineati (cioè `y` e `z` avranno sempre la stessa lunghezza dentro una riga, e il primo valore di `y` corrisponde al primo valore di `z`).
    Cosa succede se applichi due chiamate `unnest_longer()` a questo data frame?
    Come puoi preservare la relazione tra `x` e `y`?
    (Suggerimento: leggi attentamente i documenti).

    ```{r}
    df4 <- tribble(
      ~x, ~y, ~z,
      "a", list("y-a-1", "y-a-2"), list("z-a-1", "z-a-2"),
      "b", list("y-b-1", "y-b-2", "y-b-3"), list("z-b-1", "z-b-2", "z-b-3")
    )
    ```

## Casi di studio

La differenza principale tra gli esempi semplici che abbiamo usato sopra e i dati reali è che i dati reali tipicamente contengono livelli multipli di nidificazione che richiedono chiamate multiple a `unnest_longer()` e/o `unnest_wider()`.
Per mostrare questo in azione, questa sezione lavora attraverso tre sfide reali di rectangling usando dataset dal pacchetto repurrrsive.

### Dati molto ampi

Inizieremo con `gh_repos`.
Questa è una lista che contiene dati su una collezione di repository GitHub recuperati usando l'API GitHub. È una lista molto profondamente nidificata quindi è difficile mostrare la struttura in questo libro; raccomandiamo di esplorare un po' da solo con `View(gh_repos)` prima di continuare.

`gh_repos` è una lista, ma i nostri strumenti lavorano con colonne-lista, quindi inizieremo mettendola in un tibble.
Chiamiamo questa colonna `json` per motivi che vedremo più tardi.

```{r}
repos <- tibble(json = gh_repos)
repos
```

Questo tibble contiene 6 righe, una riga per ogni figlio di `gh_repos`.
Ogni riga contiene una lista non nominata con 26 o 30 righe.
Poiché sono non nominate, inizieremo con `unnest_longer()` per mettere ogni figlio nella propria riga:

```{r}
repos |> 
  unnest_longer(json)
```

A prima vista, potrebbe sembrare che non abbiamo migliorato la situazione: mentre abbiamo più righe (176 invece di 6) ogni elemento di `json` è ancora una lista.
Tuttavia, c'è una differenza importante: ora ogni elemento è una lista **nominata** quindi possiamo usare `unnest_wider()` per mettere ogni elemento nella propria colonna:

```{r}
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) 
```

Questo ha funzionato ma il risultato è un po' travolgente: ci sono così tante colonne che tibble non le stampa nemmeno tutte!
Possiamo vederle tutte con `names()`; e qui guardiamo le prime 10:

```{r}
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) |> 
  names() |> 
  head(10)
```

Estraiamo alcune che sembrano interessanti:

```{r}
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) |> 
  select(id, full_name, owner, description)
```

Puoi usare questo per risalire a capire come era strutturato `gh_repos`: ogni figlio era un utente GitHub contenente una lista di fino a 30 repository GitHub che avevano creato.

`owner` è un'altra colonna-lista, e poiché contiene una lista nominata, possiamo usare `unnest_wider()` per ottenere i valori:

```{r}
#| error: true
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) |> 
  select(id, full_name, owner, description) |> 
  unnest_wider(owner)
```

Oh no, questa colonna lista contiene anche una colonna `id` e non possiamo avere due colonne `id` nello stesso data frame.
Come suggerito, usiamo `names_sep` per risolvere il problema:

```{r}
repos |> 
  unnest_longer(json) |> 
  unnest_wider(json) |> 
  select(id, full_name, owner, description) |> 
  unnest_wider(owner, names_sep = "_")
```

Questo dà un altro dataset ampio, ma puoi avere la sensazione che `owner` sembra contenere molti dati aggiuntivi sulla persona che "possiede" il repository.

### Dati relazionali

I dati nidificati sono a volte usati per rappresentare dati che di solito distribuiremmo su più data frame.
Per esempio, prendi `got_chars` che contiene dati sui personaggi che appaiono nei libri e nella serie TV de Il Trono di Spade.
Come `gh_repos` è una lista, quindi iniziamo trasformandola in una colonna-lista di un tibble:

```{r}
chars <- tibble(json = got_chars)
chars
```

La colonna `json` contiene elementi nominati, quindi inizieremo allargandola:

```{r}
chars |> 
  unnest_wider(json)
```

And selecting a few columns to make it easier to read:

```{r}
characters <- chars |> 
  unnest_wider(json) |> 
  select(id, name, gender, culture, born, died, alive)
characters
```

This dataset contains also many list-columns:

```{r}
chars |> 
  unnest_wider(json) |> 
  select(id, where(is.list))
```

Let's explore the `titles` column.
It's an unnamed list-column, so we'll unnest it into rows:

```{r}
chars |> 
  unnest_wider(json) |> 
  select(id, titles) |> 
  unnest_longer(titles)
```

You might expect to see this data in its own table because it would be easy to join to the characters data as needed.
Let's do that, which requires little cleaning: removing the rows containing empty strings and renaming `titles` to `title` since each row now only contains a single title.

```{r}
titles <- chars |> 
  unnest_wider(json) |> 
  select(id, titles) |> 
  unnest_longer(titles) |> 
  filter(titles != "") |> 
  rename(title = titles)
titles
```

You could imagine creating a table like this for each of the list-columns, then using joins to combine them with the character data as you need it.

### Deeply nested

We'll finish off these case studies with a list-column that's very deeply nested and requires repeated rounds of `unnest_wider()` and `unnest_longer()` to unravel: `gmaps_cities`.
This is a two column tibble containing five city names and the results of using Google's [geocoding API](https://developers.google.com/maps/documentation/geocoding) to determine their location:

```{r}
gmaps_cities
```

`json` is a list-column with internal names, so we start with an `unnest_wider()`:

```{r}
gmaps_cities |> 
  unnest_wider(json)
```

This gives us the `status` and the `results`.
We'll drop the status column since they're all `OK`; in a real analysis, you'd also want to capture all the rows where `status != "OK"` and figure out what went wrong.
`results` is an unnamed list, with either one or two elements (we'll see why shortly) so we'll unnest it into rows:

```{r}
gmaps_cities |> 
  unnest_wider(json) |> 
  select(-status) |> 
  unnest_longer(results)
```

Now `results` is a named list, so we'll use `unnest_wider()`:

```{r}
locations <- gmaps_cities |> 
  unnest_wider(json) |> 
  select(-status) |> 
  unnest_longer(results) |> 
  unnest_wider(results)
locations
```

Now we can see why two cities got two results: Washington matched both Washington state and Washington, DC, and Arlington matched Arlington, Virginia and Arlington, Texas.

There are a few different places we could go from here.
We might want to determine the exact location of the match, which is stored in the `geometry` list-column:

```{r}
locations |> 
  select(city, formatted_address, geometry) |> 
  unnest_wider(geometry)
```

That gives us new `bounds` (a rectangular region) and `location` (a point).
We can unnest `location` to see the latitude (`lat`) and longitude (`lng`):

```{r}
locations |> 
  select(city, formatted_address, geometry) |> 
  unnest_wider(geometry) |> 
  unnest_wider(location)
```

Extracting the bounds requires a few more steps:

```{r}
locations |> 
  select(city, formatted_address, geometry) |> 
  unnest_wider(geometry) |> 
  # focus on the variables of interest
  select(!location:viewport) |>
  unnest_wider(bounds)
```

We then rename `southwest` and `northeast` (the corners of the rectangle) so we can use `names_sep` to create short but evocative names:

```{r}
locations |> 
  select(city, formatted_address, geometry) |> 
  unnest_wider(geometry) |> 
  select(!location:viewport) |>
  unnest_wider(bounds) |> 
  rename(ne = northeast, sw = southwest) |> 
  unnest_wider(c(ne, sw), names_sep = "_") 
```

Note how we unnest two columns simultaneously by supplying a vector of variable names to `unnest_wider()`.

Once you've discovered the path to get to the components you're interested in, you can extract them directly using another tidyr function, `hoist()`:

```{r}
#| results: false
locations |> 
  select(city, formatted_address, geometry) |> 
  hoist(
    geometry,
    ne_lat = c("bounds", "northeast", "lat"),
    sw_lat = c("bounds", "southwest", "lat"),
    ne_lng = c("bounds", "northeast", "lng"),
    sw_lng = c("bounds", "southwest", "lng"),
  )
```

If these case studies have whetted your appetite for more real-life rectangling, you can see a few more examples in `vignette("rectangling", package = "tidyr")`.

### Exercises

1.  Roughly estimate when `gh_repos` was created.
    Why can you only roughly estimate the date?

2.  The `owner` column of `gh_repo` contains a lot of duplicated information because each owner can have many repos.
    Can you construct an `owners` data frame that contains one row for each owner?
    (Hint: does `distinct()` work with `list-cols`?)

3.  Follow the steps used for `titles` to create similar tables for the aliases, allegiances, books, and TV series for the Game of Thrones characters.

4.  Explain the following code line-by-line.
    Why is it interesting?
    Why does it work for `got_chars` but might not work in general?

    ```{r}
    #| results: false
    tibble(json = got_chars) |> 
      unnest_wider(json) |> 
      select(id, where(is.list)) |> 
      pivot_longer(
        where(is.list), 
        names_to = "name", 
        values_to = "value"
      ) |>  
      unnest_longer(value)
    ```

5.  In `gmaps_cities`, what does `address_components` contain?
    Why does the length vary between rows?
    Unnest it appropriately to figure it out.
    (Hint: `types` always appears to contain two elements. Does `unnest_wider()` make it easier to work with than `unnest_longer()`?)
    .

## JSON

Tutti i casi di studio nella sezione precedente provenivano da JSON catturato allo stato brado.
JSON è l'abbreviazione di **j**ava**s**cript **o**bject **n**otation ed è il modo in cui la maggior parte delle API web restituisce i dati.
È importante capirlo perché mentre i tipi di dati JSON e di R sono abbastanza simili, non c'è una mappatura perfetta 1-a-1, quindi è bene capire un po' di JSON se le cose vanno male.

### Tipi di dati

JSON è un formato semplice progettato per essere facilmente letto e scritto dalle macchine, non dagli umani.
Ha sei tipi di dati chiave.
Quattro di essi sono scalari:

-   Il tipo più semplice è un null (`null`) che gioca lo stesso ruolo di `NA` in R. Rappresenta l'assenza di dati.
-   Una **stringa** è molto simile a una stringa in R, ma deve sempre usare virgolette doppie.
-   Un **numero** è simile ai numeri di R: possono usare notazione intera (es., 123), decimale (es., 123.45), o scientifica (es., 1.23e3). JSON non supporta `Inf`, `-Inf`, o `NaN`.
-   Un **booleano** è simile a `TRUE` e `FALSE` di R, ma usa `true` e `false` minuscoli.

Le stringhe, i numeri e i booleani di JSON sono abbastanza simili ai vettori character, numeric e logical di R.
La differenza principale è che gli scalari di JSON possono rappresentare solo un singolo valore.
Per rappresentare valori multipli devi usare uno dei due tipi rimanenti: array e oggetti.

Sia gli array che gli oggetti sono simili alle liste in R; la differenza è se sono nominati o no.
Un **array** è come una lista non nominata, e viene scritto con `[]`.
Per esempio `[1, 2, 3]` è un array contenente 3 numeri, e `[null, 1, "string", false]` è un array che contiene un null, un numero, una stringa e un booleano.
Un **oggetto** è come una lista nominata, e viene scritto con `{}`.
I nomi (chiavi nella terminologia JSON) sono stringhe, quindi devono essere circondati da virgolette.
Per esempio, `{"x": 1, "y": 2}` è un oggetto che mappa `x` a 1 e `y` a 2.

Nota che JSON non ha alcun modo nativo per rappresentare date o date-ora, quindi sono spesso memorizzate come stringhe, e dovrai usare `readr::parse_date()` o `readr::parse_datetime()` per trasformarle nella struttura dati corretta.
Similmente, le regole di JSON per rappresentare numeri in virgola mobile in JSON sono un po' imprecise, quindi a volte troverai anche numeri memorizzati in stringhe.
Applica `readr::parse_double()` quando necessario per ottenere il tipo di variabile corretto.

### jsonlite

Per convertire JSON in strutture dati R, raccomandiamo il pacchetto jsonlite, di Jeroen Ooms.
Useremo solo due funzioni jsonlite: `read_json()` e `parse_json()`.
Nella vita reale, userai `read_json()` per leggere un file JSON dal disco.
Per esempio, il pacchetto repurrsive fornisce anche la fonte per `gh_user` come file JSON e puoi leggerlo con `read_json()`:

```{r}
# A path to a json file inside the package:
gh_users_json()

# Read it with read_json()
gh_users2 <- read_json(gh_users_json())

# Check it's the same as the data we were using previously
identical(gh_users, gh_users2)
```

In questo libro, useremo anche `parse_json()`, dato che prende una stringa contenente JSON, il che la rende buona per generare esempi semplici.
Per iniziare, ecco tre semplici dataset JSON, iniziando con un numero, poi mettendo alcuni numeri in un array, poi mettendo quell'array in un oggetto:

```{r}
str(parse_json('1'))
str(parse_json('[1, 2, 3]'))
str(parse_json('{"x": [1, 2, 3]}'))
```

jsonlite ha un'altra funzione importante chiamata `fromJSON()`.
Non la usiamo qui perché esegue semplificazione automatica (`simplifyVector = TRUE`).
Questo spesso funziona bene, particolarmente in casi semplici, ma pensiamo che sia meglio fare il rectangling da solo così sai esattamente cosa sta succedendo e puoi gestire più facilmente le strutture nidificate più complicate.

### Iniziare il processo di rectangling

Nella maggior parte dei casi, i file JSON contengono un singolo array di livello superiore, perché sono progettati per fornire dati su "cose" multiple, es., pagine multiple, o record multipli, o risultati multipli.
In questo caso, inizierai il tuo rectangling con `tibble(json)` così ogni elemento diventa una riga:

```{r}
json <- '[
  {"name": "John", "age": 34},
  {"name": "Susan", "age": 27}
]'
df <- tibble(json = parse_json(json))
df

df |> 
  unnest_wider(json)
```

In casi più rari, il file JSON consiste di un singolo oggetto JSON di livello superiore, rappresentando una "cosa".
In questo caso, dovrai iniziare il processo di rectangling avvolgendolo in una lista, prima di metterlo in un tibble.

```{r}
json <- '{
  "status": "OK", 
  "results": [
    {"name": "John", "age": 34},
    {"name": "Susan", "age": 27}
 ]
}
'
df <- tibble(json = list(parse_json(json)))
df

df |> 
  unnest_wider(json) |> 
  unnest_longer(results) |> 
  unnest_wider(results)
```

In alternativa, puoi raggiungere dentro il JSON analizzato e iniziare con la parte che ti interessa davvero:

```{r}
df <- tibble(results = parse_json(json)$results)
df |> 
  unnest_wider(results)
```

### Exercises

1.  Rettangola `df_col` e `df_row` sotto.
    Rappresentano i due modi di codificare un data frame in JSON.

    ```{r}
    json_col <- parse_json('
      {
        "x": ["a", "x", "z"],
        "y": [10, null, 3]
      }
    ')
    json_row <- parse_json('
      [
        {"x": "a", "y": 10},
        {"x": "x", "y": null},
        {"x": "z", "y": 3}
      ]
    ')

    df_col <- tibble(json = list(json_col)) 
    df_row <- tibble(json = json_row)
    ```

## Riassunto

In questo capitolo, hai imparato cosa sono le liste, come puoi generarle da file JSON, e come trasformarle in data frame rettangolari.
Sorprendentemente abbiamo bisogno solo di due nuove funzioni: `unnest_longer()` per mettere gli elementi della lista in righe e `unnest_wider()` per mettere gli elementi della lista in colonne.
Non importa quanto profondamente nidificata sia la colonna-lista; tutto quello che devi fare è chiamare ripetutamente queste due funzioni.

JSON è il formato di dati più comune restituito dalle API web.
Cosa succede se il sito web non ha un'API, ma puoi vedere dati che vuoi sul sito web?
Questo è l'argomento del prossimo capitolo: web scraping, estrarre dati da pagine web HTML.