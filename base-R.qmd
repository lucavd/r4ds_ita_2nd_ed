# Una guida pratica a base R {#sec-base-r}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

Per concludere la sezione sulla programmazione, ti daremo un rapido tour delle funzioni di base R più importanti che non discutiamo altrimenti nel libro.
Questi strumenti sono particolarmente utili quando fai più programmazione e ti aiuteranno a leggere il codice che incontrerai in natura.

Questo è un buon posto per ricordarti che il tidyverse non è l'unico modo per risolvere problemi di data science.
Insegniamo il tidyverse in questo libro perché i pacchetti tidyverse condividono una filosofia di design comune, aumentando la coerenza tra le funzioni, e rendendo ogni nuova funzione o pacchetto un po' più facile da imparare e usare.
Non è possibile usare il tidyverse senza usare base R, quindi ti abbiamo già insegnato **molte** funzioni di base R: da `library()` per caricare i pacchetti, a `sum()` e `mean()` per riepiloghi numerici, ai tipi di dati factor, date e POSIXct, e ovviamente tutti gli operatori di base come `+`, `-`, `/`, `*`, `|`, `&`, e `!`.
Su quello che non ci siamo concentrati finora sono i workflow di base R, quindi evidenzieremo alcuni di quelli in questo capitolo.

Dopo aver letto questo libro, imparerai altri approcci agli stessi problemi usando base R, data.table, e altri pacchetti.
Indubbiamente incontrerai questi altri approcci quando inizierai a leggere il codice R scritto da altri, particolarmente se stai usando StackOverflow.
È perfettamente okay scrivere codice che usa un mix di approcci, e non lasciare che nessuno ti dica il contrario!

In questo capitolo, ci concentreremo su quattro grandi argomenti: subsetting con `[`, subsetting con `[[` e `$`, la famiglia di funzioni apply, e i loop `for`.
Per finire, discuteremo brevemente due funzioni di plotting essenziali.

### Prerequisiti

Questo pacchetto si concentra su base R quindi non ha prerequisiti reali, ma caricheremo il tidyverse per spiegare alcune delle differenze.

```{r}
#| label: setup
#| message: false
library(tidyverse)
```

## Selezionare elementi multipli con `[` {#sec-subset-many}

`[` è usato per estrarre sotto-componenti da vettori e data frame, ed è chiamato come `x[i]` o `x[i, j]`.
In questa sezione, ti introdurremo alla potenza di `[`, prima mostrandoti come puoi usarlo con i vettori, poi come gli stessi principi si estendono in modo diretto a strutture bidimensionali (2d) come i data frame.
Ti aiuteremo poi a cementare quella conoscenza mostrando come vari verbi dplyr sono casi speciali di `[`.

### Subsetting di vettori

Ci sono cinque tipi principali di cose con cui puoi fare il subsetting di un vettore, cioè, che possono essere la `i` in `x[i]`:

1.  **Un vettore di interi positivi**.
    Il subsetting con interi positivi mantiene gli elementi in quelle posizioni:

    ```{r}
    x <- c("one", "two", "three", "four", "five")
    x[c(3, 2, 5)]
    ```

    Ripetendo una posizione, puoi effettivamente creare un output più lungo dell'input, rendendo il termine "subsetting" un po' improprio.

    ```{r}
    x[c(1, 1, 5, 5, 5, 2)]
    ```

2.  **Un vettore di interi negativi**.
    I valori negativi rimuovono gli elementi alle posizioni specificate:

    ```{r}
    x[c(-1, -3, -5)]
    ```

3.  **Un vettore logico**.
    Il subsetting con un vettore logico mantiene tutti i valori corrispondenti a un valore `TRUE`.
    Questo è spesso utile in congiunzione con le funzioni di confronto.

    ```{r}
    x <- c(10, 3, NA, 5, 8, 1, NA)

    # Tutti i valori non mancanti di x
    x[!is.na(x)]

    # Tutti i valori pari (o mancanti!) di x
    x[x %% 2 == 0]
    ```

    A differenza di `filter()`, gli indici `NA` saranno inclusi nell'output come `NA`.

4.  **Un vettore di caratteri**.
    Se hai un vettore nominato, puoi fare il subsetting con un vettore di caratteri:

    ```{r}
    x <- c(abc = 1, def = 2, xyz = 5)
    x[c("xyz", "def")]
    ```

    Come con il subsetting con interi positivi, puoi usare un vettore di caratteri per duplicare singole voci.

5.  **Niente**.
    Il tipo finale di subsetting è niente, `x[]`, che restituisce la `x` completa.
    Questo non è utile per il subsetting di vettori, ma come vedremo tra poco, è utile quando si fa il subsetting di strutture 2d come i tibble.

### Subsetting di data frame

Ci sono diversi modi[^base-r-1] in cui puoi usare `[` con un data frame, ma il modo più importante è selezionare righe e colonne indipendentemente con `df[rows, cols]`. Qui `rows` e `cols` sono vettori come descritto sopra.
Per esempio, `df[rows, ]` e `df[, cols]` selezionano solo righe o solo colonne, usando il subset vuoto per preservare l'altra dimensione.

[^base-r-1]: Leggi <https://adv-r.hadley.nz/subsetting.html#subset-multiple> per vedere come puoi anche fare il subsetting di un data frame come se fosse un oggetto 1d e come puoi fare il subsetting con una matrice.

Ecco un paio di esempi:

```{r}
df <- tibble(
  x = 1:3, 
  y = c("a", "e", "f"), 
  z = runif(3)
)

# Seleziona prima riga e seconda colonna
df[1, 2]

# Seleziona tutte le righe e le colonne x e y
df[, c("x" , "y")]

# Seleziona righe dove `x` è maggiore di 1 e tutte le colonne
df[df$x > 1, ]
```

Torneremo su `$` tra poco, ma dovresti essere in grado di indovinare cosa fa `df$x` dal contesto: estrae la variabile `x` da `df`.
Dobbiamo usarlo qui perché `[` non usa tidy evaluation, quindi devi essere esplicito sulla fonte della variabile `x`.

C'è una differenza importante tra tibble e data frame quando si tratta di `[`.
In questo libro, abbiamo principalmente usato tibble, che *sono* data frame, ma modificano alcuni comportamenti per rendere la tua vita un po' più facile.
Nella maggior parte dei posti, puoi usare "tibble" e "data frame" in modo intercambiabile, quindi quando vogliamo attirare particolare attenzione al data frame integrato di R, scriveremo `data.frame`.
Se `df` è un `data.frame`, allora `df[, cols]` restituirà un vettore se `col` seleziona una singola colonna e un data frame se seleziona più di una colonna.
Se `df` è un tibble, allora `[` restituirà sempre un tibble.

```{r}
df1 <- data.frame(x = 1:3)
df1[, "x"]

df2 <- tibble(x = 1:3)
df2[, "x"]
```

Un modo per evitare questa ambiguità con i `data.frame` è specificare esplicitamente `drop = FALSE`:

```{r}
df1[, "x" , drop = FALSE]
```

### Equivalenti dplyr

Diversi verbi dplyr sono casi speciali di `[`:

-   `filter()` è equivalente a fare il subsetting delle righe con un vettore logico, avendo cura di escludere i valori mancanti:

    ```{r}
    #| results: false
    df <- tibble(
      x = c(2, 3, 1, 1, NA), 
      y = letters[1:5], 
      z = runif(5)
    )
    df |> filter(x > 1)

    # stesso di
    df[!is.na(df$x) & df$x > 1, ]
    ```

    Un'altra tecnica comune in natura è usare `which()` per il suo effetto collaterale di eliminare i valori mancanti: `df[which(df$x > 1), ]`.

-   `arrange()` è equivalente a fare il subsetting delle righe con un vettore intero, di solito creato con `order()`:

    ```{r}
    #| results: false
    df |> arrange(x, y)

    # stesso di
    df[order(df$x, df$y), ]
    ```

    Puoi usare `order(decreasing = TRUE)` per ordinare tutte le colonne in ordine decrescente o `-rank(col)` per ordinare le colonne in ordine decrescente individualmente.

-   Sia `select()` che `relocate()` sono simili a fare il subsetting delle colonne con un vettore di caratteri:

    ```{r}
    #| results: false
    df |> select(x, z)

    # stesso di
    df[, c("x", "z")]
    ```

Base R fornisce anche una funzione che combina le caratteristiche di `filter()` e `select()`[^base-r-2] chiamata `subset()`:

[^base-r-2]: Ma non gestisce i data frame raggruppati diversamente e non supporta le funzioni helper di selezione come `starts_with()`.

```{r}
df |> 
  filter(x > 1) |> 
  select(y, z)
```

```{r}
#| results: false
# stesso di
df |> subset(x > 1, c(y, z))
```

Questa funzione è stata l'ispirazione per gran parte della sintassi di dplyr.

### Esercizi

1.  Crea funzioni che prendono un vettore come input e restituiscono:

    a.  Gli elementi nelle posizioni pari.
    b.  Ogni elemento eccetto l'ultimo valore.
    c.  Solo i valori pari (e nessun valore mancante).

2.  Perché `x[-which(x > 0)]` non è uguale a `x[x <= 0]`?
    Leggete la documentazione per `which()` e fate alcuni esperimenti per capirlo.

## Selezionare un singolo elemento con `$` e `[[` {#sec-subset-one}

`[`, che seleziona molti elementi, è abbinato a `[[` e `$`, che estraggono un singolo elemento.
In questa sezione, vi mostreremo come usare `[[` e `$` per estrarre colonne dai data frame, discuteremo un paio di differenze in più tra `data.frames` e tibble, e sottolineeremo alcune differenze importanti tra `[` e `[[` quando usati con le liste.

### Data frame

`[[` e `$` possono essere usati per estrarre colonne da un data frame.
`[[` può accedere per posizione o per nome, e `$` è specializzato per l'accesso per nome:

```{r}
tb <- tibble(
  x = 1:4,
  y = c(10, 4, 1, 21)
)

# per posizione
tb[[1]]

# per nome
tb[["x"]]
tb$x
```

Possono anche essere usati per creare nuove colonne, l'equivalente base R di `mutate()`:

```{r}
tb$z <- tb$x + tb$y
tb
```

Ci sono diversi altri approcci base R per creare nuove colonne inclusi `transform()`, `with()` e `within()`.
Hadley ha raccolto alcuni esempi su <https://gist.github.com/hadley/1986a273e384fb2d4d752c18ed71bedf>.

Usare `$` direttamente è conveniente quando si eseguono riassunti veloci.
Per esempio, se volete solo trovare la dimensione del diamante più grande o i possibili valori di `cut`, non c'è bisogno di usare `summarize()`:

```{r}
max(diamonds$carat)

levels(diamonds$cut)
```

dplyr fornisce anche un equivalente a `[[`/`$` che non abbiamo menzionato in @sec-data-transform: `pull()`.
`pull()` prende un nome di variabile o una posizione di variabile e restituisce solo quella colonna.
Ciò significa che potremmo riscrivere il codice sopra per usare la pipe:

```{r}
diamonds |> pull(carat) |> max()

diamonds |> pull(cut) |> levels()
```

### Tibble

Ci sono un paio di differenze importanti tra tibble e `data.frame` base quando si tratta di `$`.
I data frame corrispondono al prefisso di qualsiasi nome di variabile (cosiddetto **partial matching**) e non si lamentano se una colonna non esiste:

```{r}
df <- data.frame(x1 = 1)
df$x
df$z
```

I tibble sono più rigorosi: corrispondono solo esattamente ai nomi delle variabili e genereranno un avvertimento se la colonna a cui state cercando di accedere non esiste:

```{r}
tb <- tibble(x1 = 1)

tb$x
tb$z
```

Per questo motivo a volte scherziamo dicendo che i tibble sono pigri e scontrosi: fanno meno e si lamentano di più.

### Liste

`[[` e `$` sono anche molto importanti per lavorare con le liste, ed è importante capire come differiscono da `[`.
Illustriamo le differenze con una lista chiamata `l`:

```{r}
l <- list(
  a = 1:3, 
  b = "a string", 
  c = pi, 
  d = list(-1, -5)
)
```

-   `[` estrae una sotto-lista.
    Non importa quanti elementi estraete, il risultato sarà sempre una lista.

    ```{r}
    str(l[1:2])

    str(l[1])

    str(l[4])
    ```

    Come con i vettori, potete fare il subsetting con un vettore logico, intero o di caratteri.

-   `[[` e `$` estraggono un singolo componente da una lista.
    Rimuovono un livello di gerarchia dalla lista.

    ```{r}
    str(l[[1]])

    str(l[[4]])

    str(l$a)
    ```

La differenza tra `[` e `[[` è particolarmente importante per le liste perché `[[` penetra nella lista mentre `[` restituisce una nuova lista più piccola.
Per aiutarvi a ricordare la differenza, date un'occhiata all'insolito dosatore di pepe mostrato in @fig-pepper.
Se questo dosatore di pepe è la vostra lista `pepper`, allora `pepper[1]` è un dosatore di pepe contenente un singolo pacchetto di pepe.
`pepper[2]` sembrerebbe uguale, ma conterrebbe il secondo pacchetto.
`pepper[1:2]` sarebbe un dosatore di pepe contenente due pacchetti di pepe.
`pepper[[1]]` estrarrebbe il pacchetto di pepe stesso.

```{r}
#| label: fig-pepper
#| echo: false
#| out-width: "100%"
#| fig-cap: |
#|   (Sinistra) Un dosatore di pepe che Hadley ha trovato una volta nella sua camera d'albergo.
#|   (Centro) `pepper[1]`.
#|   (Destra) `pepper[[1]]`
#| fig-alt: |
#|   Tre foto. A sinistra c'è la foto di un dosatore di pepe di vetro. Invece di 
#|   contenere pepe, il dosatore contiene un singolo pacchetto di pepe.
#|   Al centro c'è la foto di un singolo pacchetto di pepe. A destra c'è la 
#|   foto del contenuto di un pacchetto di pepe.
knitr::include_graphics("diagrams/pepper.png")
```

Lo stesso principio si applica quando usate `[` 1d con un data frame: `df["x"]` restituisce un data frame a una colonna e `df[["x"]]` restituisce un vettore.

### Esercizi

1.  Cosa succede quando usate `[[` con un intero positivo che è più grande della lunghezza del vettore?
    Cosa succede quando fate il subsetting con un nome che non esiste?

2.  Cosa sarebbe `pepper[[1]][1]`?
    E `pepper[[1]][[1]]`?

## Famiglia apply

In @sec-iteration, avete imparato le tecniche tidyverse per l'iterazione come `dplyr::across()` e la famiglia di funzioni map.
In questa sezione, imparerete i loro equivalenti base, la **famiglia apply**.
In questo contesto apply e map sono sinonimi perché un altro modo di dire "mappa una funzione su ogni elemento di un vettore" è "applica una funzione su ogni elemento di un vettore".
Qui vi daremo una rapida panoramica di questa famiglia così potete riconoscerle nel mondo reale.

Il membro più importante di questa famiglia è `lapply()`, che è molto simile a `purrr::map()`[^base-r-3].
Infatti, poiché non abbiamo usato nessuna delle caratteristiche più avanzate di `map()`, potete sostituire ogni chiamata `map()` in @sec-iteration con `lapply()`.

[^base-r-3]: Manca solo di caratteristiche convenienti come le barre di progresso e la segnalazione di quale elemento ha causato il problema se c'è un errore.

Non c'è un equivalente base R esatto di `across()` ma potete avvicinarvi usando `[` con `lapply()`.
Questo funziona perché sotto il cofano, i data frame sono liste di colonne, quindi chiamare `lapply()` su un data frame applica la funzione a ogni colonna.

```{r}
df <- tibble(a = 1, b = 2, c = "a", d = "b", e = 4)

# Prima trova le colonne numeriche
num_cols <- sapply(df, is.numeric)
num_cols

# Poi trasforma ogni colonna con lapply() quindi sostituisci i valori originali
df[, num_cols] <- lapply(df[, num_cols, drop = FALSE], \(x) x * 2)
df
```

Il codice sopra usa una nuova funzione, `sapply()`.
È simile a `lapply()` ma cerca sempre di semplificare il risultato, da qui la `s` nel suo nome, qui producendo un vettore logico invece di una lista.
Non raccomandiamo di usarla per la programmazione, perché la semplificazione può fallire e darvi un tipo inaspettato, ma di solito va bene per l'uso interattivo.
purrr ha una funzione simile chiamata `map_vec()` che non abbiamo menzionato in @sec-iteration.

Base R fornisce una versione più rigorosa di `sapply()` chiamata `vapply()`, abbreviazione di **v**ector apply.
Prende un argomento aggiuntivo che specifica il tipo atteso, assicurando che la semplificazione avvenga allo stesso modo indipendentemente dall'input.
Per esempio, potremmo sostituire la chiamata `sapply()` sopra con questa `vapply()` dove specifichiamo che ci aspettiamo che `is.numeric()` restituisca un vettore logico di lunghezza 1:

```{r}
vapply(df, is.numeric, logical(1))
```

La distinzione tra `sapply()` e `vapply()` è molto importante quando sono dentro una funzione (perché fa una grande differenza per la robustezza della funzione agli input inusuali), ma di solito non importa nell'analisi dei dati.

Un altro membro importante della famiglia apply è `tapply()` che calcola un singolo riassunto raggruppato:

```{r}
diamonds |> 
  group_by(cut) |> 
  summarize(price = mean(price))

tapply(diamonds$price, diamonds$cut, mean)
```

Sfortunatamente `tapply()` restituisce i suoi risultati in un vettore nominato che richiede alcune acrobazie se volete raccogliere riassunti multipli e variabili di raggruppamento in un data frame (è certamente possibile non fare questo e lavorare solo con vettori liberi, ma nella nostra esperienza questo rimanda solo il lavoro).
Se volete vedere come potreste usare `tapply()` o altre tecniche base per eseguire altri riassunti raggruppati, Hadley ha raccolto alcune tecniche [in un gist](https://gist.github.com/hadley/c430501804349d382ce90754936ab8ec).

L'ultimo membro della famiglia apply è il titolare `apply()`, che funziona con matrici e array.
In particolare, fate attenzione a `apply(df, 2, something)`, che è un modo lento e potenzialmente pericoloso di fare `lapply(df, something)`.
Questo raramente emerge nella data science perché di solito lavoriamo con data frame e non matrici.

## Loop `for`

I loop `for` sono il blocco costruttivo fondamentale dell'iterazione che sia le famiglie apply che map usano sotto il cofano.
I loop `for` sono strumenti potenti e generali che è importante imparare man mano che diventate programmatori R più esperti.
La struttura di base di un loop `for` ha questo aspetto:

```{r}
#| eval: false
for (element in vector) {
  # fai qualcosa con element
}
```

L'uso più diretto dei loop `for` è raggiungere lo stesso effetto di `walk()`: chiamare qualche funzione con un effetto collaterale su ogni elemento di una lista.
Per esempio, in @sec-save-database invece di usare `walk()`:

```{r}
#| eval: false
paths |> walk(append_file)
```

Avremmo potuto usare un loop `for`:

```{r}
#| eval: false
for (path in paths) {
  append_file(path)
}
```

Le cose diventano un po' più complicate se volete salvare l'output del loop `for`, per esempio leggendo tutti i file excel in una directory come abbiamo fatto in @sec-iteration:

```{r}
paths <- dir("data/gapminder", pattern = "\\.xlsx$", full.names = TRUE)
files <- map(paths, readxl::read_excel)
```

Ci sono alcune tecniche diverse che potete usare, ma raccomandiamo di essere espliciti su come sarà l'output fin dall'inizio.
In questo caso, vogliamo una lista della stessa lunghezza di `paths`, che possiamo creare con `vector()`:

```{r}
files <- vector("list", length(paths))
```

Poi invece di iterare sugli elementi di `paths`, itereremo sui loro indici, usando `seq_along()` per generare un indice per ogni elemento di paths:

```{r}
seq_along(paths)
```

Usare gli indici è importante perché ci permette di collegare ogni posizione nell'input con la posizione corrispondente nell'output:

```{r}
for (i in seq_along(paths)) {
  files[[i]] <- readxl::read_excel(paths[[i]])
}
```

Per combinare la lista di tibble in un singolo tibble potete usare `do.call()` + `rbind()`:

```{r}
do.call(rbind, files)
```

Piuttosto che creare una lista e salvare i risultati man mano, un approccio più semplice è costruire il data frame pezzo per pezzo:

```{r}
out <- NULL
for (path in paths) {
  out <- rbind(out, readxl::read_excel(path))
}
```

Raccomandiamo di evitare questo pattern perché può diventare molto lento quando il vettore è molto lungo.
Questa è la fonte della persistente falsa credenza che i loop `for` siano lenti: non lo sono, ma far crescere iterativamente un vettore lo è.

## Grafici

Molti utenti R che non usano altrimenti il tidyverse preferiscono ggplot2 per i grafici a causa di caratteristiche utili come valori predefiniti sensati, legende automatiche e un aspetto moderno.
Tuttavia, le funzioni di plotting base R possono ancora essere utili perché sono così concise --- serve pochissima digitazione per fare un grafico esplorativo di base.

Ci sono due tipi principali di grafici base che vedrete nel mondo reale: scatterplot e istogrammi, prodotti rispettivamente con `plot()` e `hist()`.
Ecco un rapido esempio dal dataset diamonds:

```{r}
#| dev: png
#| fig-width: 4
#| fig-asp: 1
#| layout-ncol: 2
#| fig-alt: |
#|   A sinistra, istogramma dei carati dei diamanti, che va da 0 a 5 carati.
#|   La distribuzione è unimodale e asimmetrica a destra. A destra, scatter 
#|   plot di prezzo vs. carato dei diamanti, che mostra una relazione positiva 
#|   che si allarga man mano che sia il prezzo che il carato aumentano. Lo scatter plot 
#|   mostra pochissimi diamanti più grandi di 3 carati rispetto ai diamanti tra 
#|   0 e 3 carati.
# Sinistra
hist(diamonds$carat)

# Destra
plot(diamonds$carat, diamonds$price)
```

Notate che le funzioni di plotting base funzionano con i vettori, quindi dovete estrarre le colonne dal data frame usando `$` o qualche altra tecnica.

## Riassunto

In questo capitolo, vi abbiamo mostrato una selezione di funzioni base R utili per il subsetting e l'iterazione.
Rispetto agli approcci discussi altrove nel libro, queste funzioni tendono ad avere più un sapore "vettoriale" che un sapore "data frame" perché le funzioni base R tendono a prendere vettori individuali, piuttosto che un data frame e qualche specifica di colonna.
Questo spesso rende la vita più facile per la programmazione e quindi diventa più importante man mano che scrivete più funzioni e iniziate a scrivere i vostri pacchetti.

Questo capitolo conclude la sezione di programmazione del libro.
Avete fatto un solido inizio nel vostro viaggio per diventare non solo un data scientist che usa R, ma un data scientist che può *programmare* in R.
Speriamo che questi capitoli abbiano acceso il vostro interesse nella programmazione e che non vediate l'ora di imparare di più al di fuori di questo libro.