# Stringhe {#sec-strings}

```{r}
#| echo: false
source("_common.R")
```

## Introduzione

Finora hai utilizzato molte stringhe senza approfondire troppo i dettagli.
Ora è il momento di immergersi in esse, capire come funzionano le stringhe e padroneggiare alcuni dei potenti strumenti di manipolazione delle stringhe a tua disposizione.

Iniziamo con i dettagli della creazione di stringhe e vettori di caratteri.
Poi ti immergerai nella creazione di stringhe dai dati, quindi il contrario: estrarre stringhe dai dati.
Successivamente discuteremo degli strumenti che lavorano con singole lettere.
Il capitolo si conclude con funzioni che operano su singole lettere e una breve discussione sui casi in cui le tue aspettative dall'inglese potrebbero fuorviarti quando lavori con altre lingue.

Continueremo a lavorare con le stringhe nel prossimo capitolo, dove imparerai di più sulla potenza delle regular expressions.

### Prerequisiti

In questo capitolo utilizzeremo funzioni del package stringr, che fa parte del core tidyverse.
Utilizzeremo anche i dati babynames poiché forniscono alcune stringhe divertenti da manipolare.

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(babynames)
```

Puoi riconoscere rapidamente quando stai usando una funzione stringr perché tutte le funzioni stringr iniziano con `str_`.
Questo è particolarmente utile se usi RStudio perché digitare `str_` attiverà l'autocompletamento, permettendoti di rinfrescare la memoria sulle funzioni disponibili.

```{r}
#| echo: false
#| fig-alt: |
#|   str_c typed into the RStudio console with the autocomplete tooltip shown 
#|   on top, which lists functions beginning with str_c. The funtion signature 
#|   and beginning of the man page for the highlighted function from the 
#|   autocomplete list are shown in a panel to its right.
knitr::include_graphics("screenshots/stringr-autocomplete.png")
```

## Creare una stringa

Abbiamo creato stringhe di passaggio in precedenza nel libro ma non abbiamo discusso i dettagli.
Innanzitutto, puoi creare una stringa usando sia virgolette singole (`'`) che virgolette doppie (`"`).
Non c'è differenza di comportamento tra le due, quindi nell'interesse della coerenza, la [guida di stile tidyverse](https://style.tidyverse.org/syntax.html#character-vectors) raccomanda di usare `"`, a meno che la stringa non contenga più `"`.

```{r}
string1 <- "Questa è una stringa"
string2 <- 'Se voglio includere una "virgoletta" dentro una stringa, uso le virgolette singole'
```

Se dimentichi di chiudere una virgoletta, vedrai `+`, il prompt di continuazione:

```         
> "Questa è una stringa senza virgolette di chiusura
+ 
+ 
+ AIUTO SONO BLOCCATO IN UNA STRINGA
```

Se ti succede questo e non riesci a capire quale virgoletta chiudere, premi Escape per annullare e riprova.

### Escape

Per includere una virgoletta singola o doppia letterale in una stringa, puoi usare `\` per "escape" (sfuggire):

```{r}
double_quote <- "\"" # oppure '"'
single_quote <- '\'' # oppure "'"
```

Quindi se vuoi includere una backslash letterale nella tua stringa, dovrai applicare l'escape: `"\\"`:

```{r}
backslash <- "\\"
```

Attenzione che la rappresentazione stampata di una stringa non è la stessa della stringa stessa perché la rappresentazione stampata mostra gli escape (in altre parole, quando stampi una stringa, puoi copiare e incollare l'output per ricreare quella stringa).
Per vedere il contenuto grezzo della stringa, usa `str_view()`[^strings-1]:

[^strings-1]: Oppure usa la funzione base R `writeLines()`.

```{r}
x <- c(single_quote, double_quote, backslash)
x
str_view(x)
```

### Raw strings {#sec-raw-strings}

Creare una stringa con virgolette multiple o backslash diventa confuso rapidamente.
Per illustrare il problema, creiamo una stringa che contiene il contenuto del blocco di codice dove definiamo le variabili `double_quote` e `single_quote`:

```{r}
tricky <- "double_quote <- \"\\\"\" # oppure '\"'
single_quote <- '\\'' # oppure \"'\""
str_view(tricky)
```

Sono molte backslash!
(Questo è talvolta chiamato [leaning toothpick syndrome](https://en.wikipedia.org/wiki/Leaning_toothpick_syndrome).) Per eliminare l'escaping, puoi invece usare una **raw string**[^strings-2]:

[^strings-2]: Disponibile in R 4.0.0 e versioni successive.

```{r}
tricky <- r"(double_quote <- "\"" # oppure '"'
single_quote <- '\'' # oppure "'")"
str_view(tricky)
```

Una raw string di solito inizia con `r"(` e finisce con `)"`.
Ma se la tua stringa contiene `)"` puoi invece usare `r"[]"` o `r"{}"`, e se ancora non basta, puoi inserire qualsiasi numero di trattini per rendere uniche le coppie di apertura e chiusura, ad esempio `r"--()--"`, `r"---()---"`, ecc. Le raw strings sono abbastanza flessibili da gestire qualsiasi testo.

### Altri caratteri speciali

Oltre a `\"`, `\'`, e `\\`, ci sono una manciata di altri caratteri speciali che potrebbero tornare utili. I più comuni sono `\n`, una nuova riga, e `\t`, tab. A volte vedrai anche stringhe contenenti escape Unicode che iniziano con `\u` o `\U`. Questo è un modo di scrivere caratteri non inglesi che funziona su tutti i sistemi. Puoi vedere l'elenco completo degli altri caratteri speciali in `?Quotes`.

```{r}
x <- c("one\ntwo", "one\ttwo", "\u00b5", "\U0001f604")
x
str_view(x)
```

Nota che `str_view()` usa parentesi graffe per i tab per renderli più facili da individuare[^strings-3].
Una delle sfide del lavorare con il testo è che ci sono diversi modi in cui gli spazi bianchi possono finire nel testo, quindi questo background ti aiuta a riconoscere che sta succedendo qualcosa di strano.

[^strings-3]: `str_view()` usa anche i colori per attirare la tua attenzione su tab, spazi, corrispondenze, ecc.
    I colori attualmente non appaiono nel libro, ma li noterai quando eseguirai il codice interattivamente.

### Esercizi

1.  Crea stringhe che contengono i seguenti valori:

    1.  `He said "That's amazing!"`

    2.  `\a\b\c\d`

    3.  `\\\\\\`

2.  Crea la stringa nella tua sessione R e stampala.
    Cosa succede al carattere speciale "\\u00a0"?
    Come lo visualizza `str_view()`?
    Puoi fare una piccola ricerca su Google per capire cos'è questo carattere speciale?

    ```{r}
    x <- "Questo\u00a0è\u00a0complicato"
    ```

## Creare molte stringhe dai dati

Ora che hai imparato le basi della creazione di una stringa o due "a mano", entreremo nei dettagli della creazione di stringhe da altre stringhe.
Questo ti aiuterà a risolvere il problema comune in cui hai del testo che hai scritto e che vuoi combinare con stringhe da un data frame.
Ad esempio, potresti combinare "Hello" con una variabile `name` per creare un saluto.
Ti mostreremo come farlo con `str_c()` e `str_glue()` e come puoi usarle con `mutate()`.
Questo solleva naturalmente la domanda su quali funzioni stringr potresti usare con `summarize()`, quindi concluderemo questa sezione con una discussione di `str_flatten()`, che è una funzione di summary per le stringhe.

### `str_c()`

`str_c()` prende qualsiasi numero di vettori come argomenti e restituisce un vettore di caratteri:

```{r}
str_c("x", "y")
str_c("x", "y", "z")
str_c("Hello ", c("John", "Susan"))
```

`str_c()` è molto simile alla funzione base `paste0()`, ma è progettata per essere usata con `mutate()` rispettando le solite regole tidyverse per il riciclaggio e la propagazione dei valori mancanti:

```{r}
df <- tibble(name = c("Flora", "David", "Terra", NA))
df |> mutate(greeting = str_c("Hi ", name, "!"))
```

Se vuoi che i valori mancanti vengano visualizzati in un altro modo, usa `coalesce()` per sostituirli.
A seconda di quello che vuoi, potresti usarlo sia dentro che fuori da `str_c()`:

```{r}
df |> 
  mutate(
    greeting1 = str_c("Hi ", coalesce(name, "you"), "!"),
    greeting2 = coalesce(str_c("Hi ", name, "!"), "Hi!")
  )
```

### `str_glue()` {#sec-glue}

Se stai mescolando molte stringhe fisse e variabili con `str_c()`, noterai che digiti molte `"`, rendendo difficile vedere l'obiettivo generale del codice. Un approccio alternativo è fornito dal [package glue](https://glue.tidyverse.org) tramite `str_glue()`[^strings-4]. Le dai una singola stringa che ha una caratteristica speciale: tutto ciò che è dentro `{}` sarà valutato come se fosse fuori dalle virgolette:

[^strings-4]: Se non stai usando stringr, puoi anche accedervi direttamente con `glue::glue()`.

```{r}
df |> mutate(greeting = str_glue("Hi {name}!"))
```

Come puoi vedere, `str_glue()` attualmente converte i valori mancanti nella stringa `"NA"`, rendendola purtroppo inconsistente con `str_c()`.

Potresti anche chiederti cosa succede se devi includere una normale `{` o `}` nella tua stringa.
Sei sulla strada giusta se intuisci che dovrai applicare l'escape in qualche modo.
Il trucco è che glue usa una tecnica di escaping leggermente diversa: invece di prefissare con un carattere speciale come `\`, raddoppi i caratteri speciali:

```{r}
df |> mutate(greeting = str_glue("{{Hi {name}!}}"))
```

### `str_flatten()`

`str_c()` e `str_glue()` funzionano bene con `mutate()` perché il loro output ha la stessa lunghezza dei loro input.
E se volessi una funzione che funzioni bene con `summarize()`, cioè qualcosa che restituisce sempre una singola stringa?
Questo è il compito di `str_flatten()`[^strings-5]: prende un vettore di caratteri e combina ogni elemento del vettore in una singola stringa:

[^strings-5]: L'equivalente in R base è `paste()` usato con l'argomento `collapse`.

```{r}
str_flatten(c("x", "y", "z"))
str_flatten(c("x", "y", "z"), ", ")
str_flatten(c("x", "y", "z"), ", ", last = ", and ")
```

Questo la rende adatta per lavorare bene con `summarize()`:

```{r}
df <- tribble(
  ~ name, ~ fruit,
  "Carmen", "banana",
  "Carmen", "apple",
  "Marvin", "nectarine",
  "Terence", "cantaloupe",
  "Terence", "papaya",
  "Terence", "mandarin"
)
df |>
  group_by(name) |> 
  summarize(fruits = str_flatten(fruit, ", "))
```

### Esercizi

1.  Confronta i risultati di `paste0()` con `str_c()` per i seguenti input:

    ```{r}
    #| eval: false
    str_c("hi ", NA)
    str_c(letters[1:2], letters[1:3])
    ```

2.  Qual è la differenza tra `paste()` e `paste0()`?
    Come puoi ricreare l'equivalente di `paste()` con `str_c()`?

3.  Converti le seguenti espressioni da `str_c()` a `str_glue()` o viceversa:

    a.  `str_c("The price of ", food, " is ", price)`

    b.  `str_glue("I'm {age} years old and live in {country}")`

    c.  `str_c("\\section{", title, "}")`

## Estrarre dati dalle stringhe

È molto comune che più variabili siano stipate insieme in una singola stringa.
In questa sezione imparerai come usare quattro funzioni tidyr per estrarle:

-   `df |> separate_longer_delim(col, delim)`
-   `df |> separate_longer_position(col, width)`
-   `df |> separate_wider_delim(col, delim, names)`
-   `df |> separate_wider_position(col, widths)`

Se guardi attentamente, puoi vedere che c'è un pattern comune qui: `separate_`, poi `longer` o `wider`, poi `_`, poi per `delim` o `position`.
Questo perché queste quattro funzioni sono composte da due primitive più semplici:

-   Proprio come con `pivot_longer()` e `pivot_wider()`, le funzioni `_longer` rendono il data frame di input più lungo creando nuove righe e le funzioni `_wider` rendono il data frame di input più largo generando nuove colonne.
-   `delim` divide una stringa con un delimitatore come `", "` o `" "`; `position` divide a larghezze specificate, come `c(3, 5, 2)`.

Torneremo all'ultimo membro di questa famiglia, `separate_wider_regex()`, in @sec-regular-expressions.
È la più flessibile delle funzioni `wider`, ma devi sapere qualcosa sulle regular expressions prima di poterla usare.

Le seguenti due sezioni ti daranno l'idea di base dietro queste funzioni separate, prima separando in righe (che è un po' più semplice) e poi separando in colonne.
Concluderemo discutendo degli strumenti che le funzioni `wider` ti forniscono per diagnosticare problemi.

### Separare in righe

Separare una stringa in righe tende ad essere più utile quando il numero di componenti varia da riga a riga.
Il caso più comune è richiedere `separate_longer_delim()` per dividere basandosi su un delimitatore:

```{r}
df1 <- tibble(x = c("a,b,c", "d,e", "f"))
df1 |> 
  separate_longer_delim(x, delim = ",")
```

È più raro vedere `separate_longer_position()` in natura, ma alcuni dataset più vecchi usano un formato molto compatto dove ogni carattere è usato per registrare un valore:

```{r}
df2 <- tibble(x = c("1211", "131", "21"))
df2 |> 
  separate_longer_position(x, width = 1)
```

### Separare in colonne {#sec-string-columns}

Separare una stringa in colonne tende ad essere più utile quando c'è un numero fisso di componenti in ogni stringa, e vuoi distribuirli in colonne.
Sono leggermente più complicate dei loro equivalenti `longer` perché devi nominare le colonne.
Ad esempio, in questo dataset seguente, `x` è composta da un codice, un numero di edizione e un anno, separati da `"."`.
Per usare `separate_wider_delim()`, forniamo il delimitatore e i nomi in due argomenti:

```{r}
df3 <- tibble(x = c("a10.1.2022", "b10.2.2011", "e15.1.2015"))
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", "edition", "year")
  )
```

Se un pezzo specifico non è utile puoi usare un nome `NA` per ometterlo dai risultati:

```{r}
df3 |> 
  separate_wider_delim(
    x,
    delim = ".",
    names = c("code", NA, "year")
  )
```

`separate_wider_position()` funziona un po' diversamente perché tipicamente vuoi specificare la larghezza di ogni colonna.
Quindi le dai un vettore di interi nominato, dove il nome dà il nome della nuova colonna, e il valore è il numero di caratteri che occupa.
Puoi omettere valori dall'output non nominandoli:

```{r}
df4 <- tibble(x = c("202215TX", "202122LA", "202325CA")) 
df4 |> 
  separate_wider_position(
    x,
    widths = c(year = 4, age = 2, state = 2)
  )
```

### Diagnosticare problemi di allargamento

`separate_wider_delim()`[^strings-6] richiede un set fisso e noto di colonne.
Cosa succede se alcune delle righe non hanno il numero atteso di pezzi?
Ci sono due possibili problemi, troppo pochi o troppi pezzi, così `separate_wider_delim()` fornisce due argomenti per aiutare: `too_few` e `too_many`. Guardiamo prima il caso `too_few` con questo dataset di esempio:

[^strings-6]: Gli stessi principi si applicano a `separate_wider_position()` e `separate_wider_regex()`.

```{r}
#| error: true
df <- tibble(x = c("1-1-1", "1-1-2", "1-3", "1-3-2", "1"))

df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z")
  )
```

Noterai che otteniamo un errore, ma l'errore ci dà alcuni suggerimenti su come potresti procedere.
Iniziamo con il debug del problema:

```{r}
debug <- df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "debug"
  )
debug
```

Quando usi la modalità debug, ottieni tre colonne extra aggiunte all'output: `x_ok`, `x_pieces`, e `x_remainder` (se separi una variabile con un nome diverso, otterrai un prefisso diverso).
Qui, `x_ok` ti permette di trovare rapidamente gli input che sono falliti:

```{r}
debug |> filter(!x_ok)
```

`x_pieces` ci dice quanti pezzi sono stati trovati, confrontato con i 3 attesi (la lunghezza di `names`).
`x_remainder` non è utile quando ci sono troppo pochi pezzi, ma lo vedremo di nuovo a breve.

A volte guardare queste informazioni di debug rivelerà un problema con la tua strategia di delimitatore o suggerirà che devi fare più preprocessing prima di separare.
In quel caso, correggi il problema a monte e assicurati di rimuovere `too_few = "debug"` per garantire che i nuovi problemi diventino errori.

In altri casi, potresti voler riempire i pezzi mancanti con `NA` e andare avanti.
Questo è il compito di `too_few = "align_start"` e `too_few = "align_end"` che ti permettono di controllare dove dovrebbero andare gli `NA`:

```{r}
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "align_start"
  )
```

Gli stessi principi si applicano se hai troppi pezzi:

```{r}
#| error: true
df <- tibble(x = c("1-1-1", "1-1-2", "1-3-5-6", "1-3-2", "1-3-5-7-9"))

df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z")
  )
```

Ma ora, quando facciamo il debug del risultato, puoi vedere lo scopo di `x_remainder`:

```{r}
debug <- df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "debug"
  )
debug |> filter(!x_ok)
```

Hai un set leggermente diverso di opzioni per gestire troppi pezzi: puoi sia silenziosamente "eliminare" qualsiasi pezzo aggiuntivo o "fonderli" tutti nella colonna finale:

```{r}
df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "drop"
  )


df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_many = "merge"
  )
```

## Lettere

In questa sezione ti introdurremo alle funzioni che ti permettono di lavorare con le singole lettere all'interno di una stringa.
Imparerai come trovare la lunghezza di una stringa, estrarre sottostringhe e gestire stringhe lunghe in grafici e tabelle.

### Lunghezza

`str_length()` ti dice il numero di lettere nella stringa:

```{r}
str_length(c("a", "R for data science", NA))
```

Potresti usare questo con `count()` per trovare la distribuzione delle lunghezze dei nomi di bambini americani e poi con `filter()` per guardare i nomi più lunghi, che capita abbiano 15 lettere[^strings-7]:

[^strings-7]: Guardando queste voci, indovineremmo che i dati babynames eliminano spazi o trattini e troncano dopo 15 lettere.

```{r}
babynames |>
  count(length = str_length(name), wt = n)

babynames |> 
  filter(str_length(name) == 15) |> 
  count(name, wt = n, sort = TRUE)
```

### Sottoinsieme

Puoi estrarre parti di una stringa usando `str_sub(string, start, end)`, dove `start` e `end` sono le posizioni dove la sottostringa dovrebbe iniziare e finire.
Gli argomenti `start` e `end` sono inclusivi, quindi la lunghezza della stringa restituita sarà `end - start + 1`:

```{r}
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
```

Puoi usare valori negativi per contare a ritroso dalla fine della stringa: -1 è l'ultimo carattere, -2 è il penultimo carattere, ecc.

```{r}
str_sub(x, -3, -1)
```

Nota che `str_sub()` non fallirà se la stringa è troppo corta: restituirà semplicemente il più possibile:

```{r}
str_sub("a", 1, 5)
```

Potremmo usare `str_sub()` con `mutate()` per trovare la prima e l'ultima lettera di ogni nome:

```{r}
babynames |> 
  mutate(
    first = str_sub(name, 1, 1),
    last = str_sub(name, -1, -1)
  )
```

### Esercizi

1.  Quando calcoli la distribuzione della lunghezza dei babynames, perché abbiamo usato `wt = n`?
2.  Usa `str_length()` e `str_sub()` per estrarre la lettera di mezzo da ogni nome di bambino. Cosa farai se la stringa ha un numero pari di caratteri?
3.  Ci sono tendenze principali nella lunghezza dei babynames nel tempo? E riguardo alla popolarità delle prime e ultime lettere?

## Testo non inglese {#sec-other-languages}

Finora ci siamo concentrati sul testo in lingua inglese che è particolarmente facile da gestire per due motivi.
Primo, l'alfabeto inglese è relativamente semplice: ci sono solo 26 lettere.
Secondo (e forse più importante), l'infrastruttura informatica che usiamo oggi è stata progettata prevalentemente da parlanti inglesi.
Sfortunatamente, non abbiamo spazio per un trattamento completo delle lingue non inglesi.
Tuttavia, volevamo attirare la tua attenzione su alcune delle sfide più grandi che potresti incontrare: encoding, variazioni delle lettere e funzioni dipendenti dal locale.

### Encoding

Quando lavori con testo non inglese, la prima sfida è spesso l'**encoding**.
Per capire cosa sta succedendo, dobbiamo immergerci in come i computer rappresentano le stringhe.
In R, possiamo accedere alla rappresentazione sottostante di una stringa usando `charToRaw()`:

```{r}
charToRaw("Hadley")
```

Ognuno di questi sei numeri esadecimali rappresenta una lettera: `48` è H, `61` è a, e così via.
La mappatura dal numero esadecimale al carattere è chiamata encoding, e in questo caso, l'encoding è chiamato ASCII.
ASCII fa un ottimo lavoro nel rappresentare i caratteri inglesi perché è l'**American** Standard Code for Information Interchange.

Le cose non sono così facili per le lingue diverse dall'inglese.
Nei primi giorni dell'informatica, c'erano molti standard concorrenti per codificare caratteri non inglesi.
Ad esempio, c'erano due encoding diversi per l'Europa: Latin1 (alias ISO-8859-1) era usato per le lingue dell'Europa occidentale, e Latin2 (alias ISO-8859-2) era usato per le lingue dell'Europa centrale.
In Latin1, il byte `b1` è "±", ma in Latin2, è "ą"!
Fortunamente, oggi c'è uno standard che è supportato quasi ovunque: UTF-8.
UTF-8 può codificare praticamente ogni carattere usato dagli umani oggi e molti simboli extra come gli emoji.

readr usa UTF-8 ovunque.
Questo è un buon default ma fallirà per dati prodotti da sistemi più vecchi che non usano UTF-8.
Se succede questo, le tue stringhe sembreranno strane quando le stampi.
A volte solo uno o due caratteri potrebbero essere rovinati; altre volte, otterrai completo nonsense.
Ad esempio qui ci sono due CSV inline con encoding inusuali[^strings-8]:

[^strings-8]: Qui sto usando lo speciale `\x` per codificare dati binari direttamente in una stringa.

```{r}
#| eval: false

x1 <- "text\nEl Ni\xf1o è stato particolarmente grave quest'anno"
read_csv(x1)$text
#> [1] "El Ni\xf1o was particularly bad this year"

x2 <- "text\n\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
read_csv(x2)$text
#> [1] "\x82\xb1\x82\xf1\x82ɂ\xbf\x82\xcd"
```

Per leggerli correttamente, specifichi l'encoding tramite l'argomento `locale`:

```{r}
#| eval: false
read_csv(x1, locale = locale(encoding = "Latin1"))$text
#> [1] "El Niño è stato particolarmente grave quest'anno"

read_csv(x2, locale = locale(encoding = "Shift-JIS"))$text
#> [1] "こんにちは"
```

Come trovi l'encoding corretto?
Se sei fortunato, sarà incluso da qualche parte nella documentazione dei dati.
Sfortunatamente, questo è raramente il caso, quindi readr fornisce `guess_encoding()` per aiutarti a capirlo.
Non è infallibile e funziona meglio quando hai molto testo (a differenza di qui), ma è un posto ragionevole da cui iniziare.
Aspettati di provare alcuni encoding diversi prima di trovare quello giusto.

Gli encoding sono un argomento ricco e complesso; abbiamo solo graffiato la superficie qui.
Se vuoi imparare di più, raccomandiamo di leggere la spiegazione dettagliata su <http://kunststube.net/encoding/>.

### Variazioni delle lettere

Lavorare in lingue con accenti pone una sfida significativa quando si determina la posizione delle lettere (ad esempio, con `str_length()` e `str_sub()`) poiché le lettere accentate potrebbero essere codificate come un singolo carattere individuale (ad esempio, ü) o come due caratteri combinando una lettera non accentata (ad esempio, u) con un segno diacritico (ad esempio, ¨).
Ad esempio, questo codice mostra due modi di rappresentare ü che sembrano identici:

```{r}
u <- c("\u00fc", "u\u0308")
str_view(u)
```

Ma entrambe le stringhe differiscono in lunghezza, e i loro primi caratteri sono diversi:

```{r}
str_length(u)
str_sub(u, 1, 1)
```

Infine, nota che un confronto di queste stringhe con `==` interpreta queste stringhe come diverse, mentre la comoda funzione `str_equal()` in stringr riconosce che entrambe hanno la stessa apparenza:

```{r}
u[[1]] == u[[2]]

str_equal(u[[1]], u[[2]])
```

### Funzioni dipendenti dal locale

Infine, ci sono una manciata di funzioni stringr il cui comportamento dipende dal tuo **locale**.
Un locale è simile a una lingua ma include un identificatore di regione opzionale per gestire variazioni regionali all'interno di una lingua.
Un locale è specificato da un'abbreviazione di lingua minuscola, opzionalmente seguita da un `_` e un identificatore di regione maiuscolo.
Ad esempio, "en" è inglese, "en_GB" è inglese britannico, e "en_US" è inglese americano.
Se non conosci già il codice per la tua lingua, [Wikipedia](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) ha una buona lista, e puoi vedere quali sono supportati in stringr guardando `stringi::stri_locale_list()`.

Le funzioni stringhe di R base usano automaticamente il locale impostato dal tuo sistema operativo.
Questo significa che le funzioni stringhe di R base fanno quello che ti aspetti per la tua lingua, ma il tuo codice potrebbe funzionare diversamente se lo condividi con qualcuno che vive in un paese diverso.
Per evitare questo problema, stringr usa per default le regole inglesi usando il locale "en" e richiede di specificare l'argomento `locale` per sovrascriverlo.
Fortunamente, ci sono solo due set di funzioni dove il locale conta davvero: cambiare il caso e ordinare.

Le regole per cambiare il caso differiscono tra le lingue.
Ad esempio, il turco ha due i: con e senza punto.
Poiché sono due lettere distinte, sono messe in maiuscolo diversamente:

```{r}
str_to_upper(c("i", "ı"))
str_to_upper(c("i", "ı"), locale = "tr")
```

Ordinare le stringhe dipende dall'ordine dell'alfabeto, e l'ordine dell'alfabeto non è lo stesso in ogni lingua[^strings-9]!
Ecco un esempio: in ceco, "ch" è una lettera composta che appare dopo `h` nell'alfabeto.

[^strings-9]: Ordinare in lingue che non hanno un alfabeto, come il cinese, è ancora più complicato.

```{r}
str_sort(c("a", "c", "ch", "h", "z"))
str_sort(c("a", "c", "ch", "h", "z"), locale = "cs")
```

Questo emerge anche quando ordini stringhe con `dplyr::arrange()`, motivo per cui ha anche un argomento `locale`.

## Riepilogo

In questo capitolo hai imparato alcune delle potenzialità del package stringr: come creare, combinare ed estrarre stringhe, e alcune delle sfide che potresti affrontare con stringhe non inglesi.
Ora è il momento di imparare uno degli strumenti più importanti e potenti per lavorare con le stringhe: le regular expressions.
Le regular expressions sono un linguaggio molto conciso ma molto espressivo per descrivere pattern all'interno delle stringhe e sono l'argomento del prossimo capitolo.